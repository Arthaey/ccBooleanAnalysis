{"version":3,"sources":["webpack:///webpack/bootstrap 7fdde3fd70d35de23c90","webpack:///./src/ccBooleanAnalysis.js","webpack:///./~/jsep/build/jsep.js","webpack:///./src/queue.js","webpack:///./~/logic-solver/logic-solver.js","webpack:///./~/logic-solver/minisat_wrapper.js","webpack:///./~/logic-solver/minisat.js","webpack:///./~/underscore/underscore.js"],"names":["jsep","require","Queue","Logic","ccBooleanAnalysis","_constants","kNOT","kAND","kOR","kBinaryExpression","kUnaryExpression","kIdentifier","getParseTree","find","re","RegExp","s","replace","getDNFObjectEncoding","iterateAndTree","positive_holder","negative_holder","parse_tree","type","data","push","name","argument","left","right","iterateOrTree","conjuctions","operator","and_positive_holder","and_negative_holder","filter","_uniqueFilter","sort","_shares_term","_convertToNegationForm","_pushDownAnds","i","length","conjuction_a","j","conjuction_b","subset","_is_subset","splice","conjuctions_hashtable","conjuction","key","_get_union","join","no_collision","collisions","collision","collision_has_neg","conjuction_has_neg","slice","intersection","_remove_intersection","new_key","getDNFStringEncoding","final_conjuctions","compareBooleans","s1","s2","encoding1","encoding2","_getGraph","equations","label_pos_neg","graph","equation","sides","split","lhs","expression","terms","_sortTerms","term","term_comps","term_name","term_type","resulting_term","_findCycles","cycles","cur_node","stack","in_progress","visited","global_visited","find_parities","cur_node_comps","cur_node_name","cur_node_type","neighbors","neighbor","neighbor_comps","neighbor_name","neighbor_type","cycle","parity","stack_item_comps","stack_item_name","stack_item_type","reverse","visited_clone","_clone","in_progress_clone","stack_clone","_feedbackLoopsCommon","has_incoming","Object","keys","node","feedbackLoops","functionalCircuits","distances","has_outgoing","root_node","dist","queue","enqueue","isEmpty","current","dequeue","averageDistance","nodes","total_distance","node_count","node1","node2","connectivity","connected","connectivityInDegree","connectivityOutDegree","connectivityDegree","connectivityDistributionGraph","averageConnectivity","source","connected_targets","total_targets","target","diameter","distance","getRegulators","first_positive_name","component","conditionRelation","conditions","condition_components","state","components","dominants","positive_regulator_name","negative_regulator_name","regulators","_getTerms","getBiologicalConstructs","pt","absentState","data_left","data_right","isSuperset","every","includes","val","item","types","Number","String","Boolean","result","forEach","prototype","toString","call","child","index","array","nodeType","cloneNode","Date","constructor","_getValues","array_values","dict","_getValuesFlattened","value_arr","_getKeys","array_keys","value","self","indexOf","a","b","ai","bi","_get_intersection","intersection_len","_constructNegation","prefix","_constructAND","_negate","new_parse_tree","k","old_left","old_right","_evaluateState","regexes","mapObj","parsable_expression","matched","_applyRegexes","eval","regex","_getRegexes","assignments","assignment","evaluateStateTransition","new_assignments","stateTransitionGraph","transitions","settings","attractorSearchExhaustive","st_graph","attractorSearchHeuristic","num_runs","depth","attractors","random_idx","Math","floor","random","c_i","_buildLogicFormula","not","and","or","_formulaSatisfiable","solver","Solver","logic_formula","solve","satisfiable","compareBooleansSAT","pt1","pt2","logic_formula1","logic_formula2","xor","parseConjuctionsAtPoint","variable","anything_changed","reduceModel","equation_mapping","depends_on","constant_term_pos","constant_term_neg","parts","result_at_point","individual_conjuction","dependencies","dependency","inDegreeOneDependency","eq_conjuctions","in_degree_one_mat","keep_going","back_dependency_1_info","back_dependency_2_info","module","exports","offset","getLength","undefined","peek"],"mappings":"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A;AACA,IAAG;AACH;AACA;AACA,kCAAiC;AACjC,IAAG;AACH;AACA;AACA;AACA,8BAA6B;AAC7B,IAAG;AACH;AACA;AACA;AACA;AACA,6BAA4B;AAC5B,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,iCAAiC,EAAE;AAC5D,8BAA6B,qCAAqC,EAAE;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,OAAM;AACN;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAkB;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6E;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM,uDAAuD;AAC7D;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oCAAmC;AACnC;AACA;AACA,qCAAoC;AACpC;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,+BAA8B;AAC9B,+BAA8B;AAC9B,+BAA8B;AAC9B,+BAA8B;AAC9B,+BAA8B;AAC9B,iCAAgC;AAChC;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN,eAAc;AACd,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA,QAAO,gCAAgC;AACvC;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,yCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B,+DAA+D;;AAE5F;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA,aAAY,OAAO;AACnB,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,EAAC;;;;;;;;;ACzmBD;;;;;;;;;;;;AAYA;;;AAGA;AACC,UAASF,KAAT,GAAgB;;AAEd;AACA,OAAIyH,QAAS,EAAb;AACA,OAAIuJ,SAAS,CAAb;;AAEA;AACA,QAAKC,SAAL,GAAiB;AAAA,YAAMxJ,MAAMjF,MAAN,GAAewO,MAArB;AAAA,IAAjB;;AAEA;AACA,QAAKrJ,OAAL,GAAe;AAAA,YAAMF,MAAMjF,MAAN,KAAiB,CAAvB;AAAA,IAAf;;AAEA;;;;AAIA,QAAKkF,OAAL,GAAe,gBAAQ;AACrBD,WAAMlG,IAAN,CAAWgJ,IAAX;AACD,IAFD;;AAIA;;;AAGA,QAAK1C,OAAL,GAAe,YAAM;;AAEnB;AACA,SAAIJ,MAAMjF,MAAN,KAAiB,CAArB,EAAwB,OAAO0O,SAAP;;AAExB;AACA,SAAM3G,OAAO9C,MAAMuJ,MAAN,CAAb;;AAEA;AACA,SAAI,EAAGA,MAAH,GAAY,CAAZ,IAAiBvJ,MAAMjF,MAA3B,EAAkC;AAChCiF,eAASA,MAAMhE,KAAN,CAAYuN,MAAZ,CAAT;AACAA,gBAAS,CAAT;AACD;;AAED;AACA,YAAOzG,IAAP;AAED,IAjBD;;AAmBA;;;AAGA,QAAK4G,IAAL,GAAY;AAAA,YAAM1J,MAAMjF,MAAN,GAAe,CAAf,GAAmBiF,MAAMuJ,MAAN,CAAnB,GAAmCE,SAAzC;AAAA,IAAZ;AAED,E;;;;;;AC/DF;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAoC;;AAEpC;AACA;AACA;AACA;AACA,iCAAgC;;AAEhC;AACA;AACA;AACA;AACA,wCAAuC;;AAEvC;AACA;AACA;;AAEA;;AAEA;AACA,+BAA8B,sBAAsB,EAAE;;AAEtD;AACA,+BAA8B,gCAAgC,EAAE;;AAEhE;AACA,6BAA4B,8BAA8B,EAAE;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,sBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,2CAA0C;;;AAG1C;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD,0BAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,iDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAsB;AACtB,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,YAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,qBAAoB;AACpB,2BAA0B;AAC1B,uBAAsB;;AAEtB;AACA,yDAAwD;AACxD,wDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAAyB;AACzB;AACA,mCAAkC;AAClC;AACA;AACA,kCAAiC;;AAEjC;AACA,uBAAsB;AACtB,iCAAgC;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAwD;AACxD;AACA;AACA,YAAW,qCAAqC;AAChD,YAAW;;AAEX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B,uDAAsD;AACtD;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,qCAAoC;AACpC,QAAO;AACP;AACA;AACA;AACA;AACA,IAAG,OAAO;AACV;AACA;AACA;AACA;AACA,MAAK;AACL,mCAAkC;AAClC,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,gBAAe,IAAI;AACnB;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA,8CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc,GAAG;AACjB;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,MAAK,mBAAmB;AACxB;AACA,2BAA0B;AAC1B,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA,2CAA0C;AAC1C,QAAO;AACP;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA,MAAK,OAAO;AACZ;AACA,mBAAkB;AAClB,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA,sCAAqC;AACrC,QAAO;AACP;AACA;AACA;AACA;AACA,yCAAwC;AACxC;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,OAAM;AACN;AACA,OAAM;AACN,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,iBAAiB;AACvC,2BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,6BAA4B;AAC5B;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,oBAAoB,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB,WAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,WAAW;AAC9B;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB,uCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA2C,gBAAgB,EAAE;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,kBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,YAAW;AACX,UAAS;AACT;AACA;AACA;AACA;AACA,IAAG;AACH,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA,IAAG;AACH,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACzzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,qDAAoD;AACpD;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;AACA,kBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5HA;AACA;AACA;AACA,uBAAsB,cAAc,yBAAyB,EAAE,aAAa,wCAAwC,UAAU,qBAAqB,kDAAkD,EAAE,SAAS,qBAAqB,kDAAkD,IAAI,aAAa,WAAW,gEAAgE,uBAAuB,uBAAuB,+BAA+B,kCAAkC,+EAA+E,gDAAgD,4DAA4D,2FAA2F,wBAAwB,sDAAsD,iCAAiC,+DAA+D,iCAAiC,yBAAyB,6BAA6B,8CAA8C,yCAAyC,yCAAyC,kDAAkD,kDAAkD,qCAAqC,mCAAmC,YAAY,mDAAmD,sCAAsC,gCAAgC,qBAAqB,6BAA6B,4DAA4D,KAAK,wCAAwC,6CAA6C,gCAAgC,yBAAyB,gDAAgD,gCAAgC,UAAU,GAAG,8BAA8B,0CAA0C,4DAA4D,6BAA6B,oBAAoB,KAAK,+BAA+B,mCAAmC,4CAA4C,mCAAmC,qCAAqC,0BAA0B,+BAA+B,aAAa,mCAAmC,+BAA+B,uCAAuC,8BAA8B,sBAAsB,mDAAmD,kCAAkC,2BAA2B,0BAA0B,eAAe,yBAAyB,kCAAkC,8BAA8B,iCAAiC,sDAAsD,gBAAgB,+DAA+D,gBAAgB,KAAK,uBAAuB,yFAAyF,QAAQ,gBAAgB,EAAE,uBAAuB,wBAAwB,KAAK,8BAA8B,KAAK,kDAAkD,uBAAuB,kBAAkB,oCAAoC,gCAAgC,+BAA+B,qBAAqB,6BAA6B,EAAE,wBAAwB,mCAAmC,yBAAyB,uBAAuB,2BAA2B,uCAAuC,6BAA6B,mCAAmC,oBAAoB,qBAAqB,gCAAgC,wCAAwC,kCAAkC,aAAa,6BAA6B,eAAe,0BAA0B,gBAAgB,wBAAwB,gBAAgB,mCAAmC,kBAAkB,oCAAoC,aAAa,2BAA2B,mBAAmB,mBAAmB,mBAAmB,qBAAqB,sBAAsB,SAAS,8BAA8B,4BAA4B,uBAAuB,kCAAkC,mBAAmB,cAAc,KAAK,YAAY,qCAAqC,sEAAsE,0DAA0D,mDAAmD,iCAAiC,sFAAsF,kCAAkC,sBAAsB,sDAAsD,qBAAqB,+CAA+C,KAAK,8CAA8C,kDAAkD,YAAY,kCAAkC,KAAK,iCAAiC,iCAAiC,gBAAgB,sGAAsG,kCAAkC,2CAA2C,sCAAsC,mDAAmD,qCAAqC,oBAAoB,YAAY,YAAY,UAAU,KAAK,qCAAqC,mCAAmC,oBAAoB,4CAA4C,wCAAwC,KAAK,6FAA6F,eAAe,8BAA8B,IAAI,yCAAyC,qCAAqC,aAAa,EAAE,4CAA4C,SAAS,6KAA6K,QAAQ,2CAA2C,2BAA2B,qDAAqD,kCAAkC,+BAA+B,uBAAuB,iBAAiB,oCAAoC,YAAY,+BAA+B,6BAA6B,uCAAuC,oBAAoB,0CAA0C,4CAA4C,sBAAsB,4BAA4B,cAAc,aAAa,kCAAkC,cAAc,qBAAqB,kBAAkB,iCAAiC,kBAAkB,oBAAoB,SAAS,yBAAyB,SAAS,KAAK,SAAS,SAAS,WAAW,kBAAkB,SAAS,qBAAqB,iBAAiB,iBAAiB,iBAAiB,iBAAiB,QAAQ,qBAAqB,0CAA0C,0BAA0B,sDAAsD,KAAK,sDAAsD,uFAAuF,gBAAgB,WAAW,EAAE,sDAAsD,4CAA4C,WAAW,YAAY,gBAAgB,KAAK,+BAA+B,YAAY,qCAAqC,mIAAmI,6BAA6B,iBAAiB,yBAAyB,yBAAyB,WAAW,8BAA8B,kBAAkB,2BAA2B,2BAA2B,WAAW,+BAA+B,mBAAmB,6BAA6B,6BAA6B,4CAA4C,WAAW,sCAAsC,uEAAuE,WAAW,0CAA0C,uFAAuF,WAAW,4CAA4C,0BAA0B,gBAAgB,gBAAgB,iBAAiB,YAAY,gJAAgJ,qBAAqB,8FAA8F,gCAAgC,eAAe,kCAAkC,qBAAqB,yBAAyB,2BAA2B,UAAU,IAAI,qBAAqB,WAAW,0GAA0G,YAAY,gBAAgB,aAAa,aAAa,wBAAwB,oBAAoB,6BAA6B,uBAAuB,4BAA4B,uCAAuC,4BAA4B,WAAW,6BAA6B,UAAU,yCAAyC,0CAA0C,6BAA6B,WAAW,GAAG,SAAS,2DAA2D,yDAAyD,yBAAyB,aAAa,YAAY,SAAS,YAAY,cAAc,KAAK,+BAA+B,cAAc,uCAAuC,4BAA4B,KAAK,mBAAmB,+BAA+B,oDAAoD,yCAAyC,YAAY,4CAA4C,eAAe,qBAAqB,OAAO,GAAG,6BAA6B,yDAAyD,OAAO,0DAA0D,gBAAgB,wBAAwB,gCAAgC,yCAAyC,gDAAgD,sBAAsB,0BAA0B,+CAA+C,uBAAuB,GAAG,qCAAqC,4BAA4B,aAAa,yCAAyC,YAAY,GAAG,gDAAgD,EAAE,0BAA0B,iBAAiB,qDAAqD,EAAE,YAAY,QAAQ,KAAK,qCAAqC,4BAA4B,qCAAqC,kDAAkD,EAAE,4BAA4B,EAAE,2CAA2C,GAAG,sCAAsC,aAAa,eAAe,0DAA0D,EAAE,gBAAgB,mCAAmC,yBAAyB,eAAe,gCAAgC,EAAE,iBAAiB,iEAAiE,EAAE,qBAAqB,GAAG,sBAAsB,KAAK,sBAAsB,sBAAsB,yCAAyC,gBAAgB,+CAA+C,aAAa,6BAA6B,MAAM,6BAA6B,MAAM,+BAA+B,MAAM,+BAA+B,MAAM,mRAAmR,MAAM,kCAAkC,MAAM,mCAAmC,MAAM,mDAAmD,4BAA4B,mCAAmC,gBAAgB,+CAA+C,aAAa,8BAA8B,8BAA8B,gCAAgC,gCAAgC,gCAAgC,mCAAmC,oCAAoC,kDAAkD,YAAY,4BAA4B,mBAAmB,kBAAkB,mBAAmB,oBAAoB,iBAAiB,oCAAoC,kCAAkC,oCAAoC,sCAAsC,gCAAgC,4CAA4C,kBAAkB,2BAA2B,cAAc,UAAU,KAAK,eAAe,iBAAiB,kDAAkD,QAAQ,0BAA0B,QAAQ,KAAK,kKAAkK,aAAa,iBAAiB,mBAAmB,mBAAmB,KAAK,SAAS,QAAQ,iBAAiB,cAAc,gBAAgB,kBAAkB,WAAW,sBAAsB,8BAA8B,qBAAqB,KAAK,qCAAqC,WAAW,mCAAmC,cAAc,iBAAiB,6BAA6B,oCAAoC,0BAA0B,aAAa,IAAI,SAAS,0BAA0B,0BAA0B,wBAAwB,yCAAyC,kBAAkB,YAAY,WAAW,4BAA4B,uCAAuC,6BAA6B,iBAAiB,MAAM,QAAQ,SAAS,mBAAmB,sBAAsB,4BAA4B,IAAI,2BAA2B,oBAAoB,WAAW,YAAY,mBAAmB,SAAS,gBAAgB,2FAA2F,sBAAsB,eAAe,kBAAkB,WAAW,mCAAmC,QAAQ,SAAS,KAAK,mBAAmB,0BAA0B,WAAW,8CAA8C,4BAA4B,QAAQ,WAAW,SAAS,gCAAgC,0BAA0B,IAAI,oCAAoC,sCAAsC,mCAAmC,YAAY,aAAa,KAAK,+BAA+B,+BAA+B,iCAAiC,sCAAsC,4BAA4B,QAAQ,WAAW,SAAS,6BAA6B,uBAAuB,IAAI,iBAAiB,mBAAmB,qDAAqD,KAAK,kCAAkC,sCAAsC,mCAAmC,YAAY,oBAAoB,qBAAqB,aAAa,uCAAuC,qCAAqC,+CAA+C,yDAAyD,mCAAmC,QAAQ,4BAA4B,sCAAsC,wBAAwB,6CAA6C,iBAAiB,IAAI,6BAA6B,wCAAwC,sBAAsB,kDAAkD,oCAAoC,+BAA+B,UAAU,QAAQ,kBAAkB,wBAAwB,mBAAmB,QAAQ,gBAAgB,+PAA+P,YAAY,eAAe,iBAAiB,qBAAqB,mBAAmB,WAAW,YAAY,IAAI,aAAa,sBAAsB,uBAAuB,IAAI,qBAAqB,aAAa,qBAAqB,kBAAkB,IAAI,6BAA6B,kCAAkC,2BAA2B,SAAS,SAAS,kBAAkB,kCAAkC,KAAK,SAAS,kCAAkC,+BAA+B,gBAAgB,IAAI,MAAM,iCAAiC,iBAAiB,gBAAgB,YAAY,IAAI,aAAa,wCAAwC,sBAAsB,mBAAmB,qBAAqB,8BAA8B,SAAS,kBAAkB,8BAA8B,QAAQ,wCAAwC,KAAK,2CAA2C,kCAAkC,SAAS,+BAA+B,6BAA6B,aAAa,YAAY,kBAAkB,IAAI,sBAAsB,4BAA4B,+CAA+C,KAAK,SAAS,0CAA0C,gBAAgB,oBAAoB,yBAAyB,KAAK,UAAU,6CAA6C,MAAM,6CAA6C,MAAM,SAAS,IAAI,4BAA4B,eAAe,+BAA+B,UAAU,OAAO,SAAS,kCAAkC,0BAA0B,0BAA0B,IAAI,+CAA+C,OAAO,wBAAwB,mBAAmB,kBAAkB,yDAAyD,YAAY,QAAQ,mBAAmB,YAAY,KAAK,wBAAwB,gBAAgB,IAAI,wCAAwC,eAAe,uDAAuD,6BAA6B,6BAA6B,6BAA6B,gBAAgB,+BAA+B,kCAAkC,eAAe,SAAS,YAAY,0CAA0C,6EAA6E,sEAAsE,cAAc,2BAA2B,gDAAgD,kBAAkB,4BAA4B,GAAG,wBAAwB,kBAAkB,eAAe,IAAI,mBAAmB,SAAS,MAAM,eAAe,oCAAoC,4BAA4B,sBAAsB,mCAAmC,gCAAgC,mBAAmB,4BAA4B,oBAAoB,SAAS,+DAA+D,iDAAiD,wCAAwC,gCAAgC,yBAAyB,wSAAwS,+CAA+C,kDAAkD,+CAA+C,wBAAwB,2DAA2D,6BAA6B,eAAe,KAAK,2BAA2B,+BAA+B,mGAAmG,yBAAyB,kMAAkM,yCAAyC,4BAA4B,8BAA8B,8BAA8B,8BAA8B,gCAAgC,gCAAgC,iCAAiC,iCAAiC,cAAc,8FAA8F,oBAAoB,wBAAwB,sBAAsB,wBAAwB,wBAAwB,wBAAwB,0BAA0B,0BAA0B,0BAA0B,0BAA0B,yCAAyC,0BAA0B,+BAA+B,gCAAgC,WAAW,SAAS,uBAAuB,2BAA2B,6BAA6B,0BAA0B,KAAK,2CAA2C,KAAK,mDAAmD,oBAAoB,kBAAkB,kBAAkB,kBAAkB,qBAAqB,6BAA6B,wBAAwB,kBAAkB,qBAAqB,2EAA2E,+BAA+B,uCAAuC,mCAAmC,6BAA6B,6BAA6B,wBAAwB,iCAAiC,mBAAmB,iCAAiC,uBAAuB,iCAAiC,mBAAmB,mBAAmB,sBAAsB,8EAA8E,gCAAgC,yCAAyC,oCAAoC,yBAAyB,yBAAyB,qDAAqD,uBAAuB,uBAAuB,+CAA+C,0BAA0B,uBAAuB,wDAAwD,uBAAuB,uBAAuB,+CAA+C,0BAA0B,0BAA0B,wDAAwD,wDAAwD,6DAA6D,WAAW,kBAAkB,iBAAiB,YAAY,WAAW,gDAAgD,iCAAiC,WAAW,YAAY,eAAe,KAAK,iBAAiB,YAAY,SAAS,mCAAmC,oBAAoB,4CAA4C,wDAAwD,iDAAiD,QAAQ,sBAAsB,iBAAiB,uBAAuB,OAAO,kDAAkD,0CAA0C,YAAY,eAAe,KAAK,6BAA6B,gDAAgD,oDAAoD,YAAY,aAAa,KAAK,qCAAqC,8CAA8C,gDAAgD,mCAAmC,aAAa,aAAa,mEAAmE,mCAAmC,aAAa,aAAa,yDAAyD,wCAAwC,oBAAoB,aAAa,kFAAkF,cAAc,eAAe,cAAc,eAAe,kCAAkC,uBAAuB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,wBAAwB,wBAAwB,wBAAwB,0BAA0B,sBAAsB,sBAAsB,wBAAwB,wBAAwB,0BAA0B,sBAAsB,wBAAwB,4BAA4B,sBAAsB,sBAAsB,8BAA8B,+BAA+B,8BAA8B,kBAAkB,qCAAqC,mDAAmD,4CAA4C,iCAAiC,kBAAkB,qCAAqC,kDAAkD,uBAAuB,gCAAgC,oCAAoC,0BAA0B,0BAA0B,mCAAmC,2BAA2B,aAAa,kDAAkD,6BAA6B,6BAA6B,2BAA2B,cAAc,2BAA2B,iBAAiB,iBAAiB,gBAAgB,EAAE,EAAE,iBAAiB,mBAAmB,EAAE,EAAE,stgBAAstgB,wEAAwE,2BAA2B,4BAA4B,gCAAgC,oCAAoC,oCAAoC,oCAAoC,6BAA6B,gCAAgC,oCAAoC,oCAAoC,oCAAoC,oCAAoC,oCAAoC,oCAAoC,oCAAoC,2BAA2B,oBAAoB,kBAAkB,EAAE,yBAAyB,qCAAqC,oCAAoC,qBAAqB,4BAA4B,gCAAgC,aAAa,iBAAiB,82CAA82C,wBAAwB,aAAa,yBAAyB,iWAAiW,gSAAgS,wIAAwI,mDAAmD,kCAAkC,0CAA0C,4BAA4B,0BAA0B,4BAA4B,sBAAsB,oBAAoB,qBAAqB,qBAAqB,qBAAqB,mBAAmB,mBAAmB,mBAAmB,mBAAmB,kBAAkB,mBAAmB,kBAAkB,iBAAiB,gBAAgB,iBAAiB,SAAS,0EAA0E,UAAU,gCAAgC,SAAS,sCAAsC,sDAAsD,gBAAgB,yBAAyB,8BAA8B,yDAAyD,iCAAiC,+BAA+B,6BAA6B,YAAY,gBAAgB,wBAAwB,eAAe,+BAA+B,gBAAgB,wBAAwB,eAAe,+BAA+B,wBAAwB,gBAAgB,sBAAsB,oBAAoB,4CAA4C,6BAA6B,4BAA4B,0BAA0B,eAAe,+BAA+B,gBAAgB,GAAG,iCAAiC,qBAAqB,oBAAoB,8CAA8C,uKAAuK,sCAAsC,2BAA2B,YAAY,kCAAkC,kCAAkC,yBAAyB,gBAAgB,uCAAuC,oDAAoD,yDAAyD,mFAAmF,oDAAoD,yCAAyC,YAAY,mBAAmB,KAAK,6EAA6E,yBAAyB,qBAAqB,mDAAmD,yBAAyB,gDAAgD,2CAA2C,uBAAuB,iEAAiE,oBAAoB,yDAAyD,gDAAgD,KAAK,gDAAgD,uKAAuK,0BAA0B,wCAAwC,kBAAkB,kBAAkB,iBAAiB,qBAAqB,iCAAiC,8BAA8B,UAAU,+BAA+B,SAAS,0BAA0B,0CAA0C,gCAAgC,YAAY,+BAA+B,SAAS,IAAI,eAAe,8CAA8C,SAAS,oBAAoB,UAAU,kCAAkC,gCAAgC,YAAY,+BAA+B,SAAS,IAAI,eAAe,uCAAuC,SAAS,oBAAoB,UAAU,yBAAyB,mCAAmC,oBAAoB,iBAAiB,yCAAyC,6BAA6B,4BAA4B,uBAAuB,6CAA6C,qBAAqB,0CAA0C,kCAAkC,SAAS,KAAK,4BAA4B,0BAA0B,6BAA6B,mCAAmC,wCAAwC,qBAAqB,eAAe,0BAA0B,QAAQ,oBAAoB,iJAAiJ,qBAAqB,kEAAkE,KAAK,WAAW,gCAAgC,2CAA2C,WAAW,WAAW,sBAAsB,SAAS,6BAA6B,yBAAyB,kBAAkB,2BAA2B,aAAa,2BAA2B,wBAAwB,0BAA0B,sBAAsB,sBAAsB,mBAAmB,aAAa,8BAA8B,MAAM,2BAA2B,MAAM,6BAA6B,MAAM,wBAAwB,gBAAgB,KAAK,iBAAiB,OAAO,yBAAyB,MAAM,wBAAwB,YAAY,2BAA2B,YAAY,aAAa,wBAAwB,YAAY,2BAA2B,KAAK,0BAA0B,yBAAyB,YAAY,4BAA4B,oCAAoC,aAAa,YAAY,kBAAkB,YAAY,2BAA2B,aAAa,4BAA4B,YAAY,KAAK,SAAS,uCAAuC,0CAA0C,yCAAyC,aAAa,2BAA2B,gBAAgB,YAAY,mBAAmB,YAAY,kCAAkC,2CAA2C,kBAAkB,YAAY,UAAU,KAAK,UAAU,MAAM,2CAA2C,kBAAkB,YAAY,UAAU,KAAK,UAAU,MAAM,kCAAkC,MAAM,kCAAkC,MAAM,qBAAqB,uBAAuB,2BAA2B,kCAAkC,yDAAyD,gCAAgC,mBAAmB,sCAAsC,oBAAoB,YAAY,eAAe,4DAA4D,eAAe,kCAAkC,wDAAwD,iCAAiC,cAAc,yBAAyB,6EAA6E,sDAAsD,mBAAmB,6EAA6E,sDAAsD,0BAA0B,mBAAmB,wDAAwD,6BAA6B,2CAA2C,wBAAwB,eAAe,sCAAsC,wCAAwC,qCAAqC,eAAe,KAAK,uCAAuC,mBAAmB,iBAAiB,oCAAoC,cAAc,YAAY,iBAAiB,KAAK,uDAAuD,wBAAwB,mDAAmD,KAAK,gCAAgC,aAAa,4BAA4B,+BAA+B,mBAAmB,mBAAmB,gBAAgB,KAAK,YAAY,iCAAiC,iBAAiB,gCAAgC,qBAAqB,eAAe,qBAAqB,kBAAkB,qBAAqB,mBAAmB,2BAA2B,kBAAkB,0BAA0B,0CAA0C,kBAAkB,aAAa,KAAK,gBAAgB,oBAAoB,KAAK,oBAAoB,uBAAuB,yCAAyC,4BAA4B,GAAG,OAAO,iDAAiD,iCAAiC,YAAY,mBAAmB,cAAc,kBAAkB,4BAA4B,iCAAiC,kBAAkB,KAAK,oBAAoB,8CAA8C,wBAAwB,eAAe,uBAAuB,kFAAkF,qCAAqC,uCAAuC,sBAAsB,KAAK,uCAAuC,YAAY,0CAA0C,wBAAwB,kDAAkD,gCAAgC,mDAAmD,6BAA6B,4CAA4C,2CAA2C,qBAAqB,6BAA6B,gCAAgC,wGAAwG,+BAA+B,KAAK,2DAA2D,mDAAmD,kDAAkD,0CAA0C,eAAe,qBAAqB,oBAAoB,qBAAqB,sBAAsB,4BAA4B,kBAAkB,aAAa,KAAK,oDAAoD,wCAAwC,KAAK,wCAAwC,yCAAyC,yCAAyC,4BAA4B,GAAG,OAAO,SAAS,0BAA0B,+CAA+C,wDAAwD,mBAAmB,yBAAyB,cAAc,QAAQ,YAAY,YAAY,KAAK,4BAA4B,KAAK,sEAAsE,kBAAkB,yBAAyB,cAAc,OAAO,SAAS,4CAA4C,iBAAiB,aAAa,6CAA6C,OAAO,SAAS,2BAA2B,0BAA0B,OAAO,SAAS,eAAe,OAAO,SAAS,yBAAyB,cAAc,KAAK,wBAAwB,aAAa,KAAK,eAAe,cAAc,WAAW,yCAAyC,0CAA0C,8BAA8B,0EAA0E,4BAA4B,WAAW,iCAAiC,0CAA0C,oCAAoC,0EAA0E,qBAAqB,qBAAqB,iCAAiC,6CAA6C,oCAAoC,0BAA0B,0BAA0B,0BAA0B,sBAAsB,yBAAyB,uBAAuB,gCAAgC,YAAY,0CAA0C,kCAAkC,SAAS,KAAK,YAAY,wBAAwB,mCAAmC,gCAAgC,0BAA0B,0BAA0B,uBAAuB,+BAA+B,4CAA4C,kBAAkB,gCAAgC,4BAA4B,0EAA0E,qBAAqB,qBAAqB,yCAAyC,+BAA+B,0BAA0B,4BAA4B,SAAS,wBAAwB,uBAAuB,uBAAuB,eAAe,gBAAgB,wBAAwB,sCAAsC,wBAAwB,0BAA0B,yCAAyC,qBAAqB,oBAAoB,WAAW,kBAAkB,mCAAmC,0CAA0C,+BAA+B,WAAW,qCAAqC,oBAAoB,yBAAyB,QAAQ,mBAAmB,WAAW,gCAAgC,6CAA6C,WAAW,0BAA0B,yCAAyC,8CAA8C,4BAA4B,SAAS,wCAAwC,wBAAwB,qBAAqB,SAAS,SAAS,iCAAiC,+BAA+B,uCAAuC,iCAAiC,gDAAgD,4BAA4B,4CAA4C,WAAW,8CAA8C,8CAA8C,YAAY,0BAA0B,2BAA2B,sBAAsB,eAAe,iBAAiB,uCAAuC,iBAAiB,6BAA6B,gCAAgC,iCAAiC,2DAA2D,EAAE,mBAAmB,8BAA8B,WAAW,mBAAmB,6BAA6B,sBAAsB,gBAAgB,wBAAwB,sDAAsD,sBAAsB,uCAAuC,kDAAkD,4CAA4C,sCAAsC,4BAA4B,2CAA2C,mDAAmD,kBAAkB,iCAAiC,uDAAuD,0EAA0E,2iBAA2iB,2iBAA2iB,qCAAqC,IAAI,8CAA8C,SAAS,8CAA8C,sBAAsB,6CAA6C,IAAI,+CAA+C,SAAS,8CAA8C,sBAAsB,6BAA6B,IAAI,+BAA+B,SAAS,8CAA8C,sBAAsB,iCAAiC,IAAI,mCAAmC,SAAS,8CAA8C,sBAAsB,6BAA6B,IAAI,sCAAsC,SAAS,8CAA8C,sBAAsB,yBAAyB,IAAI,2BAA2B,SAAS,8CAA8C,sBAAsB,iDAAiD,IAAI,mDAAmD,SAAS,8CAA8C,sBAAsB,iCAAiC,IAAI,0CAA0C,SAAS,8CAA8C,sBAAsB,yCAAyC,IAAI,2CAA2C,SAAS,8CAA8C,sBAAsB,qBAAqB,uNAAuN,sBAAsB,soDAAsoD;AAC778D;AACA,WAAU,mCAAmC,oCAAoC,oCAAoC,oCAAoC,qCAAqC,qCAAqC,sCAAsC,sCAAsC,qBAAqB,sBAAsB,0BAA0B,kBAAkB,oBAAoB,oBAAoB,0BAA0B,oBAAoB,QAAQ,QAAQ,QAAQ,QAAQ,+BAA+B,4CAA4C,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,wBAAwB,sBAAsB,uBAAuB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,uBAAuB,uBAAuB,uBAAuB,wBAAwB,sBAAsB,sBAAsB,wBAAwB,wBAAwB,iBAAiB,kBAAkB,eAAe,uBAAuB,yBAAyB,qBAAqB,sBAAsB,qBAAqB,oBAAoB,0BAA0B,sBAAsB,wBAAwB,iBAAiB,yBAAyB,iBAAiB,iBAAiB,gCAAgC,uBAAuB,qBAAqB,qCAAqC,sCAAsC,gCAAgC,mBAAmB,4BAA4B,iBAAiB,8BAA8B,kCAAkC,mBAAmB,8BAA8B,sCAAsC,oBAAoB,gCAAgC,mBAAmB,yBAAyB,iBAAiB,mBAAmB,+BAA+B,kBAAkB,6BAA6B,gCAAgC,yBAAyB,qBAAqB,kBAAkB,wBAAwB,kBAAkB,sBAAsB,kBAAkB,mBAAmB,iBAAiB,oBAAoB,0BAA0B,kBAAkB,iBAAiB,+BAA+B,kBAAkB;AAC/uE;AACA,gBAAe,MAAM,QAAQ,IAAI,QAAQ,WAAW,WAAW,cAAc,WAAW,eAAe,MAAM,IAAI,iBAAiB,MAAM,MAAM,OAAO,IAAI,KAAK,eAAe,MAAM,gBAAgB,oBAAoB,oBAAoB,oBAAoB,eAAe,MAAM,gBAAgB,oBAAoB,oBAAoB,oBAAoB,oBAAoB,oBAAoB,oBAAoB,oBAAoB,eAAe,MAAM,IAAI,cAAc,WAAW,eAAe,MAAM,UAAU,KAAK,eAAe,MAAM,OAAO,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,YAAY,YAAY,YAAY,aAAa,aAAa,mCAAmC,QAAQ,QAAQ,QAAQ,iBAAiB,QAAQ,UAAU,qBAAqB,cAAc,cAAc,2BAA2B,UAAU,aAAa,UAAU,QAAQ,QAAQ,eAAe,QAAQ,sCAAsC,UAAU,aAAa,UAAU,UAAU,qBAAqB,OAAO,IAAI,OAAO,UAAU,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,eAAe,MAAM,YAAY,IAAI,YAAY,OAAO,IAAI,OAAO,YAAY,MAAM,UAAU,YAAY,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,oBAAoB,IAAI,IAAI,WAAW,QAAQ,MAAM,IAAI,IAAI,SAAS,QAAQ,2BAA2B,IAAI,MAAM,YAAY,aAAa,IAAI,IAAI,MAAM,KAAK,gBAAgB,KAAK,wBAAwB,IAAI,IAAI,WAAW,aAAa,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,SAAS,IAAI,YAAY,QAAQ,YAAY,UAAU,YAAY,kBAAkB,IAAI,SAAS,0CAA0C,aAAa,aAAa,WAAW,kCAAkC,kBAAkB,OAAO,IAAI,OAAO,kBAAkB,iBAAiB,aAAa,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,SAAS,IAAI,QAAQ,oBAAoB,IAAI,IAAI,WAAW,QAAQ,QAAQ,YAAY,YAAY,mBAAmB,IAAI,SAAS,IAAI,QAAQ,2BAA2B,IAAI,MAAM,cAAc,YAAY,wBAAwB,IAAI,WAAW,SAAS,oBAAoB,IAAI,IAAI,WAAW,QAAQ,eAAe,iBAAiB,IAAI,IAAI,WAAW,yBAAyB,YAAY,YAAY,UAAU,YAAY,kBAAkB,MAAM,yBAAyB,YAAY,YAAY,UAAU,YAAY,kBAAkB,MAAM,aAAa,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,oBAAoB,IAAI,SAAS,IAAI,YAAY,eAAe,kBAAkB,YAAY,kBAAkB,eAAe,wCAAwC,KAAK,UAAU,kBAAkB,kBAAkB,eAAe,uCAAuC,KAAK,UAAU,kBAAkB,mBAAmB,kBAAkB,OAAO,IAAI,OAAO,kBAAkB,iBAAiB,aAAa,IAAI,OAAO,eAAe,MAAM,wBAAwB,IAAI,aAAa,QAAQ,SAAS,SAAS,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,eAAe,kBAAkB,mBAAmB,mBAAmB,qBAAqB,kBAAkB,kBAAkB,aAAa,qBAAqB,mBAAmB,mBAAmB,mBAAmB,oBAAoB,8BAA8B,gBAAgB,gBAAgB,gBAAgB,UAAU,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,UAAU,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,oBAAoB,cAAc,UAAU,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,cAAc,cAAc,gBAAgB,gBAAgB,cAAc,eAAe,UAAU,UAAU,YAAY,YAAY,YAAY,aAAa,UAAU,UAAU,YAAY,YAAY,YAAY,aAAa,aAAa,cAAc,cAAc,UAAU,UAAU,UAAU,SAAS,GAAG,UAAU,QAAQ,mBAAmB,QAAQ,SAAS,GAAG,UAAU,QAAQ,mBAAmB,UAAU,aAAa,aAAa,aAAa,cAAc,UAAU,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,MAAM,IAAI,OAAO,eAAe,MAAM,gBAAgB,IAAI,aAAa,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,gBAAgB,WAAW,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,YAAY,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,QAAQ,YAAY,OAAO,IAAI,OAAO,YAAY,MAAM,UAAU,aAAa,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,kDAAkD,IAAI,SAAS,QAAQ,IAAI,UAAU,YAAY,YAAY,UAAU,iCAAiC,UAAU,IAAI,KAAK,UAAU,YAAY,YAAY,UAAU,OAAO,UAAU,QAAQ,YAAY,QAAQ,UAAU,WAAW,QAAQ,QAAQ,sBAAsB,UAAU,UAAU,sBAAsB,UAAU,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,kBAAkB,uBAAuB,MAAM,IAAI,UAAU,YAAY,QAAQ,oBAAoB,UAAU,uBAAuB,WAAW,YAAY,UAAU,yBAAyB,KAAK,SAAS,qBAAqB,0CAA0C,UAAU,wBAAwB,UAAU,sBAAsB,UAAU,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,gBAAgB,YAAY,GAAG,aAAa,iBAAiB,QAAQ,oBAAoB,UAAU,2BAA2B,gBAAgB,gBAAgB,UAAU,YAAY,QAAQ,sBAAsB,UAAU,UAAU,sBAAsB,UAAU,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,YAAY,UAAU,sCAAsC,UAAU,cAAc,YAAY,kBAAkB,kBAAkB,eAAe,QAAQ,oBAAoB,UAAU,UAAU,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,UAAU,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,UAAU,kBAAkB,iBAAiB,MAAM,MAAM,UAAU,IAAI,kCAAkC,UAAU,aAAa,YAAY,UAAU,IAAI,oCAAoC,UAAU,YAAY,YAAY,UAAU,gEAAgE,IAAI,WAAW,6BAA6B,IAAI,WAAW,QAAQ,IAAI,WAAW,iBAAiB,MAAM,MAAM,gEAAgE,IAAI,SAAS,QAAQ,IAAI,UAAU,iBAAiB,IAAI,IAAI,WAAW,YAAY,QAAQ,YAAY,sBAAsB,UAAU,YAAY,iBAAiB,UAAU,WAAW,IAAI,IAAI,KAAK,SAAS,YAAY,mBAAmB,6BAA6B,QAAQ,QAAQ,QAAQ,iEAAiE,IAAI,MAAM,WAAW,QAAQ,+DAA+D,iBAAiB,YAAY,QAAQ,SAAS,QAAQ,mBAAmB,aAAa,IAAI,WAAW,KAAK,IAAI,IAAI,SAAS,QAAQ,YAAY,QAAQ,UAAU,OAAO,UAAU,IAAI,IAAI,WAAW,kBAAkB,kBAAkB,OAAO,sCAAsC,gBAAgB,2BAA2B,WAAW,YAAY,UAAU,YAAY,YAAY,+BAA+B,gBAAgB,YAAY,IAAI,WAAW,KAAK,oBAAoB,UAAU,UAAU,YAAY,UAAU,uBAAuB,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,aAAa,YAAY,YAAY,uBAAuB,eAAe,QAAQ,IAAI,IAAI,WAAW,SAAS,mBAAmB,MAAM,MAAM,MAAM,YAAY,YAAY,OAAO,sCAAsC,gBAAgB,2BAA2B,UAAU,YAAY,UAAU,YAAY,YAAY,+BAA+B,OAAO,eAAe,MAAM,oJAAoJ,IAAI,SAAS,IAAI,UAAU,YAAY,UAAU,uBAAuB,IAAI,IAAI,KAAK,UAAU,IAAI,IAAI,YAAY,QAAQ,YAAY,wBAAwB,IAAI,IAAI,UAAU,QAAQ,UAAU,UAAU,IAAI,IAAI,YAAY,QAAQ,YAAY,wBAAwB,IAAI,IAAI,UAAU,QAAQ,UAAU,IAAI,WAAW,UAAU,UAAU,UAAU,UAAU,UAAU,QAAQ,UAAU,UAAU,UAAU,KAAK,IAAI,GAAG,YAAY,6BAA6B,0BAA0B,YAAY,iBAAiB,YAAY,YAAY,eAAe,IAAI,IAAI,GAAG,YAAY,aAAa,kDAAkD,IAAI,cAAc,aAAa,gBAAgB,YAAY,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,sBAAsB,YAAY,QAAQ,qBAAqB,iBAAiB,YAAY,aAAa,YAAY,IAAI,IAAI,KAAK,MAAM,eAAe,IAAI,IAAI,SAAS,SAAS,WAAW,cAAc,+BAA+B,WAAW,QAAQ,MAAM,UAAU,qCAAqC,KAAK,MAAM,YAAY,YAAY,aAAa,eAAe,YAAY,iBAAiB,eAAe,YAAY,UAAU,UAAU,QAAQ,UAAU,UAAU,4FAA4F,KAAK,MAAM,YAAY,cAAc,KAAK,MAAM,YAAY,WAAW,QAAQ,MAAM,UAAU,IAAI,SAAS,eAAe,YAAY,qBAAqB,QAAQ,6CAA6C,qBAAqB,KAAK,SAAS,eAAe,UAAU,UAAU,uCAAuC,wBAAwB,SAAS,cAAc,IAAI,IAAI,cAAc,IAAI,gBAAgB,YAAY,QAAQ,QAAQ,mBAAmB,IAAI,IAAI,cAAc,IAAI,gBAAgB,YAAY,IAAI,QAAQ,mBAAmB,WAAW,KAAK,cAAc,QAAQ,IAAI,cAAc,IAAI,gBAAgB,YAAY,OAAO,MAAM,kBAAkB,YAAY,QAAQ,oDAAoD,oBAAoB,YAAY,uBAAuB,UAAU,YAAY,YAAY,YAAY,2BAA2B,IAAI,IAAI,wBAAwB,gBAAgB,gBAAgB,kBAAkB,SAAS,IAAI,QAAQ,cAAc,IAAI,gBAAgB,YAAY,sBAAsB,aAAa,eAAe,eAAe,KAAK,IAAI,IAAI,iBAAiB,IAAI,MAAM,UAAU,SAAS,QAAQ,sCAAsC,YAAY,yBAAyB,IAAI,oBAAoB,IAAI,UAAU,IAAI,IAAI,YAAY,QAAQ,YAAY,wBAAwB,IAAI,IAAI,UAAU,QAAQ,UAAU,UAAU,IAAI,IAAI,YAAY,QAAQ,YAAY,wBAAwB,IAAI,IAAI,UAAU,QAAQ,UAAU,IAAI,WAAW,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,SAAS,QAAQ,IAAI,gBAAgB,aAAa,eAAe,UAAU,mCAAmC,eAAe,YAAY,UAAU,YAAY,QAAQ,mCAAmC,YAAY,UAAU,YAAY,QAAQ,iBAAiB,UAAU,IAAI,kCAAkC,UAAU,YAAY,UAAU,IAAI,kDAAkD,UAAU,YAAY,IAAI,OAAO,KAAK,UAAU,IAAI,kCAAkC,UAAU,YAAY,UAAU,IAAI,kDAAkD,UAAU,YAAY,IAAI,QAAQ,mBAAmB,MAAM,MAAM,MAAM,4CAA4C,IAAI,SAAS,QAAQ,IAAI,gBAAgB,aAAa,qBAAqB,OAAO,UAAU,UAAU,YAAY,QAAQ,iBAAiB,UAAU,cAAc,YAAY,qBAAqB,UAAU,QAAQ,iBAAiB,UAAU,eAAe,KAAK,UAAU,YAAY,eAAe,eAAe,iBAAiB,YAAY,iBAAiB,YAAY,IAAI,SAAS,QAAQ,8BAA8B,IAAI,QAAQ,mBAAmB,YAAY,SAAS,SAAS,UAAU,gBAAgB,GAAG,YAAY,IAAI,QAAQ,aAAa,cAAc,aAAa,gBAAgB,YAAY,oBAAoB,mBAAmB,YAAY,UAAU,YAAY,eAAe,iBAAiB,YAAY,iBAAiB,YAAY,IAAI,SAAS,QAAQ,8BAA8B,IAAI,QAAQ,mBAAmB,YAAY,SAAS,SAAS,UAAU,kBAAkB,YAAY,IAAI,QAAQ,aAAa,cAAc,aAAa,gBAAgB,YAAY,oBAAoB,mBAAmB,UAAU,iBAAiB,UAAU,IAAI,oCAAoC,UAAU,YAAY,UAAU,IAAI,kDAAkD,UAAU,YAAY,IAAI,OAAO,KAAK,UAAU,IAAI,oCAAoC,UAAU,YAAY,UAAU,IAAI,kDAAkD,UAAU,YAAY,IAAI,QAAQ,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,UAAU,YAAY,aAAa,UAAU,qBAAqB,OAAO,kCAAkC,WAAW,QAAQ,uJAAuJ,qBAAqB,6BAA6B,UAAU,uDAAuD,IAAI,OAAO,iBAAiB,MAAM,MAAM,gCAAgC,IAAI,YAAY,cAAc,IAAI,IAAI,WAAW,gBAAgB,WAAW,QAAQ,MAAM,UAAU,IAAI,SAAS,qBAAqB,yBAAyB,QAAQ,qCAAqC,IAAI,IAAI,MAAM,qBAAqB,IAAI,IAAI,OAAO,aAAa,IAAI,WAAW,SAAS,iBAAiB,MAAM,MAAM,oEAAoE,IAAI,UAAU,uBAAuB,IAAI,OAAO,UAAU,YAAY,UAAU,YAAY,mBAAmB,gBAAgB,UAAU,UAAU,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,GAAG,UAAU,8BAA8B,6BAA6B,YAAY,aAAa,mEAAmE,SAAS,aAAa,IAAI,+CAA+C,+DAA+D,wDAAwD,YAAY,mBAAmB,mBAAmB,YAAY,cAAc,mBAAmB,uBAAuB,yBAAyB,IAAI,OAAO,UAAU,IAAI,OAAO,eAAe,MAAM,0DAA0D,IAAI,SAAS,qBAAqB,0CAA0C,UAAU,UAAU,wDAAwD,cAAc,0CAA0C,UAAU,2DAA2D,4BAA4B,WAAW,QAAQ,iFAAiF,UAAU,IAAI,kCAAkC,UAAU,aAAa,UAAU,UAAU,UAAU,UAAU,SAAS,+IAA+I,iBAAiB,KAAK,KAAK,MAAM,UAAU,cAAc,IAAI,WAAW,4BAA4B,QAAQ,oCAAoC,WAAW,QAAQ,mDAAmD,IAAI,WAAW,oBAAoB,sCAAsC,IAAI,WAAW,KAAK,qBAAqB,0CAA0C,UAAU,yBAAyB,IAAI,WAAW,SAAS,qBAAqB,MAAM,MAAM,MAAM,MAAM,4JAA4J,IAAI,SAAS,QAAQ,QAAQ,IAAI,QAAQ,YAAY,QAAQ,uBAAuB,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,aAAa,YAAY,uBAAuB,MAAM,UAAU,YAAY,YAAY,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,KAAK,wBAAwB,IAAI,GAAG,YAAY,aAAa,YAAY,kFAAkF,YAAY,YAAY,YAAY,IAAI,GAAG,0BAA0B,6BAA6B,yBAAyB,QAAQ,oBAAoB,kBAAkB,cAAc,gCAAgC,qBAAqB,UAAU,OAAO,kBAAkB,yDAAyD,YAAY,aAAa,qBAAqB,UAAU,eAAe,YAAY,YAAY,IAAI,GAAG,aAAa,0BAA0B,QAAQ,oBAAoB,0BAA0B,kEAAkE,YAAY,mBAAmB,eAAe,KAAK,IAAI,SAAS,IAAI,WAAW,aAAa,YAAY,kBAAkB,8CAA8C,iBAAiB,uBAAuB,OAAO,IAAI,QAAQ,SAAS,iBAAiB,iBAAiB,UAAU,+CAA+C,QAAQ,MAAM,KAAK,QAAQ,OAAO,SAAS,QAAQ,iCAAiC,YAAY,YAAY,GAAG,IAAI,UAAU,mBAAmB,OAAO,QAAQ,sBAAsB,6BAA6B,UAAU,UAAU,eAAe,kBAAkB,UAAU,YAAY,UAAU,kBAAkB,KAAK,UAAU,IAAI,YAAY,gBAAgB,UAAU,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,6BAA6B,aAAa,eAAe,QAAQ,wBAAwB,YAAY,SAAS,UAAU,YAAY,YAAY,YAAY,YAAY,IAAI,GAAG,8BAA8B,QAAQ,YAAY,mBAAmB,eAAe,wBAAwB,YAAY,IAAI,IAAI,SAAS,mBAAmB,YAAY,sBAAsB,mBAAmB,uBAAuB,YAAY,aAAa,YAAY,IAAI,SAAS,sBAAsB,mDAAmD,QAAQ,4BAA4B,iBAAiB,SAAS,KAAK,iBAAiB,QAAQ,SAAS,QAAQ,YAAY,iBAAiB,IAAI,QAAQ,KAAK,IAAI,IAAI,IAAI,6BAA6B,IAAI,IAAI,GAAG,YAAY,mBAAmB,wCAAwC,UAAU,oBAAoB,iBAAiB,YAAY,IAAI,mBAAmB,MAAM,UAAU,cAAc,IAAI,iBAAiB,QAAQ,QAAQ,YAAY,mBAAmB,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,UAAU,IAAI,sDAAsD,UAAU,YAAY,QAAQ,YAAY,QAAQ,UAAU,UAAU,IAAI,sDAAsD,UAAU,YAAY,gBAAgB,KAAK,YAAY,YAAY,YAAY,IAAI,IAAI,GAAG,gFAAgF,QAAQ,mBAAmB,SAAS,aAAa,YAAY,QAAQ,gBAAgB,UAAU,kCAAkC,UAAU,qBAAqB,KAAK,IAAI,OAAO,GAAG,kDAAkD,QAAQ,yBAAyB,IAAI,OAAO,iBAAiB,MAAM,MAAM,oEAAoE,IAAI,YAAY,UAAU,YAAY,UAAU,uCAAuC,UAAU,UAAU,uBAAuB,UAAU,UAAU,UAAU,IAAI,SAAS,8BAA8B,qBAAqB,OAAO,+EAA+E,YAAY,qBAAqB,0CAA0C,IAAI,MAAM,MAAM,cAAc,cAAc,2BAA2B,KAAK,MAAM,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,KAAK,MAAM,YAAY,YAAY,uBAAuB,MAAM,IAAI,UAAU,YAAY,UAAU,YAAY,IAAI,IAAI,oCAAoC,KAAK,KAAK,uBAAuB,iBAAiB,UAAU,QAAQ,YAAY,OAAO,IAAI,KAAK,MAAM,UAAU,YAAY,mBAAmB,qBAAqB,UAAU,YAAY,uCAAuC,UAAU,QAAQ,aAAa,MAAM,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,aAAa,YAAY,QAAQ,UAAU,uBAAuB,MAAM,IAAI,UAAU,YAAY,YAAY,eAAe,KAAK,IAAI,IAAI,WAAW,GAAG,gDAAgD,iBAAiB,UAAU,6BAA6B,YAAY,QAAQ,mBAAmB,IAAI,IAAI,WAAW,mCAAmC,mBAAmB,IAAI,WAAW,SAAS,mBAAmB,MAAM,MAAM,MAAM,oEAAoE,IAAI,SAAS,SAAS,SAAS,QAAQ,IAAI,SAAS,SAAS,kBAAkB,IAAI,GAAG,iDAAiD,QAAQ,yBAAyB,uBAAuB,YAAY,UAAU,UAAU,oBAAoB,UAAU,kBAAkB,iBAAiB,UAAU,aAAa,qBAAqB,IAAI,OAAO,OAAO,UAAU,sBAAsB,gBAAgB,UAAU,kBAAkB,gBAAgB,UAAU,UAAU,SAAS,UAAU,GAAG,UAAU,6BAA6B,OAAO,0BAA0B,YAAY,mBAAmB,mBAAmB,MAAM,UAAU,UAAU,oBAAoB,UAAU,kBAAkB,iBAAiB,UAAU,SAAS,KAAK,uBAAuB,YAAY,aAAa,IAAI,SAAS,sBAAsB,2BAA2B,sBAAsB,YAAY,QAAQ,4BAA4B,cAAc,SAAS,sBAAsB,mBAAmB,mBAAmB,sBAAsB,IAAI,OAAO,eAAe,MAAM,kFAAkF,IAAI,SAAS,QAAQ,IAAI,UAAU,YAAY,sBAAsB,UAAU,UAAU,YAAY,UAAU,oBAAoB,UAAU,YAAY,YAAY,UAAU,UAAU,IAAI,IAAI,GAAG,YAAY,mBAAmB,YAAY,aAAa,YAAY,gBAAgB,qBAAqB,OAAO,8BAA8B,WAAW,QAAQ,8GAA8G,IAAI,MAAM,sDAAsD,IAAI,MAAM,QAAQ,SAAS,SAAS,aAAa,IAAI,iBAAiB,QAAQ,QAAQ,YAAY,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,iEAAiE,IAAI,OAAO,8BAA8B,IAAI,OAAO,iBAAiB,MAAM,MAAM,4EAA4E,IAAI,QAAQ,YAAY,YAAY,UAAU,UAAU,IAAI,IAAI,GAAG,YAAY,mBAAmB,uBAAuB,YAAY,gBAAgB,YAAY,WAAW,QAAQ,MAAM,UAAU,QAAQ,IAAI,GAAG,qBAAqB,yBAAyB,QAAQ,qCAAqC,IAAI,OAAO,mBAAmB,aAAa,IAAI,QAAQ,MAAM,aAAa,WAAW,QAAQ,IAAI,GAAG,eAAe,YAAY,mCAAmC,QAAQ,+CAA+C,6BAA6B,YAAY,QAAQ,QAAQ,sCAAsC,YAAY,WAAW,UAAU,UAAU,QAAQ,QAAQ,mBAAmB,YAAY,IAAI,mBAAmB,KAAK,UAAU,UAAU,SAAS,cAAc,IAAI,iBAAiB,QAAQ,QAAQ,YAAY,mBAAmB,KAAK,IAAI,IAAI,QAAQ,aAAa,IAAI,OAAO,YAAY,IAAI,OAAO,eAAe,MAAM,wDAAwD,IAAI,SAAS,QAAQ,IAAI,UAAU,QAAQ,UAAU,QAAQ,UAAU,UAAU,UAAU,YAAY,YAAY,UAAU,UAAU,IAAI,GAAG,0HAA0H,QAAQ,YAAY,QAAQ,UAAU,mBAAmB,cAAc,YAAY,OAAO,IAAI,OAAO,UAAU,MAAM,UAAU,UAAU,IAAI,OAAO,eAAe,MAAM,4DAA4D,IAAI,UAAU,mCAAmC,UAAU,UAAU,6BAA6B,IAAI,IAAI,WAAW,UAAU,IAAI,cAAc,uCAAuC,IAAI,IAAI,WAAW,cAAc,kBAAkB,cAAc,UAAU,UAAU,kBAAkB,UAAU,IAAI,GAAG,iDAAiD,QAAQ,yBAAyB,YAAY,YAAY,gBAAgB,gBAAgB,IAAI,IAAI,GAAG,mBAAmB,wBAAwB,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,YAAY,QAAQ,UAAU,cAAc,uBAAuB,UAAU,IAAI,GAAG,iDAAiD,QAAQ,YAAY,mBAAmB,YAAY,UAAU,UAAU,UAAU,IAAI,SAAS,YAAY,uBAAuB,cAAc,cAAc,2BAA2B,KAAK,MAAM,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,KAAK,MAAM,YAAY,iBAAiB,aAAa,MAAM,UAAU,YAAY,YAAY,YAAY,8BAA8B,QAAQ,8BAA8B,8BAA8B,UAAU,UAAU,SAAS,yBAAyB,eAAe,2FAA2F,MAAM,gBAAgB,UAAU,UAAU,oDAAoD,IAAI,UAAU,YAAY,IAAI,IAAI,WAAW,UAAU,IAAI,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,wRAAwR,IAAI,SAAS,IAAI,SAAS,SAAS,SAAS,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,UAAU,IAAI,kCAAkC,UAAU,YAAY,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,SAAS,WAAW,WAAW,UAAU,UAAU,UAAU,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,KAAK,WAAW,kBAAkB,SAAS,WAAW,oBAAoB,QAAQ,MAAM,QAAQ,cAAc,MAAM,QAAQ,KAAK,gBAAgB,6GAA6G,MAAM,QAAQ,KAAK,gBAAgB,6GAA6G,MAAM,QAAQ,gCAAgC,MAAM,QAAQ,gDAAgD,SAAS,aAAa,wBAAwB,MAAM,MAAM,+BAA+B,+BAA+B,WAAW,UAAU,YAAY,UAAU,iDAAiD,MAAM,MAAM,gBAAgB,QAAQ,eAAe,KAAK,YAAY,UAAU,8CAA8C,MAAM,QAAQ,oBAAoB,eAAe,MAAM,qCAAqC,MAAM,YAAY,aAAa,WAAW,eAAe,MAAM,SAAS,gBAAgB,QAAQ,SAAS,oCAAoC,aAAa,yBAAyB,YAAY,cAAc,aAAa,aAAa,6BAA6B,KAAK,qCAAqC,KAAK,YAAY,aAAa,UAAU,iBAAiB,KAAK,MAAM,uBAAuB,aAAa,gBAAgB,mBAAmB,mBAAmB,SAAS,oCAAoC,aAAa,yBAAyB,YAAY,cAAc,aAAa,aAAa,6BAA6B,KAAK,eAAe,aAAa,wBAAwB,gBAAgB,iBAAiB,6BAA6B,MAAM,MAAM,aAAa,WAAW,WAAW,kBAAkB,WAAW,uCAAuC,MAAM,MAAM,aAAa,aAAa,yBAAyB,kBAAkB,SAAS,aAAa,gBAAgB,aAAa,gCAAgC,iBAAiB,YAAY,cAAc,aAAa,aAAa,aAAa,KAAK,GAAG,8BAA8B,gCAAgC,2BAA2B,UAAU,sBAAsB,oBAAoB,mBAAmB,SAAS,oCAAoC,aAAa,yBAAyB,YAAY,cAAc,aAAa,aAAa,6BAA6B,8BAA8B,gCAAgC,sBAAsB,YAAY,eAAe,qBAAqB,WAAW,cAAc,qBAAqB,WAAW,2BAA2B,aAAa,aAAa,aAAa,YAAY,kBAAkB,cAAc,aAAa,aAAa,aAAa,KAAK,cAAc,gBAAgB,gBAAgB,UAAU,mBAAmB,KAAK,KAAK,OAAO,SAAS,YAAY,wCAAwC,uBAAuB,8BAA8B,+CAA+C,wBAAwB,gBAAgB,WAAW,gBAAgB,aAAa,cAAc,gBAAgB,cAAc,UAAU,mDAAmD,iBAAiB,qBAAqB,UAAU,oBAAoB,iBAAiB,qBAAqB,eAAe,8BAA8B,oCAAoC,oBAAoB,gBAAgB,UAAU,YAAY,kBAAkB,KAAK,IAAI,OAAO,SAAS,UAAU,sCAAsC,oBAAoB,4BAA4B,4CAA4C,sBAAsB,cAAc,kBAAkB,QAAQ,iBAAiB,oCAAoC,oBAAoB,aAAa,UAAU,oBAAoB,WAAW,iBAAiB,oCAAoC,YAAY,OAAO,IAAI,OAAO,UAAU,MAAM,UAAU,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,gGAAgG,IAAI,SAAS,IAAI,QAAQ,yBAAyB,SAAS,SAAS,kBAAkB,SAAS,IAAI,GAAG,iDAAiD,QAAQ,yBAAyB,uBAAuB,UAAU,iBAAiB,iBAAiB,IAAI,OAAO,UAAU,IAAI,kCAAkC,UAAU,YAAY,gCAAgC,UAAU,UAAU,mBAAmB,iBAAiB,gBAAgB,mBAAmB,cAAc,WAAW,SAAS,kBAAkB,WAAW,WAAW,WAAW,WAAW,WAAW,SAAS,UAAU,UAAU,QAAQ,8CAA8C,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,IAAI,SAAS,WAAW,mCAAmC,KAAK,QAAQ,YAAY,IAAI,IAAI,GAAG,QAAQ,SAAS,mBAAmB,UAAU,KAAK,IAAI,IAAI,iBAAiB,IAAI,GAAG,OAAO,UAAU,gBAAgB,UAAU,oBAAoB,mBAAmB,2BAA2B,YAAY,qBAAqB,IAAI,cAAc,0GAA0G,IAAI,cAAc,0GAA0G,WAAW,QAAQ,iDAAiD,cAAc,SAAS,4BAA4B,WAAW,QAAQ,MAAM,0CAA0C,WAAW,QAAQ,wEAAwE,KAAK,UAAU,gBAAgB,kBAAkB,UAAU,IAAI,GAAG,0CAA0C,QAAQ,0BAA0B,QAAQ,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,wEAAwE,IAAI,UAAU,MAAM,UAAU,kBAAkB,UAAU,IAAI,GAAG,OAAO,YAAY,iBAAiB,kBAAkB,eAAe,IAAI,GAAG,uBAAuB,YAAY,YAAY,aAAa,kBAAkB,YAAY,UAAU,mBAAmB,mBAAmB,8BAA8B,QAAQ,yBAAyB,YAAY,SAAS,MAAM,iBAAiB,kBAAkB,eAAe,IAAI,GAAG,uBAAuB,YAAY,YAAY,aAAa,kBAAkB,YAAY,UAAU,mBAAmB,mBAAmB,8BAA8B,QAAQ,yBAAyB,QAAQ,yBAAyB,UAAU,kBAAkB,UAAU,UAAU,UAAU,UAAU,IAAI,GAAG,YAAY,uCAAuC,YAAY,iBAAiB,YAAY,aAAa,oBAAoB,MAAM,qBAAqB,OAAO,8BAA8B,WAAW,QAAQ,uDAAuD,mBAAmB,mCAAmC,MAAM,YAAY,UAAU,mBAAmB,mBAAmB,OAAO,yBAAyB,SAAS,QAAQ,yBAAyB,UAAU,YAAY,YAAY,UAAU,UAAU,YAAY,IAAI,IAAI,GAAG,aAAa,YAAY,YAAY,aAAa,YAAY,eAAe,YAAY,YAAY,UAAU,mBAAmB,mBAAmB,YAAY,IAAI,mBAAmB,KAAK,qBAAqB,UAAU,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,UAAU,YAAY,YAAY,UAAU,UAAU,YAAY,IAAI,IAAI,GAAG,aAAa,YAAY,YAAY,aAAa,YAAY,eAAe,YAAY,YAAY,UAAU,mBAAmB,mBAAmB,YAAY,IAAI,mBAAmB,KAAK,qBAAqB,UAAU,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,aAAa,IAAI,OAAO,YAAY,IAAI,OAAO,eAAe,MAAM,gCAAgC,IAAI,SAAS,IAAI,QAAQ,UAAU,UAAU,4BAA4B,YAAY,YAAY,YAAY,aAAa,QAAQ,SAAS,UAAU,QAAQ,qBAAqB,eAAe,mBAAmB,YAAY,eAAe,sBAAsB,UAAU,YAAY,WAAW,gBAAgB,kBAAkB,sBAAsB,mBAAmB,IAAI,OAAO,cAAc,gBAAgB,IAAI,SAAS,IAAI,SAAS,SAAS,SAAS,0BAA0B,YAAY,UAAU,UAAU,SAAS,SAAS,mBAAmB,mBAAmB,mBAAmB,UAAU,0BAA0B,YAAY,UAAU,UAAU,SAAS,SAAS,mBAAmB,mBAAmB,mBAAmB,WAAW,0BAA0B,YAAY,WAAW,WAAW,SAAS,SAAS,mBAAmB,mBAAmB,mBAAmB,WAAW,2BAA2B,YAAY,WAAW,SAAS,SAAS,SAAS,mBAAmB,mBAAmB,mBAAmB,kBAAkB,6BAA6B,WAAW,SAAS,UAAU,YAAY,SAAS,6BAA6B,WAAW,SAAS,UAAU,YAAY,SAAS,6BAA6B,WAAW,UAAU,6BAA6B,WAAW,UAAU,6BAA6B,WAAW,SAAS,UAAU,qBAAqB,WAAW,6BAA6B,YAAY,WAAW,SAAS,UAAU,UAAU,mBAAmB,mBAAmB,mBAAmB,WAAW,6BAA6B,YAAY,WAAW,SAAS,UAAU,UAAU,mBAAmB,mBAAmB,mBAAmB,UAAU,6BAA6B,WAAW,SAAS,UAAU,qBAAqB,SAAS,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,iBAAiB,MAAM,MAAM,oDAAoD,IAAI,SAAS,IAAI,QAAQ,oBAAoB,IAAI,IAAI,WAAW,QAAQ,QAAQ,YAAY,YAAY,mBAAmB,IAAI,SAAS,IAAI,QAAQ,2BAA2B,IAAI,MAAM,cAAc,YAAY,wBAAwB,IAAI,WAAW,SAAS,oBAAoB,IAAI,IAAI,WAAW,QAAQ,WAAW,iBAAiB,IAAI,IAAI,WAAW,cAAc,kCAAkC,YAAY,YAAY,UAAU,YAAY,mBAAmB,MAAM,cAAc,kCAAkC,YAAY,YAAY,UAAU,YAAY,mBAAmB,MAAM,aAAa,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,8CAA8C,IAAI,SAAS,IAAI,YAAY,eAAe,0BAA0B,cAAc,cAAc,0BAA0B,cAAc,kBAAkB,YAAY,YAAY,SAAS,UAAU,gBAAgB,oBAAoB,SAAS,UAAU,gBAAgB,oBAAoB,aAAa,SAAS,UAAU,gBAAgB,oBAAoB,mBAAmB,OAAO,IAAI,OAAO,kBAAkB,kBAAkB,aAAa,IAAI,OAAO,iBAAiB,MAAM,MAAM,wBAAwB,IAAI,QAAQ,YAAY,mBAAmB,KAAK,IAAI,OAAO,SAAS,sBAAsB,6BAA6B,UAAU,iBAAiB,IAAI,OAAO,6BAA6B,uBAAuB,sDAAsD,UAAU,IAAI,OAAO,eAAe,MAAM,gCAAgC,IAAI,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,YAAY,OAAO,IAAI,OAAO,QAAQ,YAAY,YAAY,IAAI,GAAG,eAAe,YAAY,MAAM,qBAAqB,MAAM,UAAU,qBAAqB,YAAY,YAAY,QAAQ,mBAAmB,UAAU,MAAM,UAAU,YAAY,IAAI,OAAO,iBAAiB,MAAM,MAAM,4CAA4C,IAAI,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ,sBAAsB,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,iBAAiB,UAAU,sCAAsC,UAAU,cAAc,YAAY,gBAAgB,YAAY,GAAG,eAAe,MAAM,UAAU,qBAAqB,qBAAqB,QAAQ,oBAAoB,UAAU,YAAY,YAAY,0BAA0B,IAAI,SAAS,UAAU,oBAAoB,UAAU,IAAI,OAAO,qBAAqB,YAAY,SAAS,UAAU,oBAAoB,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,gCAAgC,IAAI,QAAQ,uBAAuB,IAAI,OAAO,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,YAAY,UAAU,sCAAsC,UAAU,cAAc,YAAY,gBAAgB,YAAY,GAAG,QAAQ,eAAe,QAAQ,oBAAoB,UAAU,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,oCAAoC,IAAI,QAAQ,QAAQ,uBAAuB,YAAY,QAAQ,UAAU,IAAI,OAAO,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,YAAY,UAAU,sCAAsC,UAAU,cAAc,YAAY,kBAAkB,kBAAkB,eAAe,QAAQ,oBAAoB,UAAU,YAAY,QAAQ,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,4CAA4C,IAAI,SAAS,IAAI,UAAU,SAAS,QAAQ,SAAS,sBAAsB,SAAS,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,sDAAsD,UAAU,mCAAmC,QAAQ,YAAY,mBAAmB,YAAY,mBAAmB,OAAO,IAAI,aAAa,UAAU,aAAa,UAAU,IAAI,OAAO,SAAS,SAAS,IAAI,WAAW,aAAa,YAAY,kBAAkB,uCAAuC,KAAK,MAAM,iBAAiB,uBAAuB,OAAO,IAAI,KAAK,OAAO,cAAc,aAAa,UAAU,aAAa,UAAU,IAAI,QAAQ,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,QAAQ,YAAY,QAAQ,YAAY,+BAA+B,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,iBAAiB,YAAY,YAAY,aAAa,OAAO,IAAI,OAAO,gBAAgB,IAAI,OAAO,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,QAAQ,YAAY,QAAQ,YAAY,+BAA+B,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,iBAAiB,YAAY,YAAY,aAAa,OAAO,IAAI,OAAO,gBAAgB,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,4CAA4C,IAAI,SAAS,QAAQ,QAAQ,IAAI,aAAa,UAAU,eAAe,KAAK,IAAI,OAAO,GAAG,IAAI,QAAQ,gBAAgB,IAAI,IAAI,GAAG,4CAA4C,QAAQ,oBAAoB,SAAS,aAAa,YAAY,aAAa,gBAAgB,UAAU,oBAAoB,IAAI,OAAO,6BAA6B,KAAK,IAAI,SAAS,GAAG,QAAQ,aAAa,YAAY,mBAAmB,GAAG,UAAU,aAAa,YAAY,mBAAmB,sBAAsB,UAAU,UAAU,sBAAsB,UAAU,QAAQ,sBAAsB,UAAU,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,4BAA4B,IAAI,MAAM,iBAAiB,QAAQ,+BAA+B,QAAQ,sBAAsB,YAAY,QAAQ,UAAU,gCAAgC,uBAAuB,OAAO,IAAI,WAAW,YAAY,sBAAsB,eAAe,UAAU,kBAAkB,YAAY,IAAI,GAAG,gCAAgC,QAAQ,yBAAyB,YAAY,WAAW,IAAI,WAAW,QAAQ,QAAQ,qBAAqB,IAAI,WAAW,OAAO,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,qCAAqC,QAAQ,mBAAmB,mBAAmB,IAAI,WAAW,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,QAAQ,YAAY,QAAQ,YAAY,+BAA+B,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,iBAAiB,YAAY,YAAY,aAAa,OAAO,IAAI,OAAO,IAAI,cAAc,IAAI,gBAAgB,YAAY,IAAI,OAAO,eAAe,MAAM,oEAAoE,IAAI,YAAY,YAAY,QAAQ,iCAAiC,UAAU,eAAe,iBAAiB,kBAAkB,oBAAoB,UAAU,aAAa,IAAI,WAAW,YAAY,SAAS,IAAI,IAAI,SAAS,aAAa,gBAAgB,mBAAmB,mBAAmB,kBAAkB,kBAAkB,kBAAkB,WAAW,IAAI,IAAI,KAAK,KAAK,kBAAkB,mBAAmB,IAAI,kBAAkB,IAAI,aAAa,IAAI,IAAI,8BAA8B,iBAAiB,iBAAiB,SAAS,YAAY,iBAAiB,IAAI,MAAM,SAAS,iBAAiB,iBAAiB,IAAI,WAAW,mBAAmB,MAAM,MAAM,MAAM,gCAAgC,IAAI,YAAY,QAAQ,QAAQ,uBAAuB,IAAI,OAAO,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,YAAY,UAAU,sCAAsC,UAAU,cAAc,YAAY,kBAAkB,sBAAsB,QAAQ,oBAAoB,UAAU,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,oEAAoE,IAAI,SAAS,QAAQ,QAAQ,IAAI,aAAa,UAAU,aAAa,IAAI,OAAO,YAAY,IAAI,GAAG,IAAI,QAAQ,gBAAgB,YAAY,IAAI,IAAI,GAAG,0BAA0B,YAAY,QAAQ,aAAa,0BAA0B,kBAAkB,gBAAgB,+CAA+C,QAAQ,oBAAoB,SAAS,aAAa,YAAY,aAAa,gBAAgB,UAAU,oBAAoB,IAAI,OAAO,6BAA6B,KAAK,IAAI,SAAS,QAAQ,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,YAAY,0BAA0B,QAAQ,0DAA0D,IAAI,QAAQ,QAAQ,aAAa,YAAY,aAAa,YAAY,cAAc,IAAI,OAAO,SAAS,SAAS,UAAU,aAAa,aAAa,0BAA0B,mBAAmB,kBAAkB,iEAAiE,UAAU,aAAa,IAAI,SAAS,sBAAsB,gBAAgB,UAAU,UAAU,oBAAoB,UAAU,QAAQ,UAAU,oBAAoB,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,gEAAgE,IAAI,QAAQ,YAAY,YAAY,YAAY,eAAe,IAAI,GAAG,+BAA+B,QAAQ,YAAY,mBAAmB,MAAM,UAAU,IAAI,QAAQ,kBAAkB,SAAS,IAAI,GAAG,uBAAuB,iCAAiC,QAAQ,QAAQ,yBAAyB,YAAY,aAAa,IAAI,OAAO,YAAY,SAAS,SAAS,IAAI,YAAY,SAAS,UAAU,mBAAmB,SAAS,qBAAqB,IAAI,SAAS,aAAa,gBAAgB,mBAAmB,mBAAmB,kBAAkB,kBAAkB,kBAAkB,WAAW,IAAI,IAAI,MAAM,KAAK,kBAAkB,mBAAmB,IAAI,kBAAkB,KAAK,cAAc,IAAI,IAAI,gCAAgC,iBAAiB,2BAA2B,SAAS,YAAY,iBAAiB,IAAI,MAAM,UAAU,SAAS,SAAS,iBAAiB,2BAA2B,kBAAkB,YAAY,IAAI,OAAO,eAAe,MAAM,gEAAgE,IAAI,SAAS,YAAY,SAAS,YAAY,YAAY,SAAS,SAAS,IAAI,GAAG,aAAa,YAAY,0BAA0B,YAAY,iBAAiB,YAAY,YAAY,eAAe,IAAI,IAAI,GAAG,YAAY,aAAa,kDAAkD,IAAI,cAAc,aAAa,gBAAgB,YAAY,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,gCAAgC,YAAY,YAAY,QAAQ,mBAAmB,OAAO,IAAI,OAAO,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,wBAAwB,IAAI,YAAY,yBAAyB,2BAA2B,QAAQ,sBAAsB,YAAY,QAAQ,UAAU,gCAAgC,uBAAuB,OAAO,IAAI,WAAW,kBAAkB,UAAU,uBAAuB,IAAI,GAAG,kCAAkC,QAAQ,iCAAiC,YAAY,WAAW,IAAI,WAAW,QAAQ,eAAe,WAAW,yBAAyB,IAAI,WAAW,KAAK,0BAA0B,IAAI,WAAW,SAAS,eAAe,MAAM,4BAA4B,IAAI,SAAS,IAAI,MAAM,aAAa,mBAAmB,mBAAmB,mBAAmB,oBAAoB,sBAAsB,sBAAsB,sBAAsB,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,UAAU,UAAU,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,cAAc,UAAU,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,UAAU,UAAU,UAAU,cAAc,cAAc,UAAU,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,cAAc,cAAc,UAAU,UAAU,cAAc,cAAc,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,QAAQ,UAAU,QAAQ,UAAU,YAAY,UAAU,sDAAsD,WAAW,UAAU,cAAc,wBAAwB,cAAc,OAAO,IAAI,OAAO,UAAU,MAAM,UAAU,UAAU,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,MAAM,IAAI,OAAO,eAAe,MAAM,gBAAgB,IAAI,aAAa,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,YAAY,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,OAAO,MAAM,IAAI,OAAO,cAAc,MAAM,UAAU,cAAc,MAAM,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,4BAA4B,IAAI,SAAS,SAAS,QAAQ,SAAS,QAAQ,IAAI,kBAAkB,sBAAsB,cAAc,UAAU,gBAAgB,gBAAgB,qBAAqB,IAAI,WAAW,UAAU,OAAO,UAAU,oBAAoB,UAAU,YAAY,oBAAoB,UAAU,cAAc,gBAAgB,cAAc,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,oEAAoE,IAAI,SAAS,QAAQ,IAAI,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,YAAY,UAAU,UAAU,uBAAuB,MAAM,UAAU,YAAY,YAAY,UAAU,UAAU,IAAI,GAAG,8BAA8B,UAAU,kBAAkB,iBAAiB,UAAU,QAAQ,YAAY,QAAQ,mBAAmB,kBAAkB,UAAU,YAAY,KAAK,IAAI,IAAI,QAAQ,kDAAkD,+BAA+B,KAAK,QAAQ,YAAY,UAAU,YAAY,QAAQ,iHAAiH,UAAU,QAAQ,GAAG,YAAY,mBAAmB,UAAU,mBAAmB,YAAY,iBAAiB,YAAY,QAAQ,MAAM,UAAU,IAAI,SAAS,qBAAqB,UAAU,+CAA+C,UAAU,mBAAmB,YAAY,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,QAAQ,KAAK,IAAI,KAAK,SAAS,cAAc,IAAI,6BAA6B,QAAQ,eAAe,8BAA8B,YAAY,UAAU,IAAI,GAAG,mBAAmB,sBAAsB,qBAAqB,QAAQ,mBAAmB,YAAY,OAAO,IAAI,OAAO,UAAU,MAAM,UAAU,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,wHAAwH,IAAI,SAAS,IAAI,eAAe,IAAI,IAAI,WAAW,UAAU,iBAAiB,IAAI,IAAI,WAAW,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAAW,sEAAsE,MAAM,YAAY,YAAY,QAAQ,iCAAiC,+CAA+C,mCAAmC,KAAK,MAAM,YAAY,cAAc,KAAK,MAAM,eAAe,SAAS,SAAS,YAAY,YAAY,uBAAuB,UAAU,YAAY,iBAAiB,kBAAkB,oBAAoB,UAAU,mBAAmB,wBAAwB,2HAA2H,qCAAqC,gBAAgB,eAAe,cAAc,kBAAkB,YAAY,UAAU,iBAAiB,KAAK,QAAQ,mCAAmC,+JAA+J,KAAK,QAAQ,gFAAgF,YAAY,iBAAiB,cAAc,8BAA8B,mBAAmB,gBAAgB,aAAa,YAAY,KAAK,YAAY,IAAI,GAAG,+BAA+B,QAAQ,yBAAyB,UAAU,gCAAgC,gCAAgC,SAAS,OAAO,mFAAmF,KAAK,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,cAAc,UAAU,YAAY,MAAM,cAAc,MAAM,UAAU,cAAc,UAAU,YAAY,mBAAmB,UAAU,KAAK,YAAY,IAAI,GAAG,+BAA+B,QAAQ,yBAAyB,KAAK,cAAc,UAAU,MAAM,UAAU,cAAc,cAAc,UAAU,cAAc,cAAc,wBAAwB,MAAM,8BAA8B,8CAA8C,uCAAuC,gBAAgB,oBAAoB,eAAe,qBAAqB,IAAI,WAAW,iBAAiB,MAAM,MAAM,oDAAoD,IAAI,SAAS,IAAI,UAAU,UAAU,YAAY,mCAAmC,IAAI,IAAI,WAAW,iBAAiB,IAAI,IAAI,WAAW,qBAAqB,IAAI,IAAI,WAAW,YAAY,mBAAmB,IAAI,IAAI,WAAW,iCAAiC,UAAU,2BAA2B,cAAc,wBAAwB,IAAI,IAAI,WAAW,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,IAAI,GAAG,eAAe,wCAAwC,6BAA6B,sBAAsB,iCAAiC,sBAAsB,aAAa,uEAAuE,QAAQ,iCAAiC,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,wDAAwD,IAAI,SAAS,QAAQ,QAAQ,IAAI,oBAAoB,cAAc,QAAQ,YAAY,iBAAiB,UAAU,IAAI,SAAS,6BAA6B,6BAA6B,QAAQ,QAAQ,YAAY,QAAQ,8CAA8C,YAAY,QAAQ,4CAA4C,YAAY,oBAAoB,WAAW,YAAY,QAAQ,wBAAwB,QAAQ,IAAI,IAAI,WAAW,SAAS,gBAAgB,QAAQ,IAAI,WAAW,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,SAAS,IAAI,2BAA2B,qBAAqB,QAAQ,IAAI,OAAO,wBAAwB,QAAQ,IAAI,OAAO,UAAU,UAAU,UAAU,IAAI,GAAG,eAAe,6BAA6B,wBAAwB,iBAAiB,aAAa,UAAU,kBAAkB,iBAAiB,UAAU,QAAQ,QAAQ,iCAAiC,QAAQ,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,oDAAoD,IAAI,SAAS,QAAQ,IAAI,gBAAgB,aAAa,cAAc,wBAAwB,QAAQ,YAAY,YAAY,kBAAkB,QAAQ,IAAI,SAAS,QAAQ,gCAAgC,IAAI,QAAQ,mBAAmB,YAAY,KAAK,IAAI,IAAI,SAAS,UAAU,kBAAkB,IAAI,QAAQ,kCAAkC,YAAY,QAAQ,UAAU,mBAAmB,QAAQ,kCAAkC,YAAY,WAAW,UAAU,QAAQ,OAAO,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,qCAAqC,QAAQ,mBAAmB,mBAAmB,KAAK,UAAU,YAAY,YAAY,kBAAkB,QAAQ,IAAI,SAAS,QAAQ,gCAAgC,IAAI,QAAQ,mBAAmB,YAAY,KAAK,IAAI,IAAI,SAAS,UAAU,kBAAkB,IAAI,QAAQ,kCAAkC,YAAY,QAAQ,UAAU,mBAAmB,QAAQ,kCAAkC,YAAY,WAAW,UAAU,QAAQ,OAAO,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,qCAAqC,QAAQ,mBAAmB,mBAAmB,QAAQ,OAAO,gBAAgB,eAAe,iBAAiB,YAAY,iBAAiB,YAAY,IAAI,SAAS,QAAQ,qCAAqC,mBAAmB,KAAK,IAAI,QAAQ,SAAS,SAAS,UAAU,gBAAgB,YAAY,GAAG,IAAI,QAAQ,8BAA8B,oBAAoB,mBAAmB,UAAU,2BAA2B,wBAAwB,QAAQ,wBAAwB,IAAI,IAAI,WAAW,qBAAqB,iCAAiC,QAAQ,QAAQ,YAAY,QAAQ,4CAA4C,YAAY,QAAQ,yCAAyC,IAAI,IAAI,YAAY,KAAK,UAAU,oBAAoB,WAAW,gBAAgB,IAAI,WAAW,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,oCAAoC,IAAI,SAAS,QAAQ,IAAI,UAAU,sBAAsB,yBAAyB,0CAA0C,QAAQ,QAAQ,YAAY,kBAAkB,IAAI,WAAW,qBAAqB,yBAAyB,YAAY,kBAAkB,IAAI,SAAS,qBAAqB,QAAQ,qBAAqB,4BAA4B,mBAAmB,IAAI,QAAQ,aAAa,SAAS,UAAU,QAAQ,YAAY,SAAS,QAAQ,4BAA4B,IAAI,WAAW,SAAS,YAAY,cAAc,IAAI,IAAI,WAAW,IAAI,GAAG,qBAAqB,oBAAoB,UAAU,QAAQ,YAAY,QAAQ,uBAAuB,IAAI,IAAI,WAAW,eAAe,MAAM,gFAAgF,IAAI,UAAU,iBAAiB,IAAI,OAAO,UAAU,UAAU,UAAU,UAAU,UAAU,IAAI,SAAS,YAAY,YAAY,QAAQ,iCAAiC,sBAAsB,oEAAoE,YAAY,yBAAyB,QAAQ,UAAU,YAAY,YAAY,UAAU,UAAU,UAAU,UAAU,IAAI,GAAG,0BAA0B,kBAAkB,cAAc,YAAY,iBAAiB,YAAY,YAAY,qBAAqB,IAAI,IAAI,GAAG,mBAAmB,4CAA4C,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,UAAU,YAAY,iBAAiB,YAAY,YAAY,eAAe,IAAI,GAAG,6BAA6B,kCAAkC,QAAQ,8CAA8C,qBAAqB,YAAY,QAAQ,mBAAmB,sBAAsB,YAAY,QAAQ,mBAAmB,IAAI,SAAS,SAAS,YAAY,YAAY,QAAQ,iCAAiC,sBAAsB,oEAAoE,YAAY,2BAA2B,QAAQ,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,wJAAwJ,IAAI,SAAS,IAAI,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,UAAU,UAAU,UAAU,IAAI,IAAI,IAAI,WAAW,YAAY,GAAG,YAAY,cAAc,QAAQ,uBAAuB,SAAS,wCAAwC,IAAI,KAAK,QAAQ,cAAc,IAAI,QAAQ,uBAAuB,+CAA+C,YAAY,8DAA8D,6BAA6B,kBAAkB,OAAO,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,qCAAqC,QAAQ,mBAAmB,mBAAmB,gBAAgB,YAAY,6BAA6B,QAAQ,YAAY,mBAAmB,UAAU,YAAY,aAAa,YAAY,kBAAkB,sBAAsB,QAAQ,mBAAmB,YAAY,8BAA8B,YAAY,YAAY,eAAe,YAAY,IAAI,SAAS,eAAe,aAAa,aAAa,YAAY,QAAQ,IAAI,GAAG,sBAAsB,oDAAoD,QAAQ,mBAAmB,kBAAkB,cAAc,YAAY,iBAAiB,YAAY,YAAY,qBAAqB,IAAI,IAAI,GAAG,mBAAmB,4CAA4C,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,UAAU,YAAY,qBAAqB,iBAAiB,qBAAqB,cAAc,SAAS,YAAY,kBAAkB,mBAAmB,YAAY,aAAa,YAAY,2JAA2J,eAAe,gBAAgB,aAAa,KAAK,IAAI,aAAa,SAAS,mBAAmB,mBAAmB,IAAI,SAAS,mBAAmB,iBAAiB,KAAK,QAAQ,QAAQ,0BAA0B,yBAAyB,KAAK,IAAI,SAAS,8BAA8B,IAAI,QAAQ,QAAQ,yBAAyB,SAAS,QAAQ,sBAAsB,SAAS,mBAAmB,0BAA0B,YAAY,oBAAoB,mBAAmB,IAAI,KAAK,QAAQ,QAAQ,kCAAkC,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ,kCAAkC,aAAa,QAAQ,gBAAgB,IAAI,IAAI,WAAW,mBAAmB,IAAI,WAAW,SAAS,mBAAmB,MAAM,MAAM,MAAM,wDAAwD,IAAI,SAAS,SAAS,QAAQ,QAAQ,IAAI,2BAA2B,cAAc,IAAI,IAAI,WAAW,cAAc,IAAI,IAAI,WAAW,oBAAoB,cAAc,YAAY,aAAa,UAAU,IAAI,KAAK,GAAG,qBAAqB,OAAO,yHAAyH,YAAY,oBAAoB,WAAW,YAAY,SAAS,QAAQ,uBAAuB,UAAU,gBAAgB,QAAQ,OAAO,UAAU,sBAAsB,UAAU,oBAAoB,mBAAmB,IAAI,IAAI,YAAY,IAAI,IAAI,WAAW,iBAAiB,MAAM,MAAM,4CAA4C,IAAI,sBAAsB,UAAU,cAAc,YAAY,iBAAiB,YAAY,YAAY,UAAU,qBAAqB,IAAI,IAAI,GAAG,mBAAmB,4CAA4C,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,UAAU,YAAY,4BAA4B,YAAY,QAAQ,4CAA4C,IAAI,IAAI,WAAW,iBAAiB,YAAY,OAAO,IAAI,IAAI,WAAW,iBAAiB,eAAe,IAAI,SAAS,4CAA4C,IAAI,MAAM,QAAQ,8BAA8B,IAAI,WAAW,SAAS,YAAY,IAAI,WAAW,iBAAiB,MAAM,MAAM,4LAA4L,IAAI,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,IAAI,sBAAsB,UAAU,cAAc,YAAY,iBAAiB,YAAY,YAAY,UAAU,qBAAqB,IAAI,IAAI,GAAG,mBAAmB,4CAA4C,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,UAAU,YAAY,eAAe,UAAU,QAAQ,UAAU,QAAQ,UAAU,UAAU,QAAQ,UAAU,QAAQ,UAAU,iBAAiB,uBAAuB,UAAU,OAAO,IAAI,GAAG,uBAAuB,6BAA6B,YAAY,QAAQ,kBAAkB,IAAI,SAAS,QAAQ,gCAAgC,IAAI,QAAQ,mBAAmB,YAAY,SAAS,SAAS,sBAAsB,QAAQ,YAAY,mBAAmB,YAAY,UAAU,MAAM,YAAY,UAAU,UAAU,YAAY,YAAY,UAAU,UAAU,UAAU,IAAI,IAAI,SAAS,MAAM,aAAa,YAAY,YAAY,IAAI,GAAG,mBAAmB,0BAA0B,QAAQ,UAAU,0CAA0C,QAAQ,QAAQ,QAAQ,QAAQ,YAAY,QAAQ,UAAU,YAAY,kBAAkB,IAAI,SAAS,mBAAmB,yBAAyB,kBAAkB,IAAI,SAAS,mBAAmB,QAAQ,qBAAqB,wBAAwB,0BAA0B,aAAa,SAAS,QAAQ,SAAS,QAAQ,qBAAqB,KAAK,QAAQ,UAAU,SAAS,cAAc,IAAI,6BAA6B,IAAI,QAAQ,YAAY,0BAA0B,IAAI,QAAQ,aAAa,QAAQ,mBAAmB,QAAQ,iBAAiB,KAAK,QAAQ,KAAK,IAAI,MAAM,KAAK,IAAI,IAAI,KAAK,SAAS,mBAAmB,0BAA0B,UAAU,kBAAkB,cAAc,UAAU,IAAI,oCAAoC,UAAU,YAAY,UAAU,UAAU,uEAAuE,kDAAkD,UAAU,sBAAsB,YAAY,gBAAgB,UAAU,YAAY,UAAU,YAAY,UAAU,IAAI,GAAG,oCAAoC,YAAY,uBAAuB,IAAI,KAAK,GAAG,eAAe,gBAAgB,QAAQ,gCAAgC,QAAQ,iCAAiC,UAAU,YAAY,aAAa,YAAY,aAAa,gBAAgB,UAAU,wBAAwB,QAAQ,QAAQ,mBAAmB,aAAa,QAAQ,UAAU,QAAQ,KAAK,UAAU,MAAM,UAAU,YAAY,UAAU,IAAI,GAAG,oCAAoC,YAAY,uBAAuB,IAAI,KAAK,GAAG,eAAe,gBAAgB,QAAQ,gCAAgC,QAAQ,iCAAiC,UAAU,YAAY,aAAa,YAAY,aAAa,gBAAgB,UAAU,wBAAwB,QAAQ,QAAQ,mBAAmB,eAAe,QAAQ,UAAU,QAAQ,kBAAkB,IAAI,GAAG,iCAAiC,QAAQ,yBAAyB,UAAU,WAAW,UAAU,YAAY,YAAY,eAAe,KAAK,IAAI,SAAS,QAAQ,yBAAyB,GAAG,aAAa,IAAI,GAAG,YAAY,wEAAwE,IAAI,QAAQ,QAAQ,mBAAmB,QAAQ,mBAAmB,SAAS,YAAY,eAAe,YAAY,MAAM,qBAAqB,MAAM,UAAU,qBAAqB,UAAU,OAAO,YAAY,iBAAiB,2DAA2D,UAAU,MAAM,UAAU,qBAAqB,YAAY,MAAM,iBAAiB,2DAA2D,UAAU,MAAM,UAAU,qBAAqB,YAAY,YAAY,SAAS,MAAM,UAAU,MAAM,UAAU,UAAU,YAAY,OAAO,IAAI,WAAW,UAAU,MAAM,UAAU,UAAU,IAAI,WAAW,iBAAiB,MAAM,MAAM,gEAAgE,IAAI,qBAAqB,IAAI,OAAO,UAAU,kBAAkB,UAAU,UAAU,UAAU,UAAU,IAAI,GAAG,YAAY,iBAAiB,YAAY,YAAY,qBAAqB,IAAI,IAAI,GAAG,mBAAmB,4CAA4C,iBAAiB,YAAY,QAAQ,QAAQ,mBAAmB,KAAK,IAAI,IAAI,QAAQ,uBAAuB,sBAAsB,YAAY,iBAAiB,kBAAkB,eAAe,IAAI,GAAG,uBAAuB,YAAY,YAAY,aAAa,kBAAkB,YAAY,UAAU,mBAAmB,mBAAmB,8BAA8B,QAAQ,yBAAyB,QAAQ,yBAAyB,UAAU,gBAAgB,UAAU,YAAY,QAAQ,qCAAqC,iBAAiB,UAAU,UAAU,SAAS,6BAA6B,QAAQ,+BAA+B,YAAY,aAAa,YAAY,WAAW,YAAY,YAAY,mBAAmB,mBAAmB,IAAI,0BAA0B,QAAQ,UAAU,oBAAoB,aAAa,eAAe,SAAS,UAAU,YAAY,YAAY,aAAa,kBAAkB,YAAY,UAAU,mBAAmB,mBAAmB,IAAI,OAAO,KAAK,yBAAyB,IAAI,QAAQ,eAAe,MAAM,wCAAwC,IAAI,SAAS,IAAI,QAAQ,UAAU,UAAU,UAAU,4BAA4B,YAAY,YAAY,YAAY,aAAa,QAAQ,SAAS,UAAU,kBAAkB,QAAQ,QAAQ,qBAAqB,eAAe,mBAAmB,YAAY,eAAe,kBAAkB,YAAY,WAAW,gBAAgB,kBAAkB,sBAAsB,mBAAmB,IAAI,OAAO,cAAc,gBAAgB,IAAI,SAAS,IAAI,UAAU,UAAU,UAAU,6BAA6B,WAAW,UAAU,6BAA6B,WAAW,UAAU,6BAA6B,WAAW,UAAU,6BAA6B,WAAW,SAAS,oBAAoB,qBAAqB,SAAS,4BAA4B,WAAW,SAAS,WAAW,qBAAqB,UAAU,6BAA6B,WAAW,SAAS,WAAW,qBAAqB,WAAW,6BAA6B,YAAY,WAAW,SAAS,UAAU,UAAU,oBAAoB,oBAAoB,oBAAoB,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,oBAAoB,IAAI,UAAU,QAAQ,UAAU,QAAQ,UAAU,aAAa,IAAI,OAAO,SAAS,cAAc,UAAU,eAAe,UAAU,sDAAsD,YAAY,kBAAkB,aAAa,eAAe,QAAQ,oBAAoB,UAAU,IAAI,OAAO,eAAe,MAAM,gCAAgC,IAAI,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,SAAS,YAAY,MAAM,aAAa,MAAM,UAAU,aAAa,YAAY,OAAO,IAAI,OAAO,QAAQ,YAAY,YAAY,IAAI,GAAG,eAAe,YAAY,MAAM,qBAAqB,MAAM,UAAU,qBAAqB,YAAY,YAAY,QAAQ,mBAAmB,UAAU,MAAM,UAAU,YAAY,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,oCAAoC,IAAI,YAAY,QAAQ,QAAQ,uBAAuB,YAAY,aAAa,UAAU,IAAI,OAAO,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,gBAAgB,YAAY,GAAG,aAAa,eAAe,QAAQ,oBAAoB,UAAU,YAAY,aAAa,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,oCAAoC,IAAI,YAAY,QAAQ,QAAQ,sBAAsB,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,iBAAiB,UAAU,sCAAsC,UAAU,cAAc,YAAY,gBAAgB,YAAY,GAAG,eAAe,MAAM,UAAU,qBAAqB,qBAAqB,QAAQ,oBAAoB,UAAU,YAAY,SAAS,YAAY,uBAAuB,qBAAqB,YAAY,SAAS,QAAQ,SAAS,uBAAuB,IAAI,OAAO,SAAS,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,YAAY,UAAU,sCAAsC,UAAU,cAAc,YAAY,kBAAkB,sBAAsB,QAAQ,oBAAoB,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,4DAA4D,IAAI,SAAS,IAAI,UAAU,SAAS,QAAQ,SAAS,sBAAsB,SAAS,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,sDAAsD,UAAU,mCAAmC,QAAQ,YAAY,mBAAmB,YAAY,mBAAmB,OAAO,IAAI,aAAa,UAAU,aAAa,UAAU,IAAI,OAAO,SAAS,OAAO,MAAM,SAAS,IAAI,WAAW,aAAa,YAAY,kBAAkB,mBAAmB,mBAAmB,wDAAwD,IAAI,OAAO,mBAAmB,uBAAuB,wDAAwD,IAAI,4CAA4C,KAAK,MAAM,iBAAiB,uBAAuB,OAAO,IAAI,KAAK,OAAO,cAAc,aAAa,UAAU,aAAa,UAAU,IAAI,QAAQ,iBAAiB,MAAM,MAAM,oEAAoE,IAAI,UAAU,wBAAwB,+CAA+C,SAAS,gBAAgB,8BAA8B,IAAI,OAAO,8BAA8B,IAAI,OAAO,4BAA4B,YAAY,QAAQ,8CAA8C,IAAI,MAAM,WAAW,KAAK,IAAI,QAAQ,SAAS,mEAAmE,YAAY,mBAAmB,eAAe,KAAK,UAAU,OAAO,MAAM,SAAS,IAAI,WAAW,aAAa,YAAY,kBAAkB,mBAAmB,mBAAmB,wDAAwD,IAAI,OAAO,mBAAmB,uBAAuB,wDAAwD,IAAI,mDAAmD,iBAAiB,uBAAuB,OAAO,IAAI,QAAQ,SAAS,iBAAiB,iBAAiB,gBAAgB,IAAI,OAAO,QAAQ,IAAI,OAAO,iBAAiB,MAAM,MAAM,wEAAwE,IAAI,YAAY,mBAAmB,SAAS,QAAQ,YAAY,iBAAiB,IAAI,SAAS,aAAa,UAAU,YAAY,aAAa,UAAU,IAAI,OAAO,SAAS,OAAO,MAAM,SAAS,SAAS,aAAa,gBAAgB,mBAAmB,mBAAmB,OAAO,kBAAkB,mBAAmB,uBAAuB,wDAAwD,IAAI,OAAO,mBAAmB,uBAAuB,wDAAwD,IAAI,4CAA4C,IAAI,KAAK,KAAK,mBAAmB,kBAAkB,IAAI,aAAa,IAAI,IAAI,OAAO,mBAAmB,uBAAuB,wDAAwD,IAAI,mBAAmB,mBAAmB,wDAAwD,IAAI,4CAA4C,KAAK,MAAM,iBAAiB,2BAA2B,SAAS,YAAY,iBAAiB,IAAI,KAAK,MAAM,SAAS,cAAc,aAAa,UAAU,YAAY,aAAa,UAAU,IAAI,QAAQ,iBAAiB,MAAM,MAAM,gCAAgC,IAAI,YAAY,MAAM,QAAQ,YAAY,iBAAiB,IAAI,SAAS,eAAe,YAAY,MAAM,qBAAqB,MAAM,UAAU,qBAAqB,YAAY,QAAQ,wBAAwB,aAAa,SAAS,UAAU,MAAM,cAAc,UAAU,aAAa,SAAS,YAAY,gCAAgC,MAAM,UAAU,aAAa,SAAS,YAAY,OAAO,IAAI,OAAO,aAAa,OAAO,IAAI,OAAO,MAAM,UAAU,aAAa,IAAI,OAAO,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,YAAY,QAAQ,MAAM,UAAU,MAAM,MAAM,UAAU,YAAY,KAAK,SAAS,mBAAmB,SAAS,UAAU,SAAS,UAAU,IAAI,OAAO,QAAQ,YAAY,YAAY,SAAS,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,oBAAoB,aAAa,eAAe,YAAY,aAAa,UAAU,SAAS,UAAU,SAAS,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,SAAS,IAAI,SAAS,YAAY,YAAY,2BAA2B,YAAY,QAAQ,YAAY,iBAAiB,UAAU,IAAI,SAAS,uBAAuB,IAAI,OAAO,mBAAmB,YAAY,YAAY,gBAAgB,YAAY,YAAY,IAAI,SAAS,QAAQ,8BAA8B,QAAQ,YAAY,iBAAiB,IAAI,MAAM,UAAU,SAAS,YAAY,kBAAkB,YAAY,IAAI,SAAS,8BAA8B,QAAQ,4BAA4B,aAAa,YAAY,UAAU,UAAU,cAAc,KAAK,UAAU,MAAM,UAAU,QAAQ,UAAU,gBAAgB,QAAQ,gBAAgB,QAAQ,gBAAgB,UAAU,UAAU,UAAU,IAAI,OAAO,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,QAAQ,YAAY,QAAQ,YAAY,+BAA+B,cAAc,cAAc,2BAA2B,UAAU,aAAa,YAAY,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,iBAAiB,YAAY,YAAY,aAAa,OAAO,IAAI,OAAO,gBAAgB,IAAI,OAAO,cAAc,YAAY,IAAI,WAAW,YAAY,MAAM,IAAI,WAAW,eAAe,MAAM,QAAQ,IAAI,OAAO,IAAI,OAAO,8BAA8B,IAAI,OAAO,cAAc,gBAAgB,IAAI,SAAS,IAAI,YAAY,MAAM,SAAS,UAAU,WAAW,oBAAoB,YAAY,IAAI,OAAO,eAAe,MAAM,gBAAgB,IAAI,SAAS,IAAI,sBAAsB,IAAI,OAAO,GAAG,WAAW,oBAAoB,YAAY,iBAAiB,SAAS,mBAAmB,IAAI,OAAO,eAAe,MAAM,wCAAwC,IAAI,SAAS,SAAS,QAAQ,IAAI,UAAU,QAAQ,UAAU,QAAQ,UAAU,YAAY,QAAQ,kBAAkB,uBAAuB,WAAW,oBAAoB,YAAY,iBAAiB,SAAS,mBAAmB,oBAAoB,QAAQ,QAAQ,YAAY,gBAAgB,WAAW,UAAU,QAAQ,YAAY,YAAY,OAAO,IAAI,WAAW,UAAU,MAAM,UAAU,UAAU,IAAI,WAAW,cAAc,oBAAoB,IAAI,SAAS,IAAI,WAAW,UAAU,aAAa,aAAa,aAAa,cAAc,+BAA+B,YAAY,IAAI,uBAAuB,cAAc,iCAAiC,cAAc,gBAAgB,eAAe,MAAM,4BAA4B,IAAI,SAAS,SAAS,QAAQ,IAAI,UAAU,QAAQ,UAAU,QAAQ,UAAU,aAAa,QAAQ,WAAW,UAAU,aAAa,aAAa,aAAa,cAAc,cAAc,YAAY,iBAAiB,YAAY,OAAO,IAAI,WAAW,UAAU,MAAM,UAAU,UAAU,IAAI,WAAW,eAAe,MAAM,gBAAgB,IAAI,SAAS,IAAI,WAAW,eAAe,UAAU,2BAA2B,QAAQ,UAAU,IAAI,OAAO,cAAc,6BAA6B,cAAc,6BAA6B,iBAAiB,MAAM,MAAM,wCAAwC,IAAI,YAAY,QAAQ,kBAAkB,KAAK,UAAU,IAAI,QAAQ,YAAY,QAAQ,gBAAgB,QAAQ,YAAY,gBAAgB,WAAW,cAAc,kBAAkB,2BAA2B,UAAU,aAAa,QAAQ,UAAU,eAAe,UAAU,sCAAsC,UAAU,cAAc,YAAY,6BAA6B,aAAa,eAAe,QAAQ,wBAAwB,YAAY,SAAS,UAAU,YAAY,aAAa,IAAI,OAAO,YAAY,YAAY,IAAI,GAAG,8BAA8B,QAAQ,yBAAyB,IAAI,OAAO,iBAAiB,MAAM,MAAM,QAAQ,IAAI,SAAS,UAAU,YAAY,kBAAkB,aAAa,KAAK,cAAc,YAAY,IAAI,SAAS,oBAAoB,kBAAkB,IAAI,WAAW,gBAAgB,SAAS,eAAe,MAAM,YAAY,IAAI,eAAe,UAAU,MAAM,IAAI,WAAW,SAAS,SAAS,OAAO,IAAI,MAAM,UAAU,UAAU,MAAM,IAAI,OAAO,aAAa,UAAU,aAAa,gBAAgB,kBAAkB,IAAI,WAAW,SAAS,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,eAAe,MAAM,OAAO,eAAe,MAAM,YAAY,eAAe,MAAM,QAAQ,IAAI,SAAS,UAAU,WAAW,cAAc,YAAY,SAAS,8HAA8H,WAAW,WAAW,MAAM,cAAc,QAAQ,YAAY,YAAY,WAAW,eAAe,MAAM,OAAO,eAAe,MAAM,OAAO,eAAe,MAAM,OAAO,eAAe,MAAM,OAAO,eAAe,MAAM,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,eAAe,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,oBAAoB,IAAI,SAAS,IAAI,iBAAiB,IAAI,IAAI,WAAW,OAAO,IAAI,IAAI,WAAW,sBAAsB,OAAO,IAAI,IAAI,WAAW,QAAQ,SAAS,GAAG,UAAU,QAAQ,mBAAmB,UAAU,YAAY,cAAc,aAAa,4CAA4C,sBAAsB,IAAI,IAAI,WAAW,mBAAmB,IAAI,IAAI,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,YAAY,OAAO,UAAU,aAAa,aAAa,IAAI,OAAO,iBAAiB,SAAS,sBAAsB,aAAa,aAAa,IAAI,OAAO,SAAS,mBAAmB,IAAI,OAAO,UAAU,IAAI,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,yBAAyB,IAAI,OAAO,YAAY,IAAI,OAAO,qBAAqB,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,yBAAyB,YAAY,IAAI,OAAO,KAAK,cAAc,oCAAoC,IAAI,QAAQ,qBAAqB,MAAM,MAAM,MAAM,MAAM,wCAAwC,IAAI,SAAS,IAAI,YAAY,sBAAsB,gBAAgB,UAAU,YAAY,YAAY,aAAa,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,eAAe,QAAQ,SAAS,GAAG,UAAU,QAAQ,mBAAmB,aAAa,aAAa,MAAM,aAAa,wCAAwC,qBAAqB,IAAI,WAAW,sCAAsC,eAAe,OAAO,2DAA2D,IAAI,WAAW,kBAAkB,qEAAqE,IAAI,IAAI,WAAW,YAAY,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,SAAS,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,aAAa,yBAAyB,IAAI,OAAO,aAAa,SAAS,YAAY,OAAO,UAAU,aAAa,aAAa,oCAAoC,IAAI,OAAO,aAAa,IAAI,OAAO,iBAAiB,SAAS,sBAAsB,aAAa,IAAI,OAAO,SAAS,YAAY,sBAAsB,SAAS,oCAAoC,IAAI,OAAO,aAAa,IAAI,OAAO,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,wBAAwB,IAAI,yBAAyB,yBAAyB,IAAI,OAAO,SAAS,mBAAmB,IAAI,OAAO,UAAU,IAAI,OAAO,uBAAuB,cAAc,sCAAsC,IAAI,OAAO,0DAA0D,aAAa,SAAS,mBAAmB,IAAI,OAAO,SAAS,UAAU,SAAS,UAAU,cAAc,wCAAwC,cAAc,iBAAiB,IAAI,MAAM,KAAK,IAAI,KAAK,iBAAiB,UAAU,SAAS,sBAAsB,0CAA0C,aAAa,WAAW,UAAU,uBAAuB,UAAU,IAAI,OAAO,SAAS,UAAU,IAAI,OAAO,aAAa,IAAI,OAAO,aAAa,IAAI,OAAO,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,yBAAyB,yBAAyB,IAAI,OAAO,SAAS,mBAAmB,IAAI,OAAO,UAAU,IAAI,OAAO,uBAAuB,IAAI,OAAO,0DAA0D,aAAa,UAAU,SAAS,sBAAsB,sDAAsD,aAAa,IAAI,OAAO,aAAa,IAAI,OAAO,aAAa,IAAI,OAAO,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,yBAAyB,cAAc,IAAI,OAAO,KAAK,cAAc,wCAAwC,IAAI,QAAQ,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,yBAAyB,IAAI,OAAO,cAAc,IAAI,OAAO,mBAAmB,MAAM,MAAM,MAAM,YAAY,IAAI,SAAS,IAAI,gBAAgB,sCAAsC,MAAM,OAAO,IAAI,WAAW,gBAAgB,IAAI,WAAW,eAAe,MAAM,QAAQ,IAAI,UAAU,gCAAgC,IAAI,aAAa,cAAc,wBAAwB,IAAI,SAAS,IAAI,SAAS,SAAS,iBAAiB,YAAY,iBAAiB,SAAS,YAAY,cAAc,gDAAgD,eAAe,UAAU,sDAAsD,cAAc,UAAU,YAAY,cAAc,8CAA8C,YAAY,WAAW,iCAAiC,UAAU,YAAY,YAAY,WAAW,KAAK,eAAe,YAAY,YAAY,cAAc,QAAQ,IAAI,SAAS,qBAAqB,IAAI,OAAO,gBAAgB,eAAe,MAAM,QAAQ,IAAI,SAAS,MAAM,yBAAyB,IAAI,OAAO,gBAAgB,eAAe,MAAM,gIAAgI,IAAI,iBAAiB,iBAAiB,eAAe,QAAQ,YAAY,QAAQ,QAAQ,cAAc,OAAO,gBAAgB,kBAAkB,YAAY,QAAQ,YAAY,oBAAoB,8BAA8B,SAAS,uBAAuB,UAAU,UAAU,MAAM,UAAU,uBAAuB,SAAS,OAAO,cAAc,YAAY,kBAAkB,IAAI,IAAI,WAAW,YAAY,gBAAgB,MAAM,OAAO,eAAe,gBAAgB,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,wBAAwB,OAAO,gBAAgB,kBAAkB,YAAY,QAAQ,YAAY,oBAAoB,8BAA8B,SAAS,uBAAuB,UAAU,UAAU,YAAY,MAAM,UAAU,KAAK,kBAAkB,IAAI,SAAS,OAAO,QAAQ,cAAc,QAAQ,kBAAkB,YAAY,MAAM,YAAY,QAAQ,OAAO,gBAAgB,YAAY,OAAO,QAAQ,kBAAkB,YAAY,8BAA8B,KAAK,IAAI,KAAK,KAAK,YAAY,kBAAkB,IAAI,UAAU,aAAa,YAAY,aAAa,UAAU,UAAU,IAAI,IAAI,WAAW,YAAY,MAAM,gBAAgB,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,wCAAwC,qBAAqB,IAAI,SAAS,eAAe,OAAO,eAAe,YAAY,qBAAqB,cAAc,QAAQ,IAAI,QAAQ,YAAY,oBAAoB,QAAQ,qBAAqB,eAAe,eAAe,oBAAoB,SAAS,YAAY,OAAO,SAAS,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,cAAc,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,SAAS,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,YAAY,YAAY,oBAAoB,aAAa,eAAe,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,eAAe,mCAAmC,KAAK,aAAa,aAAa,OAAO,SAAS,aAAa,QAAQ,cAAc,YAAY,kBAAkB,KAAK,cAAc,kBAAkB,gBAAgB,YAAY,MAAM,YAAY,QAAQ,OAAO,gBAAgB,YAAY,OAAO,QAAQ,kBAAkB,YAAY,8BAA8B,KAAK,IAAI,KAAK,KAAK,YAAY,kBAAkB,IAAI,UAAU,aAAa,YAAY,aAAa,UAAU,UAAU,QAAQ,IAAI,aAAa,2BAA2B,SAAS,OAAO,YAAY,MAAM,QAAQ,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,sBAAsB,YAAY,IAAI,IAAI,KAAK,iBAAiB,oBAAoB,IAAI,OAAO,IAAI,SAAS,eAAe,QAAQ,gCAAgC,IAAI,IAAI,IAAI,QAAQ,KAAK,IAAI,IAAI,eAAe,2BAA2B,4BAA4B,YAAY,aAAa,SAAS,sBAAsB,OAAO,YAAY,YAAY,gBAAgB,YAAY,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,wCAAwC,cAAc,qBAAqB,cAAc,QAAQ,QAAQ,eAAe,MAAM,IAAI,SAAS,eAAe,YAAY,2CAA2C,YAAY,oBAAoB,QAAQ,qBAAqB,eAAe,eAAe,oBAAoB,SAAS,YAAY,OAAO,SAAS,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,cAAc,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,SAAS,eAAe,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,YAAY,YAAY,oBAAoB,aAAa,eAAe,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,eAAe,mCAAmC,KAAK,aAAa,aAAa,OAAO,SAAS,mBAAmB,cAAc,kBAAkB,gBAAgB,QAAQ,cAAc,OAAO,gBAAgB,YAAY,OAAO,cAAc,YAAY,kBAAkB,IAAI,KAAK,kBAAkB,YAAY,2BAA2B,IAAI,IAAI,MAAM,KAAK,SAAS,UAAU,aAAa,gBAAgB,iBAAiB,MAAM,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,iBAAiB,iBAAiB,iBAAiB,YAAY,OAAO,WAAW,YAAY,UAAU,iBAAiB,iBAAiB,gBAAgB,MAAM,YAAY,iBAAiB,oBAAoB,iCAAiC,OAAO,SAAS,qBAAqB,YAAY,YAAY,4BAA4B,IAAI,QAAQ,KAAK,OAAO,KAAK,8BAA8B,KAAK,UAAU,iBAAiB,iBAAiB,gBAAgB,SAAS,SAAS,SAAS,QAAQ,YAAY,YAAY,8BAA8B,aAAa,UAAU,gBAAgB,iBAAiB,iBAAiB,MAAM,UAAU,KAAK,QAAQ,cAAc,YAAY,kBAAkB,SAAS,QAAQ,IAAI,aAAa,UAAU,SAAS,YAAY,iBAAiB,QAAQ,YAAY,aAAa,YAAY,UAAU,kBAAkB,YAAY,cAAc,KAAK,UAAU,UAAU,cAAc,YAAY,kBAAkB,QAAQ,IAAI,WAAW,YAAY,gBAAgB,QAAQ,UAAU,YAAY,YAAY,kBAAkB,cAAc,QAAQ,IAAI,WAAW,oBAAoB,WAAW,eAAe,UAAU,UAAU,WAAW,WAAW,UAAU,UAAU,iCAAiC,MAAM,UAAU,SAAS,SAAS,YAAY,SAAS,QAAQ,QAAQ,MAAM,iBAAiB,IAAI,IAAI,WAAW,YAAY,8DAA8D,IAAI,IAAI,WAAW,sBAAsB,YAAY,WAAW,SAAS,SAAS,YAAY,8DAA8D,cAAc,OAAO,MAAM,SAAS,MAAM,kBAAkB,qBAAqB,YAAY,uCAAuC,IAAI,MAAM,KAAK,IAAI,OAAO,SAAS,WAAW,WAAW,SAAS,kBAAkB,UAAU,kBAAkB,IAAI,YAAY,UAAU,cAAc,uBAAuB,YAAY,QAAQ,iCAAiC,YAAY,wCAAwC,IAAI,MAAM,YAAY,iBAAiB,IAAI,MAAM,WAAW,SAAS,SAAS,SAAS,oBAAoB,kBAAkB,IAAI,MAAM,SAAS,oBAAoB,QAAQ,sHAAsH,UAAU,IAAI,QAAQ,KAAK,QAAQ,MAAM,SAAS,qBAAqB,KAAK,IAAI,MAAM,SAAS,SAAS,kBAAkB,MAAM,KAAK,IAAI,MAAM,SAAS,2IAA2I,IAAI,QAAQ,MAAM,eAAe,kBAAkB,UAAU,mCAAmC,YAAY,WAAW,SAAS,SAAS,YAAY,QAAQ,YAAY,mBAAmB,MAAM,MAAM,cAAc,YAAY,SAAS,kEAAkE,YAAY,kBAAkB,QAAQ,cAAc,aAAa,QAAQ,YAAY,UAAU,kBAAkB,iBAAiB,gBAAgB,MAAM,YAAY,gBAAgB,UAAU,IAAI,QAAQ,SAAS,SAAS,uBAAuB,MAAM,MAAM,cAAc,YAAY,SAAS,qCAAqC,UAAU,QAAQ,sBAAsB,QAAQ,cAAc,aAAa,YAAY,cAAc,aAAa,YAAY,QAAQ,QAAQ,cAAc,kBAAkB,sBAAsB,uBAAuB,kBAAkB,UAAU,UAAU,kBAAkB,gBAAgB,MAAM,QAAQ,kBAAkB,eAAe,OAAO,QAAQ,oBAAoB,uBAAuB,qBAAqB,oBAAoB,OAAO,YAAY,YAAY,OAAO,YAAY,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,sBAAsB,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,YAAY,qBAAqB,gBAAgB,0BAA0B,8BAA8B,SAAS,gCAAgC,kBAAkB,cAAc,KAAK,UAAU,WAAW,wBAAwB,QAAQ,SAAS,YAAY,oBAAoB,aAAa,OAAO,kBAAkB,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,kBAAkB,YAAY,8BAA8B,KAAK,aAAa,aAAa,OAAO,KAAK,sBAAsB,qBAAqB,mBAAmB,oBAAoB,oBAAoB,+BAA+B,KAAK,SAAS,iBAAiB,wBAAwB,MAAM,2BAA2B,KAAK,oBAAoB,QAAQ,uBAAuB,IAAI,MAAM,KAAK,SAAS,aAAa,UAAU,SAAS,gBAAgB,QAAQ,QAAQ,mBAAmB,kBAAkB,gBAAgB,QAAQ,cAAc,OAAO,gBAAgB,YAAY,OAAO,cAAc,YAAY,kBAAkB,IAAI,KAAK,kBAAkB,YAAY,2BAA2B,IAAI,IAAI,MAAM,KAAK,SAAS,UAAU,aAAa,gBAAgB,iBAAiB,MAAM,QAAQ,aAAa,KAAK,mBAAmB,KAAK,MAAM,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,iBAAiB,iBAAiB,iBAAiB,YAAY,OAAO,WAAW,YAAY,UAAU,iBAAiB,iBAAiB,gBAAgB,MAAM,YAAY,iBAAiB,oBAAoB,iCAAiC,OAAO,SAAS,qBAAqB,YAAY,YAAY,4BAA4B,IAAI,QAAQ,KAAK,OAAO,KAAK,8BAA8B,KAAK,UAAU,iBAAiB,iBAAiB,gBAAgB,SAAS,SAAS,SAAS,QAAQ,YAAY,YAAY,8BAA8B,aAAa,UAAU,gBAAgB,iBAAiB,iBAAiB,MAAM,UAAU,KAAK,kBAAkB,UAAU,UAAU,kBAAkB,SAAS,YAAY,IAAI,WAAW,SAAS,SAAS,YAAY,4DAA4D,cAAc,eAAe,cAAc,aAAa,iBAAiB,yBAAyB,QAAQ,QAAQ,cAAc,aAAa,aAAa,YAAY,UAAU,kBAAkB,oBAAoB,gBAAgB,aAAa,kBAAkB,kBAAkB,kBAAkB,mBAAmB,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,yBAAyB,IAAI,QAAQ,UAAU,yBAAyB,iBAAiB,QAAQ,YAAY,mBAAmB,cAAc,YAAY,QAAQ,cAAc,OAAO,gBAAgB,YAAY,OAAO,cAAc,YAAY,kBAAkB,IAAI,KAAK,kBAAkB,YAAY,2BAA2B,IAAI,IAAI,MAAM,KAAK,SAAS,UAAU,aAAa,YAAY,aAAa,MAAM,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,aAAa,YAAY,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,MAAM,YAAY,iBAAiB,oBAAoB,iCAAiC,OAAO,IAAI,SAAS,qBAAqB,YAAY,YAAY,4BAA4B,IAAI,QAAQ,KAAK,OAAO,KAAK,8BAA8B,KAAK,UAAU,aAAa,aAAa,YAAY,SAAS,SAAS,SAAS,QAAQ,YAAY,YAAY,8BAA8B,aAAa,UAAU,YAAY,aAAa,aAAa,MAAM,WAAW,KAAK,YAAY,kCAAkC,UAAU,UAAU,UAAU,gBAAgB,WAAW,IAAI,GAAG,OAAO,gBAAgB,sBAAsB,sBAAsB,QAAQ,iBAAiB,QAAQ,cAAc,aAAa,aAAa,YAAY,UAAU,kBAAkB,oBAAoB,gBAAgB,SAAS,YAAY,gBAAgB,QAAQ,UAAU,YAAY,YAAY,kBAAkB,cAAc,QAAQ,IAAI,YAAY,kBAAkB,IAAI,IAAI,WAAW,eAAe,MAAM,oFAAoF,IAAI,OAAO,IAAI,OAAO,UAAU,YAAY,oBAAoB,gBAAgB,MAAM,iBAAiB,OAAO,cAAc,cAAc,YAAY,OAAO,IAAI,OAAO,SAAS,QAAQ,QAAQ,oBAAoB,uBAAuB,cAAc,YAAY,eAAe,IAAI,IAAI,MAAM,UAAU,aAAa,kBAAkB,UAAU,IAAI,OAAO,QAAQ,cAAc,kBAAkB,mBAAmB,mBAAmB,iBAAiB,oBAAoB,8BAA8B,iBAAiB,wBAAwB,IAAI,IAAI,MAAM,iBAAiB,oBAAoB,QAAQ,0BAA0B,UAAU,aAAa,aAAa,UAAU,IAAI,IAAI,MAAM,mBAAmB,mBAAmB,oBAAoB,aAAa,YAAY,OAAO,aAAa,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,kBAAkB,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,MAAM,mBAAmB,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,IAAI,IAAI,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,OAAO,IAAI,IAAI,OAAO,YAAY,oBAAoB,aAAa,mBAAmB,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,mBAAmB,mCAAmC,KAAK,aAAa,aAAa,IAAI,IAAI,MAAM,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,qBAAqB,cAAc,YAAY,eAAe,WAAW,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,uBAAuB,IAAI,OAAO,UAAU,UAAU,IAAI,OAAO,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,YAAY,IAAI,OAAO,aAAa,QAAQ,kBAAkB,mBAAmB,kBAAkB,oBAAoB,aAAa,YAAY,OAAO,YAAY,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,8BAA8B,KAAK,UAAU,IAAI,OAAO,KAAK,cAAc,8BAA8B,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,MAAM,mBAAmB,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,YAAY,YAAY,oBAAoB,aAAa,kBAAkB,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,mBAAmB,mCAAmC,KAAK,aAAa,aAAa,QAAQ,KAAK,cAAc,kBAAkB,mBAAmB,iBAAiB,8BAA8B,8BAA8B,iBAAiB,wBAAwB,MAAM,iBAAiB,8BAA8B,QAAQ,0BAA0B,UAAU,aAAa,aAAa,UAAU,SAAS,cAAc,YAAY,uBAAuB,UAAU,IAAI,QAAQ,KAAK,aAAa,cAAc,YAAY,QAAQ,cAAc,OAAO,gBAAgB,YAAY,OAAO,QAAQ,kBAAkB,YAAY,8BAA8B,KAAK,IAAI,KAAK,KAAK,YAAY,kBAAkB,IAAI,UAAU,aAAa,YAAY,aAAa,IAAI,OAAO,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,aAAa,YAAY,OAAO,aAAa,YAAY,iBAAiB,oBAAoB,iCAAiC,OAAO,SAAS,qBAAqB,YAAY,YAAY,4BAA4B,IAAI,QAAQ,KAAK,OAAO,KAAK,8BAA8B,KAAK,UAAU,aAAa,aAAa,YAAY,SAAS,SAAS,SAAS,QAAQ,YAAY,YAAY,8BAA8B,aAAa,UAAU,YAAY,aAAa,aAAa,MAAM,UAAU,KAAK,YAAY,UAAU,aAAa,aAAa,YAAY,SAAS,oBAAoB,UAAU,eAAe,KAAK,IAAI,OAAO,SAAS,YAAY,YAAY,aAAa,WAAW,IAAI,OAAO,iBAAiB,MAAM,MAAM,gBAAgB,IAAI,SAAS,qBAAqB,kBAAkB,IAAI,MAAM,iBAAiB,eAAe,kBAAkB,MAAM,QAAQ,MAAM,UAAU,UAAU,KAAK,gBAAgB,4BAA4B,kCAAkC,OAAO,eAAe,SAAS,IAAI,WAAW,eAAe,MAAM,iBAAiB,uBAAuB,aAAa,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,gDAAgD,IAAI,aAAa,kBAAkB,IAAI,IAAI,IAAI,IAAI,WAAW,QAAQ,UAAU,GAAG,YAAY,0BAA0B,YAAY,YAAY,eAAe,oBAAoB,2BAA2B,sBAAsB,YAAY,0BAA0B,YAAY,YAAY,MAAM,KAAK,UAAU,OAAO,SAAS,SAAS,WAAW,8BAA8B,YAAY,0BAA0B,YAAY,YAAY,eAAe,uBAAuB,IAAI,KAAK,MAAM,KAAK,KAAK,MAAM,YAAY,0BAA0B,YAAY,YAAY,eAAe,wBAAwB,iBAAiB,8BAA8B,OAAO,QAAQ,IAAI,IAAI,IAAI,IAAI,WAAW,MAAM,IAAI,IAAI,IAAI,IAAI,WAAW,wBAAwB,IAAI,IAAI,IAAI,IAAI,WAAW,KAAK,KAAK,MAAM,KAAK,SAAS,mCAAmC,KAAK,qCAAqC,QAAQ,kBAAkB,IAAI,IAAI,IAAI,IAAI,YAAY,SAAS,2BAA2B,WAAW,aAAa,IAAI,GAAG,eAAe,YAAY,0BAA0B,YAAY,YAAY,eAAe,WAAW,gCAAgC,IAAI,KAAK,IAAI,IAAI,WAAW,aAAa,GAAG,qBAAqB,IAAI,oBAAoB,KAAK,+CAA+C,wBAAwB,IAAI,YAAY,0BAA0B,YAAY,YAAY,eAAe,WAAW,oEAAoE,aAAa,KAAK,OAAO,UAAU,mBAAmB,eAAe,gCAAgC,iBAAiB,QAAQ,gBAAgB,IAAI,IAAI,GAAG,SAAS,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,QAAQ,mCAAmC,IAAI,KAAK,IAAI,IAAI,IAAI,kBAAkB,IAAI,8DAA8D,IAAI,KAAK,MAAM,SAAS,oBAAoB,IAAI,UAAU,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,8DAA8D,IAAI,KAAK,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,GAAG,kBAAkB,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,QAAQ,mCAAmC,IAAI,KAAK,IAAI,IAAI,IAAI,sBAAsB,oBAAoB,IAAI,SAAS,yCAAyC,IAAI,KAAK,QAAQ,sBAAsB,IAAI,QAAQ,4CAA4C,IAAI,KAAK,QAAQ,sBAAsB,IAAI,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,uBAAuB,IAAI,KAAK,QAAQ,KAAK,IAAI,MAAM,SAAS,4CAA4C,GAAG,YAAY,0BAA0B,YAAY,YAAY,eAAe,kCAAkC,kBAAkB,IAAI,IAAI,qCAAqC,4CAA4C,gCAAgC,kBAAkB,sBAAsB,IAAI,IAAI,IAAI,WAAW,yCAAyC,kBAAkB,IAAI,IAAI,IAAI,IAAI,YAAY,oBAAoB,4BAA4B,IAAI,IAAI,IAAI;;;;AAIxs9G,oBAAmB,MAAM,MAAM,MAAM,gIAAgI,IAAI,UAAU,IAAI,OAAO,KAAK,OAAO,kBAAkB,KAAK,QAAQ,kBAAkB,KAAK,QAAQ,KAAK,MAAM,IAAI,SAAS,QAAQ,UAAU,GAAG,YAAY,0BAA0B,YAAY,YAAY,eAAe,oBAAoB,2BAA2B,yBAAyB,YAAY,0BAA0B,YAAY,YAAY,MAAM,KAAK,UAAU,OAAO,SAAS,SAAS,IAAI,GAAG,oCAAoC,eAAe,YAAY,0BAA0B,YAAY,YAAY,MAAM,KAAK,UAAU,OAAO,SAAS,QAAQ,eAAe,oBAAoB,kBAAkB,WAAW,+BAA+B,KAAK,KAAK,MAAM,YAAY,IAAI,GAAG,sCAAsC,eAAe,YAAY,0BAA0B,YAAY,YAAY,MAAM,KAAK,UAAU,OAAO,SAAS,QAAQ,eAAe,SAAS,OAAO,iBAAiB,YAAY,0BAA0B,YAAY,YAAY,eAAe,kBAAkB,iBAAiB,KAAK,MAAM,wBAAwB,KAAK,MAAM,YAAY,0BAA0B,YAAY,YAAY,IAAI,KAAK,UAAU,IAAI,SAAS,cAAc,KAAK,MAAM,mBAAmB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,MAAM,YAAY,0BAA0B,YAAY,YAAY,IAAI,SAAS,KAAK,UAAU,IAAI,UAAU,cAAc,YAAY,0BAA0B,YAAY,YAAY,eAAe,cAAc,IAAI,IAAI,GAAG,YAAY,0BAA0B,YAAY,YAAY,eAAe,sBAAsB,IAAI,iBAAiB,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,OAAO,WAAW,WAAW,iBAAiB,OAAO,YAAY,iCAAiC,YAAY,IAAI,IAAI,IAAI,MAAM,KAAK,KAAK,QAAQ,KAAK,sBAAsB,KAAK,OAAO,UAAU,SAAS,cAAc,IAAI,mCAAmC,8BAA8B,UAAU,IAAI,aAAa,MAAM,yBAAyB,KAAK,IAAI,IAAI,UAAU,KAAK,IAAI,aAAa,SAAS,oBAAoB,IAAI,IAAI,IAAI,YAAY,0BAA0B,YAAY,YAAY,SAAS,KAAK,UAAU,UAAU,OAAO,iBAAiB,8BAA8B,MAAM,2DAA2D,aAAa,aAAa,IAAI,SAAS,WAAW,QAAQ,QAAQ,+BAA+B,OAAO,oBAAoB,IAAI,gCAAgC,qBAAqB,YAAY,IAAI,sCAAsC,QAAQ,MAAM,IAAI,SAAS,KAAK,iBAAiB,IAAI,IAAI,MAAM,wBAAwB,IAAI,IAAI,OAAO,sBAAsB,IAAI,IAAI,KAAK,wBAAwB,IAAI,IAAI,SAAS,kBAAkB,uBAAuB,wBAAwB,IAAI,OAAO,aAAa,IAAI,SAAS,uCAAuC,kBAAkB,yDAAyD,IAAI,SAAS,YAAY,oBAAoB,yCAAyC,kBAAkB,yDAAyD,IAAI,SAAS,eAAe,OAAO,gBAAgB,KAAK,SAAS,MAAM,MAAM,sBAAsB,IAAI,gBAAgB,qCAAqC,wBAAwB,IAAI,4CAA4C,IAAI,MAAM,KAAK,IAAI,MAAM,WAAW,gCAAgC,KAAK,IAAI,SAAS,MAAM,eAAe,SAAS,IAAI,IAAI,6BAA6B,6BAA6B,yCAAyC,+BAA+B,WAAW,IAAI,SAAS,SAAS,QAAQ,QAAQ,IAAI,SAAS,cAAc,MAAM,MAAM,mBAAmB,IAAI,IAAI,IAAI,MAAM,YAAY,0BAA0B,YAAY,YAAY,IAAI,SAAS,KAAK,UAAU,IAAI,UAAU,eAAe,YAAY,0BAA0B,YAAY,YAAY,eAAe,cAAc,IAAI,IAAI,GAAG,sBAAsB,IAAI,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,UAAU,WAAW,YAAY,oBAAoB,UAAU,IAAI,IAAI,IAAI,IAAI,IAAI,WAAW,eAAe,IAAI,IAAI,IAAI,aAAa,KAAK,oBAAoB,IAAI,YAAY,eAAe,OAAO,IAAI,MAAM,kBAAkB,IAAI,MAAM,aAAa,mCAAmC,UAAU,QAAQ,WAAW,IAAI,IAAI,QAAQ,YAAY,QAAQ,SAAS,YAAY,0BAA0B,YAAY,YAAY,eAAe,WAAW,YAAY,kBAAkB,MAAM,SAAS,WAAW,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,SAAS,kBAAkB,WAAW,QAAQ,QAAQ,WAAW,mCAAmC,MAAM,MAAM,KAAK,MAAM,MAAM,YAAY,IAAI,yCAAyC,QAAQ,MAAM,IAAI,SAAS,KAAK,iBAAiB,IAAI,IAAI,MAAM,wBAAwB,IAAI,IAAI,MAAM,SAAS,wBAAwB,IAAI,SAAS,4BAA4B,wBAAwB,SAAS,WAAW,WAAW,uBAAuB,WAAW,eAAe,kBAAkB,QAAQ,MAAM,IAAI,SAAS,YAAY,OAAO,aAAa,IAAI,SAAS,kFAAkF,kBAAkB,IAAI,SAAS,aAAa,oBAAoB,yCAAyC,kBAAkB,yDAAyD,IAAI,SAAS,YAAY,oBAAoB,yCAAyC,kBAAkB,yDAAyD,IAAI,SAAS,MAAM,YAAY,aAAa,YAAY,GAAG,SAAS,QAAQ,gBAAgB,UAAU,QAAQ,oCAAoC,aAAa,4BAA4B,IAAI,SAAS,YAAY,qDAAqD,IAAI,SAAS,sBAAsB,YAAY,0BAA0B,8CAA8C,IAAI,UAAU,YAAY,OAAO,IAAI,IAAI,KAAK,mBAAmB,wBAAwB,MAAM,cAAc,IAAI,IAAI,IAAI,GAAG,aAAa,YAAY,0BAA0B,UAAU,4BAA4B,IAAI,QAAQ,0BAA0B,QAAQ,WAAW,oBAAoB,MAAM,iBAAiB,SAAS,KAAK,IAAI,IAAI,IAAI,UAAU,WAAW,aAAa,aAAa,GAAG,IAAI,UAAU,SAAS,QAAQ,aAAa,uBAAuB,sBAAsB,IAAI,+BAA+B,sBAAsB,sBAAsB,IAAI,SAAS,UAAU,eAAe,4CAA4C,WAAW,eAAe,WAAW,gBAAgB,KAAK,mBAAmB,GAAG,6BAA6B,KAAK,QAAQ,IAAI,UAAU,SAAS,QAAQ,aAAa,uBAAuB,sBAAsB,IAAI,+BAA+B,sBAAsB,sBAAsB,IAAI,SAAS,UAAU,eAAe,4CAA4C,WAAW,eAAe,WAAW,gBAAgB,YAAY,iBAAiB,YAAY,uBAAuB,+BAA+B,IAAI,iBAAiB,QAAQ,WAAW,UAAU,uBAAuB,SAAS,YAAY,eAAe,SAAS,IAAI,SAAS,UAAU,iBAAiB,IAAI,MAAM,mBAAmB,sBAAsB,gBAAgB,IAAI,MAAM,QAAQ,qBAAqB,eAAe,KAAK,IAAI,OAAO,sBAAsB,QAAQ,oBAAoB,WAAW,eAAe,UAAU,IAAI,IAAI,GAAG,aAAa,YAAY,cAAc,UAAU,cAAc,wBAAwB,UAAU,cAAc,QAAQ,oBAAoB,OAAO,IAAI,SAAS,sBAAsB,kBAAkB,IAAI,iBAAiB,IAAI,IAAI,QAAQ,iBAAiB,qBAAqB,IAAI,4BAA4B,UAAU,iBAAiB,UAAU,qBAAqB,SAAS,yCAAyC,SAAS,QAAQ,2BAA2B,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,MAAM,gCAAgC,KAAK,MAAM,MAAM,eAAe,8BAA8B,6BAA6B,IAAI,IAAI,UAAU,UAAU,oBAAoB,mBAAmB,kBAAkB,cAAc,UAAU,MAAM,uBAAuB,SAAS,MAAM,KAAK,UAAU,OAAO,KAAK,uCAAuC,UAAU,SAAS,qBAAqB,0BAA0B,QAAQ,SAAS,QAAQ,iCAAiC,+BAA+B,4BAA4B,QAAQ,OAAO,8CAA8C,kBAAkB,SAAS,WAAW,IAAI,SAAS,kBAAkB,YAAY,0BAA0B,YAAY,YAAY,eAAe,iBAAiB,KAAK,iBAAiB,IAAI,IAAI,SAAS,wBAAwB,IAAI,IAAI,SAAS,SAAS,YAAY,0BAA0B,YAAY,YAAY,eAAe,iFAAiF,QAAQ,cAAc,IAAI,IAAI,SAAS,iBAAiB,8BAA8B,OAAO,kBAAkB,QAAQ,MAAM,IAAI,SAAS,eAAe,IAAI,IAAI,SAAS,GAAG,UAAU,wBAAwB,gBAAgB,IAAI,IAAI,SAAS,KAAK,qCAAqC,kBAAkB,QAAQ,MAAM,IAAI,UAAU,SAAS,cAAc,iBAAiB,8BAA8B,4BAA4B,wBAAwB,UAAU,eAAe,WAAW,IAAI,SAAS,iBAAiB,MAAM,MAAM,oBAAoB,IAAI,cAAc,cAAc,cAAc,QAAQ,cAAc,yBAAyB,gBAAgB,IAAI,OAAO,KAAK,cAAc,IAAI,QAAQ,eAAe,MAAM,gCAAgC,IAAI,UAAU,YAAY,4CAA4C,oCAAoC,YAAY,cAAc,sFAAsF,mBAAmB,cAAc,MAAM,UAAU,0BAA0B,UAAU,yBAAyB,IAAI,IAAI,WAAW,UAAU,IAAI,IAAI,WAAW,cAAc,KAAK,IAAI,WAAW,iBAAiB,KAAK,MAAM,YAAY,IAAI,eAAe,0BAA0B,aAAa,eAAe,aAAa,oBAAoB,0BAA0B,SAAS,qBAAqB,4BAA4B,WAAW,gBAAgB,WAAW,sBAAsB,4BAA4B,SAAS,sBAAsB,IAAI,UAAU,YAAY,aAAa,IAAI,SAAS,iBAAiB,KAAK,MAAM,QAAQ,IAAI,WAAW,IAAI,SAAS,eAAe,MAAM,gBAAgB,IAAI,SAAS,YAAY,gBAAgB,SAAS,SAAS,6DAA6D,aAAa,aAAa,UAAU,YAAY,YAAY,YAAY,YAAY,YAAY,IAAI,IAAI,WAAW,WAAW,KAAK,IAAI,WAAW,aAAa,KAAK,IAAI,WAAW,eAAe,MAAM,YAAY,IAAI,SAAS,IAAI,wCAAwC,mDAAmD,UAAU,IAAI,WAAW,iBAAiB,MAAM,MAAM,0BAA0B,IAAI,UAAU,IAAI,QAAQ,UAAU,GAAG,UAAU,QAAQ,mBAAmB,QAAQ,UAAU,QAAQ,WAAW,aAAa,cAAc,QAAQ,aAAa,4CAA4C,OAAO,IAAI,SAAS,aAAa,UAAU,IAAI,SAAS,mBAAmB,MAAM,MAAM,MAAM,gBAAgB,IAAI,UAAU,IAAI,UAAU,QAAQ,UAAU,aAAa,wBAAwB,4BAA4B,cAAc,QAAQ,4BAA4B,OAAO,IAAI,WAAW,sDAAsD,IAAI,WAAW,iBAAiB,MAAM,MAAM,gBAAgB,IAAI,YAAY,YAAY,2CAA2C,KAAK,GAAG,QAAQ,QAAQ,YAAY,YAAY,8CAA8C,IAAI,IAAI,wBAAwB,iBAAiB,MAAM,MAAM,4DAA4D,IAAI,QAAQ,YAAY,OAAO,QAAQ,YAAY,MAAM,6CAA6C,YAAY,YAAY,eAAe,OAAO,cAAc,IAAI,IAAI,WAAW,qDAAqD,IAAI,IAAI,WAAW,IAAI,IAAI,WAAW,iBAAiB,QAAQ,cAAc,IAAI,IAAI,WAAW,gBAAgB,kBAAkB,kBAAkB,YAAY,IAAI,IAAI,WAAW,uBAAuB,kBAAkB,iBAAiB,IAAI,IAAI,WAAW,QAAQ,gBAAgB,kBAAkB,YAAY,UAAU,IAAI,IAAI,WAAW,uBAAuB,kBAAkB,gBAAgB,IAAI,IAAI,WAAW,QAAQ,aAAa,gBAAgB,kBAAkB,YAAY,YAAY,mBAAmB,QAAQ,KAAK,gBAAgB,YAAY,kBAAkB,IAAI,IAAI,UAAU,UAAU,IAAI,IAAI,WAAW,QAAQ,IAAI,IAAI,WAAW,aAAa,gBAAgB,IAAI,IAAI,WAAW,QAAQ,QAAQ,kBAAkB,mBAAmB,mBAAmB,oBAAoB,aAAa,YAAY,OAAO,aAAa,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,kBAAkB,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,MAAM,mBAAmB,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,YAAY,YAAY,oBAAoB,aAAa,mBAAmB,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,mBAAmB,mCAAmC,KAAK,aAAa,aAAa,QAAQ,KAAK,kBAAkB,mBAAmB,mBAAmB,iBAAiB,oBAAoB,8BAA8B,iBAAiB,wBAAwB,MAAM,iBAAiB,oBAAoB,QAAQ,0BAA0B,UAAU,aAAa,aAAa,UAAU,SAAS,aAAa,gBAAgB,YAAY,kBAAkB,IAAI,IAAI,WAAW,KAAK,gBAAgB,kBAAkB,YAAY,kBAAkB,YAAY,IAAI,IAAI,WAAW,SAAS,iBAAiB,MAAM,MAAM,4EAA4E,IAAI,QAAQ,cAAc,cAAc,YAAY,WAAW,IAAI,OAAO,YAAY,QAAQ,YAAY,oBAAoB,uBAAuB,YAAY,YAAY,eAAe,IAAI,IAAI,MAAM,UAAU,aAAa,kBAAkB,UAAU,IAAI,OAAO,QAAQ,cAAc,kBAAkB,mBAAmB,mBAAmB,iBAAiB,oBAAoB,8BAA8B,iBAAiB,wBAAwB,IAAI,IAAI,MAAM,iBAAiB,oBAAoB,QAAQ,0BAA0B,UAAU,aAAa,aAAa,UAAU,IAAI,IAAI,MAAM,mBAAmB,mBAAmB,oBAAoB,SAAS,YAAY,YAAY,OAAO,QAAQ,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,kBAAkB,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,MAAM,mBAAmB,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,IAAI,IAAI,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,OAAO,IAAI,IAAI,OAAO,YAAY,oBAAoB,aAAa,SAAS,cAAc,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,kBAAkB,mCAAmC,KAAK,aAAa,aAAa,IAAI,IAAI,MAAM,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,YAAY,oBAAoB,YAAY,YAAY,WAAW,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,uBAAuB,IAAI,OAAO,UAAU,UAAU,IAAI,OAAO,uBAAuB,kBAAkB,UAAU,UAAU,cAAc,YAAY,IAAI,OAAO,aAAa,QAAQ,kBAAkB,mBAAmB,mBAAmB,oBAAoB,aAAa,YAAY,OAAO,aAAa,YAAY,OAAO,IAAI,OAAO,SAAS,SAAS,YAAY,MAAM,IAAI,IAAI,SAAS,SAAS,YAAY,YAAY,KAAK,IAAI,KAAK,oBAAoB,KAAK,UAAU,IAAI,OAAO,KAAK,kBAAkB,oBAAoB,SAAS,2BAA2B,QAAQ,uBAAuB,UAAU,UAAU,IAAI,MAAM,UAAU,SAAS,MAAM,mBAAmB,gBAAgB,uBAAuB,UAAU,OAAO,wBAAwB,OAAO,KAAK,8BAA8B,SAAS,gCAAgC,kBAAkB,YAAY,YAAY,oBAAoB,aAAa,mBAAmB,4BAA4B,KAAK,aAAa,aAAa,MAAM,SAAS,mBAAmB,mCAAmC,KAAK,aAAa,aAAa,QAAQ,KAAK,kBAAkB,mBAAmB,mBAAmB,iBAAiB,oBAAoB,8BAA8B,iBAAiB,wBAAwB,MAAM,iBAAiB,oBAAoB,QAAQ,0BAA0B,UAAU,aAAa,aAAa,UAAU,SAAS,cAAc,YAAY,uBAAuB,UAAU,IAAI,QAAQ,KAAK,aAAa,cAAc,YAAY,QAAQ,cAAc,OAAO,gBAAgB,YAAY,OAAO,QAAQ,kBAAkB,YAAY,8BAA8B,KAAK,IAAI,KAAK,KAAK,YAAY,kBAAkB,IAAI,UAAU,aAAa,YAAY,aAAa,IAAI,OAAO,QAAQ,4BAA4B,KAAK,uBAAuB,OAAO,sBAAsB,OAAO,sBAAsB,2BAA2B,qBAAqB,SAAS,gBAAgB,aAAa,aAAa,aAAa,YAAY,OAAO,WAAW,YAAY,UAAU,aAAa,aAAa,YAAY,IAAI,OAAO,YAAY,iBAAiB,oBAAoB,iCAAiC,OAAO,IAAI,SAAS,qBAAqB,YAAY,YAAY,mCAAmC,KAAK,OAAO,KAAK,8BAA8B,UAAU,aAAa,aAAa,YAAY,IAAI,OAAO,SAAS,QAAQ,YAAY,YAAY,qCAAqC,aAAa,UAAU,YAAY,aAAa,aAAa,IAAI,OAAO,iBAAiB,MAAM,MAAM,4BAA4B,IAAI,QAAQ,YAAY,UAAU,0BAA0B,YAAY,YAAY,eAAe,wBAAwB,YAAY,cAAc,0BAA0B,YAAY,YAAY,eAAe,sEAAsE,SAAS,qBAAqB,iBAAiB,cAAc,IAAI,IAAI,IAAI,WAAW,wBAAwB,cAAc,IAAI,IAAI,IAAI,WAAW,SAAS,GAAG,oBAAoB,YAAY,0BAA0B,YAAY,YAAY,eAAe,yCAAyC,oBAAoB,wBAAwB,qBAAqB,IAAI,uCAAuC,wBAAwB,IAAI,YAAY,0BAA0B,YAAY,YAAY,eAAe,2EAA2E,wBAAwB,YAAY,0BAA0B,YAAY,YAAY,eAAe,yBAAyB,qCAAqC,WAAW,oBAAoB,QAAQ,QAAQ,IAAI,IAAI,WAAW,eAAe,qBAAqB,MAAM,MAAM,MAAM,MAAM,0BAA0B,wBAAwB,mBAAmB,MAAM,MAAM,MAAM,oBAAoB,QAAQ,cAAc,QAAQ,MAAM,qBAAqB,OAAO,MAAM,UAAU,mBAAmB,UAAU,SAAS,mBAAmB,UAAU,SAAS,mBAAmB,UAAU,QAAQ,aAAa,mBAAmB,MAAM,MAAM,MAAM,aAAa,iCAAiC,YAAY,UAAU,SAAS,eAAe,MAAM,QAAQ,IAAI,wBAAwB,aAAa,qBAAqB,MAAM,MAAM,MAAM,MAAM,UAAU,wCAAwC,mBAAmB,MAAM,MAAM,MAAM,aAAa,QAAQ,gCAAgC,IAAI,kBAAkB,mBAAmB,MAAM,MAAM,MAAM,QAAQ,wCAAwC,MAAM,iBAAiB,WAAW,iBAAiB,kBAAkB,QAAQ,QAAQ,QAAQ,gBAAgB,gBAAgB,QAAQ,QAAQ,SAAS,eAAe,kBAAkB,QAAQ,QAAQ,QAAQ,WAAW,mBAAmB,MAAM,MAAM,MAAM,aAAa,OAAO,gCAAgC,eAAe,iBAAiB,eAAe,MAAM,QAAQ,qBAAqB,sBAAsB,wBAAwB,wBAAwB,uBAAuB,yBAAyB,+BAA+B,eAAe,MAAM,QAAQ,oBAAoB,sBAAsB,uBAAuB,wBAAwB,wBAAwB,yBAAyB,gCAAgC,iBAAiB,MAAM,MAAM,oBAAoB,UAAU,UAAU,YAAY,SAAS,yBAAyB,SAAS,YAAY,4EAA4E,qBAAqB,MAAM,MAAM,MAAM,MAAM,4BAA4B,0BAA0B,uCAAuC,0BAA0B,uCAAuC,oBAAoB,IAAI,MAAM,MAAM,oDAAoD,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,4BAA4B,IAAI,QAAQ,MAAM,0BAA0B,uCAAuC,0BAA0B,uCAAuC,oBAAoB,IAAI,gCAAgC,kCAAkC,IAAI,IAAI,gBAAgB,qBAAqB,MAAM,MAAM,MAAM,MAAM,YAAY,IAAI,IAAI,YAAY,IAAI,gDAAgD,qBAAqB,MAAM,MAAM,MAAM,MAAM,kBAAkB,WAAW,qBAAqB,MAAM,MAAM,MAAM,MAAM,YAAY,IAAI,QAAQ,MAAM,gBAAgB,IAAI,kCAAkC,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,4CAA4C,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,WAAW,OAAO,MAAM,wBAAwB,YAAY,IAAI,sBAAsB,gBAAgB,KAAK,OAAO,IAAI,IAAI,gBAAgB,YAAY,cAAc,IAAI,IAAI,iBAAiB,WAAW,SAAS,OAAO,4BAA4B,cAAc,QAAQ,SAAS,WAAW,IAAI,qBAAqB,gBAAgB,IAAI,OAAO,MAAM,OAAO,IAAI,IAAI,gBAAgB,YAAY,gBAAgB,IAAI,IAAI,gBAAgB,QAAQ,QAAQ,+BAA+B,SAAS,SAAS,QAAQ,SAAS,QAAQ,IAAI,2CAA2C,gBAAgB,SAAS,qCAAqC,MAAM,MAAM,YAAY,YAAY,aAAa,QAAQ,QAAQ,gBAAgB,KAAK,YAAY,gBAAgB,wBAAwB,iBAAiB,KAAK,MAAM,MAAM,wBAAwB,YAAY,IAAI,sBAAsB,gBAAgB,OAAO,MAAM,UAAU,0BAA0B,IAAI,sBAAsB,gBAAgB,QAAQ,WAAW,MAAM,YAAY,kBAAkB,IAAI,wBAAwB,gBAAgB,4BAA4B,cAAc,QAAQ,SAAS,IAAI,mBAAmB,cAAc,IAAI,OAAO,MAAM,OAAO,IAAI,IAAI,gBAAgB,YAAY,gBAAgB,IAAI,IAAI,gBAAgB,SAAS,OAAO,IAAI,IAAI,IAAI,KAAK,QAAQ,QAAQ,kBAAkB,IAAI,IAAI,GAAG,IAAI,cAAc,SAAS,gBAAgB,gBAAgB,cAAc,IAAI,0BAA0B,MAAM,yDAAyD,IAAI,QAAQ,gBAAgB,IAAI,IAAI,IAAI,MAAM,UAAU,YAAY,wCAAwC,qBAAqB,gBAAgB,qBAAqB,MAAM,MAAM,MAAM,MAAM,8BAA8B,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,6BAA6B,iBAAiB,MAAM,MAAM,cAAc,mBAAmB,MAAM,MAAM,MAAM,iBAAiB,iBAAiB,MAAM,MAAM,sBAAsB,eAAe,MAAM,UAAU,2BAA2B,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,iCAAiC,mBAAmB,MAAM,MAAM,MAAM,0BAA0B,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,yBAAyB,mBAAmB,MAAM,MAAM,MAAM,MAAM,SAAS,uBAAuB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,eAAe,MAAM,MAAM,iBAAiB,MAAM,MAAM,MAAM,eAAe,MAAM,MAAM,SAAS,cAAc,MAAM,cAAc,KAAK,yBAAyB,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,iBAAiB,MAAM,MAAM,MAAM,SAAS,qBAAqB,MAAM,MAAM,MAAM,MAAM;;;;;AAK5hyB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,qBAAqB,yGAAyG,qBAAqB,eAAe,qBAAqB,qBAAqB,qBAAqB,qBAAqB,OAAO,+nBAA+nB;;;AAG34B;AACA,mDAAkD,iCAAiC,6CAA6C,sDAAsD,qEAAqE,uCAAuC,0CAA0C,kEAAkE,4DAA4D,0FAA0F,6CAA6C,yDAAyD,6CAA6C,0FAA0F,sDAAsD,4DAA4D,wEAAwE,gDAAgD,6CAA6C,kEAAkE,wEAAwE,sDAAsD,8EAA8E,uCAAuC,6CAA6C,+DAA+D,wEAAwE,yDAAyD,4DAA4D,kEAAkE,sDAAsD,yDAAyD,sDAAsD,mDAAmD,qEAAqE,yDAAyD,+DAA+D,qCAAqC,mCAAmC,yCAAyC,uCAAuC,uCAAuC,wBAAwB,UAAU,SAAS,mCAAmC,gBAAgB,kBAAkB,EAAE,4BAA4B,wCAAwC,2BAA2B,8CAA8C,cAAc,kBAAkB,iDAAiD,2BAA2B,oCAAoC,WAAW,EAAE,2CAA2C,mCAAmC,2BAA2B,gDAAgD,gCAAgC,iDAAiD,gCAAgC,iBAAiB,kDAAkD,KAAK,0GAA0G,EAAE,oDAAoD,4CAA4C,EAAE,mDAAmD,kBAAkB,iDAAiD,wBAAwB,sBAAsB,0CAA0C,uBAAuB,kEAAkE,6BAA6B,iEAAiE,8DAA8D,+BAA+B,YAAY,aAAa,MAAM,kCAAkC,kDAAkD,WAAW,0DAA0D,oEAAoE,KAAK,qCAAqC,qDAAqD,cAAc,EAAE,qCAAqC,qCAAqC,6FAA6F,gEAAgE,6FAA6F,6FAA6F,gEAAgE,8CAA8C,6CAA6C,kDAAkD,4EAA4E,iEAAiE,yDAAyD,2CAA2C,iBAAiB,EAAE,8CAA8C,2EAA2E,EAAE,uDAAuD,wBAAwB,sBAAsB,0CAA0C,kBAAkB,UAAU,sBAAsB,0CAA0C,+CAA+C,4BAA4B,+CAA+C,uDAAuD,KAAK,yCAAyC,8DAA8D,aAAa,cAAc,YAAY,iCAAiC,+DAA+D,kCAAkC,WAAW,iBAAiB,qBAAqB,KAAK,uBAAuB,kBAAkB,0BAA0B,EAAE,iDAAiD,kBAAkB,EAAE,gDAAgD,iBAAiB,EAAE,wDAAwD,uEAAuE,EAAE,mDAAmD,sBAAsB,0CAA0C,UAAU,KAAK,sCAAsC,KAAK,2CAA2C,eAAe,MAAM,OAAO,oBAAoB,OAAO,mCAAmC,EAAE,4CAA4C,mCAAmC,EAAE,gDAAgD,oBAAoB,EAAE,2CAA2C,uBAAuB,EAAE,iDAAiD,sDAAsD,EAAE,oDAAoD,sDAAsD,EAAE,mDAAmD,6BAA6B,EAAE,0DAA0D,8BAA8B,EAAE,sDAAsD,6BAA6B,EAAE,6DAA6D,8BAA8B,EAAE,kDAAkD,uBAAuB,SAAS,8BAA8B,gCAAgC,uBAAuB,SAAS,uBAAuB,SAAS,sCAAsC,SAAS,KAAK,UAAU,EAAE,4CAA4C,0CAA0C,gCAAgC,KAAK,2CAA2C,EAAE,8CAA8C,wBAAwB,yBAAyB,uBAAuB,wBAAwB,yBAAyB,0BAA0B,wBAAwB,yBAAyB,4BAA4B,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,WAAW,wDAAwD,EAAE,mDAAmD,gCAAgC,EAAE,mDAAmD,kBAAkB,2BAA2B,wBAAwB,2BAA2B,0CAA0C,kEAAkE,gDAAgD,iEAAiE,sBAAsB,uBAAuB,8CAA8C,KAAK,+CAA+C,4BAA4B,8CAA8C,0FAA0F,mEAAmE,wBAAwB,yBAAyB,uBAAuB,wBAAwB,yBAAyB,0BAA0B,wBAAwB,yBAAyB,4BAA4B,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,aAAa,cAAc,WAAW,qCAAqC,WAAW,wDAAwD,EAAE,8CAA8C,mBAAmB,gCAAgC,uBAAuB,2BAA2B,0CAA0C,2EAA2E,gCAAgC,gDAAgD,0BAA0B,KAAK,gCAAgC,4CAA4C,uCAAuC,oEAAoE,KAAK,8CAA8C,sCAAsC,gBAAgB,gDAAgD,2BAA2B,sBAAsB,uBAAuB,yCAAyC,KAAK,0CAA0C,4BAA4B,yCAAyC,4BAA4B,aAAa,qCAAqC,mEAAmE,8CAA8C,yCAAyC,gDAAgD,wCAAwC,0DAA0D,cAAc,4CAA4C,oCAAoC,uBAAuB,6BAA6B,uBAAuB,4BAA4B,WAAW,EAAE,iDAAiD,sDAAsD,EAAE,yCAAyC,uDAAuD,EAAE,8CAA8C,4EAA4E,EAAE,6CAA6C,4EAA4E,EAAE,8CAA8C,4EAA4E,EAAE,sDAAsD,YAAY,eAAe,YAAY,KAAK,kBAAkB,eAAe,oBAAoB,4EAA4E,KAAK,oDAAoD,EAAE,uDAAuD,YAAY,eAAe,YAAY,KAAK,oBAAoB,eAAe,kBAAkB,6EAA6E,KAAK,gEAAgE,EAAE,+DAA+D,YAAY,eAAe,YAAY,KAAK,oBAAoB,eAAe,kBAAkB,8EAA8E,qBAAqB,uCAAuC,KAAK,sDAAsD,EAAE,eAAe,0BAA0B,UAAU,0BAA0B,qCAAqC,2BAA2B,wDAAwD,2DAA2D,0BAA0B,eAAe,4BAA4B,0BAA0B,cAAc,yBAAyB,yBAAyB,kBAAkB,SAAS,0BAA0B,wBAAwB,cAAc,oBAAoB,oBAAoB,gBAAgB,2CAA2C,kCAAkC,oBAAoB,SAAS,0BAA0B,wBAAwB,cAAc,oBAAoB,oBAAoB,gBAAgB,8BAA8B,uBAAuB,mBAAmB,SAAS,2DAA2D,4BAA4B,SAAS,6CAA6C,4BAA4B,SAAS,KAAK,4BAA4B,SAAS,8BAA8B,qCAAqC,iCAAiC,aAAa,0CAA0C,oCAAoC,sCAAsC,iDAAiD,oBAAoB,UAAU,qBAAqB,SAAS,MAAM,oBAAoB,qBAAqB,UAAU,MAAM,oBAAoB,qBAAqB,UAAU,MAAM,oBAAoB,qBAAqB,uBAAuB,oBAAoB,6BAA6B,oBAAoB,sBAAsB,mBAAmB,KAAK,iBAAiB,WAAW,WAAW,uBAAuB,SAAS,gBAAgB,iBAAiB,0BAA0B,cAAc,gBAAgB,YAAY,aAAa,SAAS,4BAA4B,MAAM,aAAa,iBAAiB,mBAAmB,iBAAiB,kBAAkB,iBAAiB,KAAK,oBAAoB,OAAO,SAAS,SAAS,6BAA6B,cAAc,+BAA+B,QAAQ,4BAA4B,SAAS,SAAS,0BAA0B,sBAAsB,0CAA0C,6BAA6B,2BAA2B,MAAM,2BAA2B,wBAAwB,UAAU,8CAA8C,aAAa,uCAAuC,oBAAoB,qBAAqB,2CAA2C,uBAAuB,gDAAgD,MAAM,aAAa,iBAAiB,iBAAiB,kBAAkB,iBAAiB,4BAA4B,wCAAwC,0BAA0B,UAAU,gCAAgC,OAAO,cAAc,YAAY,QAAQ,0BAA0B,6BAA6B,KAAK,qBAAqB,SAAS,WAAW,KAAK,cAAc,qBAAqB,eAAe,oBAAoB,YAAY,8BAA8B,SAAS,iBAAiB,mCAAmC,wBAAwB,iBAAiB,iBAAiB,aAAa,QAAQ,6BAA6B,6CAA6C,SAAS,kBAAkB,UAAU,kBAAkB,IAAI,MAAM,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,KAAK,gBAAgB,IAAI,KAAK,SAAS,uBAAuB,sBAAsB,+DAA+D,2BAA2B,MAAM,eAAe,KAAK,mBAAmB,UAAU,KAAK,WAAW,aAAa,WAAW,2BAA2B,YAAY,SAAS,mBAAmB,yBAAyB,WAAW,0BAA0B,iBAAiB,mBAAmB,kBAAkB,oDAAoD,eAAe,KAAK,KAAK,yBAAyB,mBAAmB,WAAW,KAAK,WAAW,QAAQ,gBAAgB,WAAW,UAAU,0BAA0B,WAAW,6BAA6B,eAAe,MAAM,OAAO,iBAAiB,mBAAmB,iBAAiB,kBAAkB,eAAe,SAAS,KAAK,6BAA6B,oBAAoB,yCAAyC,cAAc,UAAU,uBAAuB,mCAAmC,WAAW,gBAAgB,iBAAiB,YAAY,eAAe,OAAO,gBAAgB,WAAW,iBAAiB,YAAY,UAAU,KAAK,UAAU,aAAa,QAAQ,iBAAiB,YAAY,OAAO,aAAa,yBAAyB,qBAAqB,MAAM,UAAU,4BAA4B,2BAA2B,UAAU,UAAU,oBAAoB,QAAQ,MAAM,oCAAoC,MAAM,UAAU,0CAA0C,wBAAwB,iBAAiB,gBAAgB,oBAAoB,QAAQ,QAAQ,KAAK,6BAA6B,yDAAyD,eAAe,cAAc,0CAA0C,MAAM,UAAU,4BAA4B,eAAe,kBAAkB,kBAAkB,cAAc,wBAAwB,0BAA0B,OAAO,mBAAmB,6BAA6B,kCAAkC,UAAU,mBAAmB,mBAAmB,KAAK,aAAa,aAAa,WAAW,eAAe,gBAAgB,iDAAiD,kDAAkD,mCAAmC,iBAAiB,sBAAsB,WAAW,aAAa,+BAA+B,aAAa,wBAAwB,cAAc,4DAA4D,mCAAmC,iBAAiB,aAAa,8BAA8B,YAAY,kBAAkB,qCAAqC,OAAO,UAAU,2BAA2B,mCAAmC,kBAAkB,YAAY,8BAA8B,yDAAyD,SAAS,oBAAoB,SAAS,qBAAqB,sDAAsD,cAAc,oBAAoB,SAAS,oBAAoB,0BAA0B,uBAAuB,kBAAkB,eAAe,qBAAqB,cAAc,eAAe,mCAAmC,iCAAiC,iCAAiC,+BAA+B,+BAA+B,uBAAuB,qBAAqB,cAAc,qBAAqB,UAAU,oBAAoB,sBAAsB,kCAAkC,4BAA4B,wBAAwB,uBAAuB,SAAS,qBAAqB,uBAAuB,qBAAqB,uBAAuB,eAAe,wBAAwB,YAAY,8BAA8B,0BAA0B,2DAA2D,SAAS,uBAAuB,YAAY,YAAY,eAAe,SAAS,uBAAuB,+BAA+B,YAAY,WAAW,KAAK,iBAAiB,sEAAsE,aAAa,qCAAqC,kBAAkB,WAAW,UAAU,UAAU,wBAAwB,4CAA4C,wBAAwB,cAAc,eAAe,0BAA0B,kBAAkB,eAAe,yCAAyC,uCAAuC,uCAAuC,qCAAqC,qCAAqC,qBAAqB,qCAAqC,qBAAqB,2CAA2C,oDAAoD,YAAY,cAAc,cAAc,8BAA8B,KAAK,QAAQ,KAAK,MAAM,mBAAmB,0BAA0B,MAAM,sCAAsC,yBAAyB,qBAAqB,sCAAsC,wCAAwC,8CAA8C,oCAAoC,4CAA4C,4CAA4C,0CAA0C,0CAA0C,oCAAoC,8CAA8C,0CAA0C,0CAA0C,0CAA0C,sCAAsC,gCAAgC,yCAAyC,qCAAqC,+BAA+B,2CAA2C,2CAA2C,+BAA+B,2CAA2C,uBAAuB,sBAAsB,2BAA2B,gBAAgB,gBAAgB,yBAAyB,sCAAsC,YAAY,WAAW,KAAK,iBAAiB,QAAQ,8CAA8C,SAAS,QAAQ,YAAY,kBAAkB,qBAAqB,IAAI,KAAK,QAAQ,8BAA8B,qBAAqB,uCAAuC,yBAAyB,gDAAgD,oBAAoB,qBAAqB,kDAAkD,cAAc,yBAAyB,4CAA4C,SAAS,aAAa,4BAA4B,eAAe,iCAAiC,WAAW,wBAAwB,iBAAiB,gCAAgC,WAAW,uBAAuB,gBAAgB,yCAAyC,yBAAyB,qBAAqB,kCAAkC,qBAAqB,oBAAoB,2CAA2C,kBAAkB,kCAAkC,sBAAsB,aAAa,oCAAoC,2BAA2B,iCAAiC,2BAA2B,mDAAmD,uBAAuB,mCAAmC,WAAW,gBAAgB,iBAAiB,YAAY,eAAe,OAAO,gBAAgB,WAAW,iBAAiB,YAAY,UAAU,KAAK,UAAU,aAAa,QAAQ,iBAAiB,YAAY,OAAO,aAAa,gBAAgB,8BAA8B,MAAM,UAAU,4CAA4C,4CAA4C,qCAAqC,4CAA4C,8CAA8C,wCAAwC,yCAAyC,oCAAoC,aAAa,mBAAmB,8BAA8B,QAAQ,mBAAmB,eAAe,KAAK,MAAM,kCAAkC,qCAAqC,0BAA0B,+BAA+B,0BAA0B,6BAA6B,0CAA0C,6BAA6B,oDAAoD,6BAA6B,6BAA6B,2BAA2B,qBAAqB,8BAA8B,qBAAqB,8BAA8B,qBAAqB,8BAA8B,qBAAqB,aAAa,SAAS,oCAAoC,6CAA6C,0BAA0B,sBAAsB,0BAA0B,0BAA0B,mBAAmB,gCAAgC,qBAAqB,WAAW,kDAAkD,sBAAsB,0BAA0B,4BAA4B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,kDAAkD,wBAAwB,iCAAiC,YAAY,gBAAgB,+BAA+B,cAAc,WAAW,oCAAoC,cAAc,WAAW,qDAAqD,kCAAkC,qCAAqC,4BAA4B,GAAG,eAAe,IAAI,sBAAsB,6CAA6C,0DAA0D,8CAA8C,yEAAyE,8CAA8C,iDAAiD,6BAA6B,KAAK,uCAAuC,oDAAoD,6BAA6B,0CAA0C,kBAAkB,4DAA4D,IAAI,4BAA4B,uBAAuB,wDAAwD,mBAAmB,+BAA+B,4CAA4C,oBAAoB,0BAA0B,qBAAqB,2CAA2C,4CAA4C,yDAAyD,2DAA2D,qGAAqG,4FAA4F,cAAc,oBAAoB,uBAAuB,eAAe,YAAY,MAAM,KAAK,cAAc,iFAAiF,MAAM,YAAY,SAAS,OAAO,mEAAmE,MAAM,aAAa,uCAAuC,yBAAyB,IAAI,qCAAqC,UAAU,SAAS,4BAA4B,OAAO,mCAAmC,6BAA6B,OAAO,KAAK,qFAAqF,SAAS,QAAQ,kBAAkB,mBAAmB,+BAA+B,uDAAuD,sBAAsB,OAAO,SAAS,4BAA4B,8BAA8B,iBAAiB,8BAA8B,yBAAyB,gBAAgB,oBAAoB,UAAU,gDAAgD,4EAA4E,kCAAkC,yBAAyB,UAAU,wBAAwB,kCAAkC,uBAAuB,uBAAuB,wBAAwB,KAAK,QAAQ,KAAK,KAAK,SAAS,6BAA6B,sBAAsB,4BAA4B,OAAO,WAAW,kBAAkB,yBAAyB,cAAc,wBAAwB,8CAA8C,wBAAwB,GAAG,iBAAiB,uBAAuB,wBAAwB,OAAO,wDAAwD,aAAa,6BAA6B,gCAAgC,qBAAqB,SAAS,mBAAmB,sBAAsB,WAAW,aAAa,yGAAyG,sCAAsC,mCAAmC,sBAAsB,8EAA8E,kCAAkC,2BAA2B,sBAAsB,2BAA2B,mBAAmB,MAAM,8BAA8B,0BAA0B,cAAc,6CAA6C,mBAAmB,mBAAmB,iCAAiC,2CAA2C,GAAG,yBAAyB,mCAAmC,iCAAiC,yBAAyB,SAAS,SAAS,wBAAwB,yCAAyC,WAAW,EAAE,8BAA8B,QAAQ,0DAA0D,2CAA2C,qBAAqB,EAAE,4BAA4B,wBAAwB,qBAAqB,iBAAiB,gCAAgC,mBAAmB,6BAA6B,yBAAyB,sBAAsB,EAAE,SAAgC;;;;;;;;;;;;ACjCv56B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAAyB,gBAAgB;AACzC;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,YAAY;AAClD;AACA;AACA,MAAK;AACL;AACA,wCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAoD;AACpD,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA8C,YAAY;AAC1D;AACA;AACA,sBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA6C,YAAY;AACzD;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAsD;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,0BAA0B;AACpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAqB,cAAc;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAqB,eAAe;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,0BAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,6CAA4C,mBAAmB;AAC/D;AACA;AACA,0CAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf,eAAc;AACd,eAAc;AACd,iBAAgB;AAChB,iBAAgB;AAChB,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP,sBAAqB;AACrB;;AAEA;AACA;AACA,MAAK;AACL,kBAAiB;;AAEjB;AACA,mDAAkD,EAAE,iBAAiB;;AAErE;AACA,yBAAwB,8BAA8B;AACtD,4BAA2B;;AAE3B;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAkD,iBAAiB;;AAEnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,EAAC","file":"ccBooleanAnalysis.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7fdde3fd70d35de23c90","//    ccBooleanAnalysis 0.1.0\n//    ccBooleanAnalysis may be distributed ____\n//    http://future.com\n\n/*global module: true, exports: true, console: true */\n// (function (root) {\n  // 'use strict';\n  /* External Modules */\n  /*jshint esversion: 6 */\n\n  var jsep = require('jsep');\n  var Queue = require('./queue.js').Queue;\n  var Logic = require('logic-solver');\n\n  /* Module setup */\n  const ccBooleanAnalysis = () => {};\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////            Constants\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  ccBooleanAnalysis._constants = {\n    kNOT: '~',\n    kAND: '*',\n    kOR: '+',\n    kBinaryExpression: \"BinaryExpression\",\n    kUnaryExpression: \"UnaryExpression\",\n    kIdentifier: \"Identifier\"\n  };\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////      Parse Boolean Tree\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  ccBooleanAnalysis.getParseTree = s => {\n    // unaryOps are broken in Jsep.\n    // Instead, we conver to the single unaryOp\n    // that currently works.\n    // https://github.com/soney/jsep/issues/43\n    let find = 'NOT';\n    let re = new RegExp(find, 'g');\n    s = s.replace(re, '~');\n\n    find = 'AND';\n    re = new RegExp(find, 'g');\n    s = s.replace(re, '*');\n\n    find = 'OR';\n    re = new RegExp(find, 'g');\n    s = s.replace(re, '+');\n\n    return jsep(s);\n  };\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////        Boolean Equivalence\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  /**\n   * @method ccBooleanAnalysis.getDNFObjectEncoding\n   * @param {string} s A string representing the boolean expression that should be transformed.\n   * @return {object} A hashtable representing the expression in DNF form. Useful for various functions in our library.\n   */\n   ccBooleanAnalysis.getDNFObjectEncoding = function(s) {\n     const iterateAndTree = (positive_holder, negative_holder, parse_tree) => {\n       if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n         positive_holder.data.push(parse_tree.name);\n       } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n         negative_holder.data.push(parse_tree.argument.name);\n       } else {\n        iterateAndTree(positive_holder, negative_holder, parse_tree.left);\n        iterateAndTree(positive_holder, negative_holder, parse_tree.right);\n       }\n     };\n\n     const iterateOrTree = (conjuctions, parse_tree) => {\n       if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n         conjuctions.data.push([[parse_tree.name], []]);\n       } else if (parse_tree.operator == ccBooleanAnalysis._constants.kAND) {\n         const and_positive_holder = {data: []};\n         const and_negative_holder = {data: []};\n         iterateAndTree(and_positive_holder, and_negative_holder, parse_tree);\n\n         and_positive_holder.data = and_positive_holder.data.filter(ccBooleanAnalysis._uniqueFilter).sort();\n         and_negative_holder.data = and_negative_holder.data.filter(ccBooleanAnalysis._uniqueFilter).sort();\n\n         // if you have a term in both pos and neg,\n         // then the expresion evaluates to \"false.\"\n         // Since (false OR X) == X,\n         // we don't have to add \"false\" to the set of conjuctions..\n         if (!(ccBooleanAnalysis._shares_term(and_positive_holder.data, and_negative_holder.data))) {\n           conjuctions.data.push([and_positive_holder.data, and_negative_holder.data]);\n         }\n       } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n         conjuctions.data.push([[], [parse_tree.argument.name]]);\n       } else { // kOR\n         iterateOrTree(conjuctions, parse_tree.left);\n         iterateOrTree(conjuctions, parse_tree.right);\n       }\n     };\n\n     // Convert parse tree format to DNF\n     const parse_tree = this.getParseTree(s);\n     this._convertToNegationForm(parse_tree);\n     this._pushDownAnds(parse_tree);\n\n     // Main Logic\n     let conjuctions = {data: []};\n     iterateOrTree(conjuctions, parse_tree);\n\n     for (var i = 0; i < conjuctions.data.length; i++) {\n       let conjuction_a = conjuctions.data[i];\n\n       // If a conjuction is a subpart of another one (considering negations),\n       // then discard the larger one.\n       for (let j = i + 1; j < conjuctions.data.length; j++) {\n         let conjuction_b = conjuctions.data[j];\n         const subset = [ccBooleanAnalysis._is_subset(conjuction_a[0], conjuction_b[0]), ccBooleanAnalysis._is_subset(conjuction_a[1], conjuction_b[1])];\n         if (subset[0] == 2 && subset[1] == 2) {\n           // throw away conjuction_a\n           conjuctions.data.splice(i, 1);\n           i--; j--;\n           break; // start over the j's on the next i.\n         } else if (subset[0] == 1 && subset[1] == 1) {\n           // throw away conjuction_b\n           conjuctions.data.splice(j, 1);\n           j--;\n         }\n       }\n     }\n\n     const conjuctions_hashtable = {};\n     for (let i = 0; i < conjuctions.data.length; i++) {\n       const conjuction = conjuctions.data[i];\n       const key = this._get_union(conjuction[0], conjuction[1]).join('');\n\n       let no_collision = true;\n       if (key in conjuctions_hashtable) {\n         const collisions = conjuctions_hashtable[key];\n         for (let j = 0; j < collisions.length; j++) {\n           const collision = collisions[j];\n\n           // heuristic to avoid taking intersection in every case\n           const collision_has_neg = ((collision[0].length == conjuction[0].length - 1) && (collision[1].length == conjuction[1].length + 1));\n           const conjuction_has_neg = ((collision[0].length == conjuction[0].length + 1) && (collision[1].length == conjuction[1].length - 1));\n           let conjuction_a, conjuction_b;\n           if (collision_has_neg || conjuction_has_neg) {\n             if (collision_has_neg) {\n               conjuction_a = conjuction.slice();\n               conjuction_b = collision.slice();\n             } else {\n               conjuction_a = collision.slice();\n               conjuction_b = conjuction.slice();\n             }\n\n             // get and remove this intersection\n             const intersection = [this._remove_intersection(conjuction_a[0], conjuction_b[0]), this._remove_intersection(conjuction_a[1],   conjuction_b[1])];\n\n             // confirm that the only difference is a term switched from pos to neg\n             if (conjuction_a[0].length == 1 && conjuction_a[1].length === 0 && conjuction_b[1].length == 1 && conjuction_b[0].length === 0 &&   conjuction_a[0][0] ==  conjuction_b[1][0]) {\n               no_collision = false; // mark that we've had a collision\n\n               // remove the collision\n               conjuctions_hashtable[key].splice(j, 1);\n               j--;\n\n               const new_key = this._get_union(intersection[0], intersection[1]).join('');\n               if (new_key in conjuctions_hashtable) {\n                 conjuctions_hashtable[new_key].push(intersection);\n               } else {\n                 conjuctions_hashtable[new_key] = [intersection];\n               }\n             }\n           }\n         }\n       }\n       if (no_collision) {\n         if (!(key in conjuctions_hashtable)) {\n           conjuctions_hashtable[key] = [conjuction];\n         } else {\n           conjuctions_hashtable[key].push(conjuction);\n         }\n\n       }\n     }\n\n     return conjuctions_hashtable;\n   };\n\n  /**\n   * @method ccBooleanAnalysis.getDNFStringEncoding\n   * @param {string} s A string representing the boolean expression that should be transformed.\n   * @return {string} A string encoding of the boolean expression in DNF.\n   */\n   ccBooleanAnalysis.getDNFStringEncoding = function(s) {\n     const conjuctions_hashtable = this.getDNFObjectEncoding(s);\n\n     const final_conjuctions = [];\n     for (const key of conjuctions_hashtable) {\n       const conjuctions = conjuctions_hashtable[key];\n\n       for (const conjuction of conjuctions) {\n         final_conjuctions.push(`${conjuction[0].join('%')}~${conjuction[1].join('%')}`);\n       }\n     }\n\n     return final_conjuctions.sort().join('|');\n   };\n\n   /**\n    * @method ccBooleanAnalysis.compareBooleans\n    * @param {string} s1 The first boolean expression to be compared.\n    * @param {string} s2 The second boolean expression to be compared.\n    * @return {string} A string encoding of the boolean expression in DNF.\n    */\n   ccBooleanAnalysis.compareBooleans = function(s1, s2) {\n     const encoding1 = this.getDNFStringEncoding(s1);\n     const encoding2 = this.getDNFStringEncoding(s2);\n\n     return encoding1 == encoding2;\n   };\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////        Graph Manipulation\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   /**\n    * @method ccBooleanAnalysis._getGraph\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @param {boolean} label_pos_neg True if graph terms contain pos/neg indicators. False otherwise.\n    * @return {obj} Javascript object representing the graph.\n    */\n   ccBooleanAnalysis._getGraph = function(equations, label_pos_neg) {\n     const graph = {\n       data: {}\n     };\n\n     // Generate parse trees for each expression\n     // Seperate each side of the equation\n     for (const equation of equations) {\n       const sides = equation.split('=');\n\n       // remove white space\n       const lhs = sides[0].split(' ').join('');\n       const expression = sides[1];\n       const parse_tree = this.getParseTree(expression);\n\n       // Sort the terms\n       const terms = {\n         data: []\n       };\n\n       this._convertToNegationForm(parse_tree);\n       this._sortTerms(parse_tree, terms, label_pos_neg);\n\n       // Here, we disregard whether a term is positive or negative\n       // Annotate all terms on the graph\n       for (const term of terms.data) {\n         if (label_pos_neg) {\n           const term_comps = term.split('___');\n           const term_name = term_comps[0];\n           const term_type = term_comps[1]; // pos or neg\n\n           if (!(graph.data[term_name])) {\n             graph.data[term_name] = [];\n           }\n           const resulting_term = `${lhs}___${term_type}`;\n           graph.data[term_name].push(resulting_term);\n         } else {\n           if (!(graph.data[term])) {\n             graph.data[term] = [];\n           }\n           graph.data[term].push(lhs);\n         }\n       }\n     }\n\n     return graph;\n   };\n\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////        Feedback Loops\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  // Common method to find cycles.\n  // Used for feedback loops and functional circuits.\n  // Example of two embedded loops:\n  // feedbackLoops(['A=D', 'B=A AND E', 'C=B', 'D=C','E=A'])\n  // Returns:\n  // [[\"A\", \"B\", \"C\", \"D\", \"A\"], [\"A\", \"E\", \"B\", \"C\", \"D\", \"A\"]]\n  const _findCycles = (\n    graph,\n    cycles,\n    cur_node,\n    stack,\n    in_progress,\n    visited,\n    global_visited,\n    find_parities) => {\n    in_progress[cur_node] = true;\n    stack.push(cur_node);\n\n    const cur_node_comps = cur_node.split('___');\n    const cur_node_name = cur_node_comps[0];\n    const cur_node_type = cur_node_comps[1]; // pos or neg\n\n    const neighbors = graph.data[cur_node_name];\n\n    for (const neighbor of neighbors) {\n      const neighbor_comps = neighbor.split('___');\n      const neighbor_name = neighbor_comps[0];\n      const neighbor_type = neighbor_comps[1]; // pos or neg\n\n      // If there are no incoming nodes to this neighbor, we ignore it.\n      if (!(neighbor_name in graph.data)) {\n        continue;\n      } else if (in_progress[neighbor]) {\n        let cycle = [neighbor_name];\n        let parity = 0;\n        for (let j = stack.length - 1; j >= 0; j--) {\n          const stack_item_comps = stack[j].split('___');\n          const stack_item_name = stack_item_comps[0];\n          const stack_item_type = stack_item_comps[1]; // pos or neg\n\n          if (stack_item_type == 'neg') {\n            parity += 1;\n          }\n          cycle.push(stack_item_name);\n          if (stack[j] == neighbor) {\n            break;\n          }\n        }\n        parity = parity % 2;\n\n        // determine parity\n        if (find_parities) {\n          cycles.data.push({\n            cycle: cycle.reverse(),\n            type: parity\n          });\n        } else {\n          cycles.data.push(cycle.reverse());\n        }\n      } else if (!(visited[neighbor])) {\n        const visited_clone = ccBooleanAnalysis._clone(visited);\n        const in_progress_clone = ccBooleanAnalysis._clone(in_progress);\n        const stack_clone = stack.slice(0);\n        _findCycles(graph, cycles, neighbor, stack_clone, in_progress_clone, visited_clone, global_visited, find_parities);\n      }\n    }\n\n    in_progress[cur_node] = false;\n    global_visited.data[cur_node_name] = true;\n    visited[cur_node] = true;\n  };\n\n  // Essentially a wrapper for _findCycles.\n  // Creates graph from equations and prepares data structures.\n  var _feedbackLoopsCommon = function(equations, find_parities) {\n    var graph = ccBooleanAnalysis._getGraph(equations, find_parities);\n\n    // Find all cycles in the graph\n    var cycles = {\n      data: []\n    };\n\n    var global_visited = {\n      data: {}\n    };\n\n    var has_incoming = Object.keys(graph.data);\n    for (var i = 0; i < has_incoming.length; i++) {\n      var node = has_incoming[i];\n      if (!(global_visited.data[node])) {\n        _findCycles(graph, cycles, node, [], {}, {}, global_visited, find_parities);\n      }\n    }\n    return cycles.data;\n  };\n\n  /**\n   * @method ccBooleanAnalysis.feedbackLoops\n   * @param {array[string]} equations Array of strings with boolean equations.\n   * @return {array[string]} Array containing the feedback loops.\n   */\n   ccBooleanAnalysis.feedbackLoops = equations => _feedbackLoopsCommon(equations, false);\n\n  /**\n   * @method ccBooleanAnalysis.functionalCircuits\n   * @param {array[string]} equations Array of strings with boolean equations.\n   * @return {array[string]} Array containing the functional circuits.\n   */\n   ccBooleanAnalysis.functionalCircuits = equations => _feedbackLoopsCommon(equations, true);\n   ccBooleanAnalysis.functionalCircuits = equations => _feedbackLoopsCommon(equations, true);\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////        Distances\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  /**\n   * @method ccBooleanAnalysis.distances\n   * @param {array[string]} equations Array of strings with boolean equations.\n   * @return {obj} Javascript object where obj[a][b] represents dist(a,b).\n   */\n   ccBooleanAnalysis.distances = function(equations) {\n     // Perform a breadth-first search beginning from each node.\n     const distances = {}; // dictionary of dictionaries\n     const graph = this._getGraph(equations);\n\n     const has_outgoing = Object.keys(graph.data);\n     let neighbor;\n\n     for (const root_node of has_outgoing) {\n       const visited = [];\n       const dist = 0;\n       const queue = new Queue();\n\n       distances[root_node] = {};\n       let neighbors = graph.data[root_node];\n       for (var j = 0; j < neighbors.length; j++) {\n         neighbor = neighbors[j];\n         distances[root_node][neighbor] = 1;\n         queue.enqueue(neighbor);\n       }\n\n       while(!(queue.isEmpty())) {\n         let current = queue.dequeue();\n         if (!(distances[current])) {\n           distances[current] = {};\n         }\n\n         if (current in graph.data) {\n           neighbors = graph.data[current];\n           for (let j = 0; j < neighbors.length; j++) {\n             neighbor = neighbors[j];\n             if (!(neighbor in distances[root_node]) || (distances[root_node][neighbor] > distances[root_node][current] + 1)) {\n               distances[root_node][neighbor] = distances[root_node][current] + 1;\n               queue.enqueue(neighbor);\n             }\n             distances[current][neighbor] = 1;\n           }\n         }\n       }\n     }\n     return distances;\n   };\n\n  /**\n   * @method ccBooleanAnalysis.averageDistance\n   * @param {array[string]} equations Array of strings with boolean equations.\n   * @return {float} The average distance between nodes.\n   */\n   ccBooleanAnalysis.averageDistance = function(equations) {\n     const distances = this.distances(equations);\n     const nodes = Object.keys(distances);\n\n     let total_distance = 0;\n     let node_count = 0;\n     for (let i = 0; i < nodes.length; i++) {\n       const node1 = nodes[i];\n       for (let j = i + 1; j < nodes.length; j++) {\n         const node2 = nodes[j];\n         total_distance += distances[node1][node2];\n         node_count += 1;\n       }\n     }\n     return total_distance / node_count;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.connectivity\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[a][b] is true if a and b are connected. False otherwise.\n    */\n   ccBooleanAnalysis.connectivity = function(equations) {\n     const distances = this.distances(equations);\n     const nodes = Object.keys(distances);\n\n     const connectivity = {};\n\n     for (const node1 of nodes) {\n       connectivity[node1] = {};\n\n       for (const node2 of nodes) {\n         // is node1 connected to node2? (1 -> 2)\n         const connected = (node2 in distances[node1]);\n         connectivity[node1][node2] = connected;\n       }\n     }\n\n     return connectivity;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.connectivityInDegree\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[a] is the in-degree of node a.\n    */\n   ccBooleanAnalysis.connectivityInDegree = function(equations) {\n     const distances = this.distances(equations);\n     const nodes = Object.keys(distances);\n\n     const connectivity = {};\n\n     for (const node1 of nodes) {\n       connectivity[node1] = 0;\n\n       for (const node2 of nodes) {\n         // is node1 connected to node2? (1 -> 2)\n         const connected = (node2 in distances[node1]);\n         if (connected) {\n           connectivity[node1] += 1;\n         }\n       }\n     }\n\n     return connectivity;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.connectivityOutDegree\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[a] is the out-degree of node a.\n    */\n   ccBooleanAnalysis.connectivityOutDegree = function(equations) {\n     const distances = this.distances(equations);\n     const nodes = Object.keys(distances);\n\n     const connectivity = {};\n\n     // initialize connectivity matrix\n     for (var i = 0; i < nodes.length; i++) {\n       const node = nodes[i];\n       connectivity[node] = 0;\n     }\n\n     // compute degrees\n     for (let i = 0; i < nodes.length; i++) {\n       const node1 = nodes[i];\n\n       for (const node2 of nodes) {\n         // is node1 connected to node2? (1 -> 2)\n         const connected = (node2 in distances[node1]);\n         if (connected) {\n           connectivity[node2] += 1;\n         }\n       }\n     }\n     return connectivity;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.connectivityDegree\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[a] is the degree (in-degree + out-degree) of node a.\n    */\n   ccBooleanAnalysis.connectivityDegree = function(equations) {\n     const distances = this.distances(equations);\n     const nodes = Object.keys(distances);\n\n     const connectivity = {};\n\n     // initialize connectivity matrix\n     for (var i = 0; i < nodes.length; i++) {\n       const node = nodes[i];\n       connectivity[node] = 0;\n     }\n\n     for (let i = 0; i < nodes.length; i++) {\n       const node1 = nodes[i];\n\n       for (const node2 of nodes) {\n         // is node1 connected to node2? (1 -> 2)\n         const connected = (node2 in distances[node1]);\n         if (connected) {\n           connectivity[node1] += 1;\n           connectivity[node2] += 1;\n         }\n       }\n     }\n     return connectivity;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.connectivityDistributionGraph\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object with keys inDegree, outDegree, and degree, following same format\n    * as those respective functions in ccBooleanAnalysis library.\n    */\n   ccBooleanAnalysis.connectivityDistributionGraph = equations => ({\n     'inDegree': ccBooleanAnalysis.connectivityInDegree(equations),\n     'outDegree': ccBooleanAnalysis.connectivityOutDegree(equations),\n     'degree': ccBooleanAnalysis.connectivityDegree(equations)\n   });\n\n   /**\n    * @method ccBooleanAnalysis.averageDistance\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[node] = average connectivity of the node.\n    */\n   ccBooleanAnalysis.averageConnectivity = function(equations) {\n     const connectivity = this.connectivity(equations);\n\n     const averageConnectivity = {};\n     for (const source in connectivity) {\n       let connected_targets = 0;\n       let total_targets = 0;\n       for (const target in connectivity[source]) {\n         total_targets += 1;\n         if (connectivity[source][target]) {\n           connected_targets += 1;\n         }\n       }\n       averageConnectivity[source] = connected_targets / total_targets;\n     }\n     return averageConnectivity;\n   };\n\n   /**\n    * @method ccBooleanAnalysis.diameter\n    * @param {array[string]} equations Array of strings with boolean equations.\n    * @return {obj} Javascript object where obj[a][b] is True if a and b are connected. False otherwise.\n    */\n   ccBooleanAnalysis.diameter = function(equations) {\n     const distances = this.distances(equations);\n     let diameter = 0;\n     for (let source in distances) {\n       for (let target in distances[source]) {\n         const distance = distances[source][target];\n         if (distance > diameter) {\n           diameter = distance;\n         }\n       }\n     }\n     return diameter;\n   };\n\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n  ////     Biological Regulators\n  ////\n  ////////////////////////////////////////\n  ////////////////////////////////////////\n\n  /*\n   * Accepts a parse_tree created using jsep library.\n   * http://jsep.from.so/\n   *\n   * Vanilla conversion algorithm:\n   * 1) Convert to negation normal form\n   *    a) ~(A or B) --> ~A and ~B\n   *    b) ~(A and B) --> ~A or ~B\n   *    c) ~(~A) --> A\n   *\n   * 2) Distribute AND over ORs.\n   *    - A and (B or C) --> (A and B) or (A and C)\n   *\n   * Recursively apply these techniques to reach DNF.\n   */\n   let getRegulators = parse_tree => {\n    // Tree traversal methods\n    let positive_holder, negative_holder;\n    const iterateAndTree = (positive_holder, negative_holder, parse_tree) => {\n      if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n        positive_holder.data.push(parse_tree.name);\n      } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n        negative_holder.data.push(parse_tree.argument.name);\n      } else {\n       iterateAndTree(positive_holder, negative_holder, parse_tree.left);\n       iterateAndTree(positive_holder, negative_holder, parse_tree.right);\n      }\n    };\n\n    const iterateOrTree = (positive_holder, negative_holder, parse_tree) => {\n      if (parse_tree.operator == ccBooleanAnalysis._constants.kAND) {\n        const and_positive_holder = {data: []};\n        const and_negative_holder = {data: []};\n        iterateAndTree(and_positive_holder, and_negative_holder, parse_tree);\n        let first_positive_name;\n\n        // Setup positive regulators\n        if (and_positive_holder.data.length > 0) {\n          first_positive_name = and_positive_holder.data[0];\n          if (!(first_positive_name in positive_holder.data)) {\n            positive_holder.data[first_positive_name] = {\n              component: first_positive_name,\n              type: true,\n              conditionRelation: true,\n              conditions: [],\n            };\n          }\n          const condition_components = [];\n          for (var i = 1; i < and_positive_holder.data.length; i++) {\n            condition_components.push(and_positive_holder.data[i]);\n          }\n          positive_holder.data[first_positive_name].conditions.push({\n            state: true, // active\n            type: true, // if/when\n            components: condition_components\n          });\n        }\n\n        // Setup negative regulators\n        for (let i = 0; i < and_negative_holder.data.length; i++) {\n          if (!(and_negative_holder.data[i] in negative_holder)) {\n            negative_holder.data[and_negative_holder.data[i]] = {\n              component: and_negative_holder.data[i],\n              type: false,\n              dominants: []\n            };\n          }\n          if (and_positive_holder.length > 0) {\n            negative_holder.data[and_negative_holder.data[i]].dominants.push(positive_holder.data[first_positive_name]);\n          }\n        }\n      } else if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n        // Add a positive regulator with no conditions\n        const positive_regulator_name = parse_tree.name;\n        if (!(positive_regulator_name in positive_holder.data)) {\n          positive_holder.data[positive_regulator_name] = {\n            component: positive_regulator_name,\n            type: true\n          };\n        }\n      } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n        // Add a negative regulator with no conditions\n        const negative_regulator_name = parse_tree.argument.name;\n        if (!(negative_regulator_name in negative_holder.data)) {\n          negative_holder.data[negative_regulator_name] = {\n            component: negative_regulator_name,\n            type: true\n          };\n        }\n      } else { // kOR\n        iterateOrTree(positive_holder, negative_holder, parse_tree.left);\n        iterateOrTree(positive_holder, negative_holder, parse_tree.right);\n      }\n    };\n\n    // Main Logic\n    positive_holder = {data: {}};\n    negative_holder = {data: {}};\n\n    iterateOrTree(positive_holder, negative_holder, parse_tree);\n\n    const regulators = [];\n    for (let key in positive_holder.data) {\n      regulators.push(positive_holder.data[key]);\n    }\n    for (let key in negative_holder.data) {\n      regulators.push(negative_holder.data[key]);\n    }\n\n    return regulators;\n  };\n\n   // Recursively finds all terms in a parse_tree\n   // and store them in a terms data structure,\n   // which should be structured as\n   // {'data': []}.\n   const _getTerms = (parse_tree, terms) => {\n     if (parse_tree.operator == ccBooleanAnalysis._constants.kAND || parse_tree.operator == ccBooleanAnalysis._constants.kOR) {\n       _getTerms(parse_tree.left, terms);\n       _getTerms(parse_tree.right, terms);\n     } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n       _getTerms(parse_tree.argument, terms);\n     } else if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n       terms.data.push(parse_tree.name);\n     }\n   };\n\n  /**\n   * @method ccBooleanAnalysis.getBiologicalConstructs\n   * @param {jsep} s A string (from a human) of the boolean expression.\n   * @return {obj} Javascript object representing the regulators. They are formatted as such:\n   *  {\n   *     regulators: [...],\n   *     absentState: true\n   *  }\n   *\n   * Each regulator is structured as follows:\n   *     \"component\" - name of the given component (name of the variable in parsed expression)\n   *     \"type\" - false (negative regulator), true (positive regulator) (not mandatory - false is default)\n   *     \"conditionRelation\" - false (or = independent), true (and = cooperative) (not mandatory - false is default)\n   *     \"conditions\" - array of condition objects (described bellow) is not mandatory if given regulator does not have any conditions\n   *     \"dominants\" - array of regulators that are dominant over this regulator, not mandatory\n   *     \"recessives\" - array of regulators that this regulator is dominant over, not mandatory\n   *\n   *     condition object contains following properties:\n   *     \"componentRelation\" - false (or = independent), true (and = cooperative), not mandatory - false is default\n   *     \"subConditionRelation\" - false (or = independent), true (and = cooperative), not mandatory - false is default\n   *     \"state\" - false (inactive), true (active), not mandatory - false is default\n   *     \"type\" - false (unless), true (if when), not mandatory - false is default\n   *     \"components\" - array of component names (variables in parsed expression), this should contain at least one component\n   *     \"conditions\" - array of subcondition objects (described bellow), not mandatory\n   *\n   *     subcondition object contains following properties:\n   *     \"componentRelation\" - false (or = independent), true (and = cooperative), not mandatory - false is default\n   *     \"state\" - false (inactive), true (active), not mandatory - false is default\n   *     \"type\" - false (unless), true (if when), not mandatory - false is default\n   *     \"components\" - array of component names (variables in parsed expression), this should contain at least one component\n   */\n   ccBooleanAnalysis.getBiologicalConstructs = function(s) {\n     // First, check for absent state\n     // If structure is A OR ~B:\n     //    get all terms in A\n     //    get all terms in B\n     // If the two arrays are the same:\n     //    then set parse tree = A and absentState = false\n     // Else:\n     //    then set parse tree = original parse tree, absentState = true\n\n     let pt = this.getParseTree(s);\n     let absentState = false, data_left, data_right;\n     if (pt.operator == ccBooleanAnalysis._constants.kOR && pt.right.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n       data_left = {'data': []};\n       data_right = {'data': []};\n\n       this._getTerms(pt.left, data_left);\n       this._getTerms(pt.right.argument, data_right);\n\n       const isSuperset = data_left.data.every(val => data_right.data.includes(val));\n\n       if (isSuperset) {\n         pt = pt.left;\n         absentState = true;\n       }\n     }\n\n     // Continue with whatever parse_tree and absentState we have\n     this._convertToNegationForm(pt);\n     this._pushDownAnds(pt);\n     const regulators = getRegulators(pt);\n     return {\n       regulators,\n       absentState\n     };\n   };\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////     Misc Helpers\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   // Clone a javascript object / dictionary\n   ccBooleanAnalysis._clone = item => {\n     if (!item) { return item; } // null, undefined values check\n\n     const types = [ Number, String, Boolean ];\n     let result;\n\n     // normalizing primitives if someone did new String('aaa'), or new Number('444');\n     types.forEach(type => {\n         if (item instanceof type) {\n             result = type( item );\n         }\n     });\n\n     if (typeof result == \"undefined\") {\n         if (Object.prototype.toString.call( item ) === \"[object Array]\") {\n             result = [];\n             item.forEach((child, index, array) => {\n                 result[index] = ccBooleanAnalysis._clone( child );\n             });\n         } else if (typeof item == \"object\") {\n             // testing that this is DOM\n             if (item.nodeType && typeof item.cloneNode == \"function\") {\n                 result = item.cloneNode( true );\n             } else if (!item.prototype) { // check that this is a literal\n                 if (item instanceof Date) {\n                     result = new Date(item);\n                 } else {\n                     // it is an object literal\n                     result = {};\n                     for (const i in item) {\n                         result[i] = ccBooleanAnalysis._clone( item[i] );\n                     }\n                 }\n             } else {\n                 // depending what you would like here,\n                 // just keep the reference, or create new object\n                 if (false && item.constructor) {\n                     // would not advice to do that, reason? Read below\n                     result = new item.constructor();\n                 } else {\n                     result = item;\n                 }\n             }\n         } else {\n             result = item;\n         }\n     }\n\n     return result;\n   };\n\n   // Get all values in a dictionary\n   ccBooleanAnalysis._getValues = dict => {\n     const array_values = [];\n     for (const key in dict) {\n       array_values.push(dict[key]);\n     }\n     return array_values;\n   };\n\n   // Get all values from a dictionary and flatten them\n   // Ex. {\n   //  'AB': [  [1], [2], [3]  ]\n   //  'C':  [  [4], [5] ]\n   // }\n   //\n   // Produces:\n   // [ [1], [2], [3], [4], [5] ]\n   //\n   // If _getValues was used, it would instead produce:\n   // [ [ [1],[2],[3] ], [ [4], [5] ] ]\n   //\n   //\n   ccBooleanAnalysis._getValuesFlattened = dict => {\n     const array_values = [];\n     for (const key in dict) {\n       const value_arr = dict[key];\n       for (let i = 0; i < value_arr.length; i++) {\n         array_values.push(value_arr[i]);\n       }\n     }\n     return array_values;\n   };\n\n   // Get all keys in a dictionary\n   ccBooleanAnalysis._getKeys = dict => {\n     const array_keys = [];\n     for (const key in dict) {\n       array_keys.push(key);\n     }\n     return array_keys;\n   };\n\n   // Return unique vlaues\n   // use as follows:\n   // data.filter(ccBooleanAnalysis._uniqueFilter)\n   ccBooleanAnalysis._uniqueFilter = (value, index, self) => self.indexOf(value) == index;\n\n   // Boolean\n   // do two arrays share a common term?\n   ccBooleanAnalysis._shares_term = (a, b) => {\n     let ai=0;\n     let bi=0;\n     const result = [];\n\n     while(ai < a.length && bi < b.length)\n     {\n        if      (a[ai] < b[bi]){ ai++; }\n        else if (a[ai] > b[bi]){ bi++; }\n        else /* they're equal */\n        {\n         return true;\n        }\n     }\n\n     return false;\n   };\n\n   // Removes shared variables from two arrays and returns them\n   // in a new array.\n   // Input must be sorted.\n   // Output is sorted.\n   ccBooleanAnalysis._remove_intersection = (a, b) => {\n     let ai=0;\n     let bi=0;\n     const result = [];\n\n     while(ai < a.length && bi < b.length)\n     {\n        if      (a[ai] < b[bi]){ ai++; }\n        else if (a[ai] > b[bi]){ bi++; }\n        else /* they're equal */\n        {\n          result.push(a[ai]);\n          a.splice(ai, 1);\n          b.splice(bi, 1);\n        }\n     }\n\n     return result;\n   };\n\n   // Returns the union of two arrays\n   // Input must be sorted.\n   // Output is sorted.\n   ccBooleanAnalysis._get_union = (a, b) => {\n     let ai=0;\n     let bi=0;\n     const result = [];\n\n     while(ai < a.length && bi < b.length)\n     {\n        if      (a[ai] < b[bi]){ result.push(a[ai]); ai++; }\n        else if (a[ai] > b[bi]){ result.push(b[bi]); bi++; }\n        else /* they're equal */\n        {\n          result.push(a[ai]);\n          ai++;\n          bi++;\n        }\n     }\n\n     while (ai < a.length)\n     {\n       result.push(a[ai]);\n       ai++;\n     }\n\n     while (bi < b.length)\n     {\n       result.push(b[bi]);\n       bi++;\n     }\n\n     return result;\n   };\n\n   // Find the intersection of two arrays without modifying\n   // those arrays.\n   // Input must be sorted.\n   // Output is sorted.\n   ccBooleanAnalysis._get_intersection = (a, b) => {\n     let ai=0;\n     let bi=0;\n     const result = [];\n\n     while(ai < a.length && bi < b.length)\n     {\n        if      (a[ai] < b[bi]){ ai++; }\n        else if (a[ai] > b[bi]){ bi++; }\n        else /* they're equal */\n        {\n          result.push(a[ai]);\n          ai++;\n          bi++;\n        }\n     }\n\n     return result;\n   };\n\n   // Is a a subset of b?\n   // Is b a subset of a?\n   //\n   // returns:\n   // 0 - no subsets\n   // 1 - a is subset of b (a < b)\n   // 2 - b is subset of a (b < a)\n   ccBooleanAnalysis._is_subset = function(a, b) {\n     const intersection_len = this._get_intersection(a, b).length;\n     if (a.length === intersection_len) {\n       return 1;\n     } else if (b.length === intersection_len) {\n       return 2;\n     }\n     return 0;\n   };\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////  Restructure Boolean Expressions\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   ccBooleanAnalysis._constructNegation = function(parse_tree) {\n     return {\n       argument: parse_tree,\n       operator: this._constants.kNOT,\n       prefix: true,\n       type: this._constants.kUnaryExpression\n     };\n   };\n\n   ccBooleanAnalysis._constructAND = function(left, right) {\n     return {\n       left,\n       right,\n       operator: this._constants.kAND,\n       type: this._constants.kBinaryExpression\n     };\n   };\n\n   // Negate an expression\n   ccBooleanAnalysis._negate = function(parse_tree) {\n     if (parse_tree.type == this._constants.kIdentifier) {\n       return this._constructNegation(parse_tree);\n     } else if (parse_tree.operator == this._constants.kNOT) {\n       return parse_tree.argument;\n     } else if (parse_tree.operator == this._constants.kOR) {\n       parse_tree.operator = this._constants.kAND;\n       parse_tree.left = this._negate(parse_tree.left);\n       parse_tree.right = this._negate(parse_tree.right);\n       return parse_tree;\n     } else if (parse_tree.operator == this._constants.kAND) {\n       parse_tree.operator = this._constants.kOR;\n       parse_tree.left = this._negate(parse_tree.left);\n       parse_tree.right = this._negate(parse_tree.right);\n       return parse_tree;\n     }\n   };\n\n   // Applies demorgan's rule for non-trivial cases\n   ccBooleanAnalysis._convertToNegationForm = function(parse_tree) {\n     if (parse_tree.type == this._constants.kIdentifier) {\n       return;\n     } else if (parse_tree.operator == this._constants.kNOT) {\n       // Copy the argument's negation into the parse tree\n       if (parse_tree.argument.type == this._constants.kIdentifier) {\n         return;\n       } else {\n         let new_parse_tree = this._negate(parse_tree.argument);\n         for (const k in new_parse_tree) {\n           parse_tree[k] = new_parse_tree[k];\n         }\n       }\n     } else {\n       this._convertToNegationForm(parse_tree.left);\n       this._convertToNegationForm(parse_tree.right);\n     }\n   };\n\n   // Distribute ANDs across ORs\n   ccBooleanAnalysis._pushDownAnds = function(parse_tree) {\n     if (parse_tree.operator == this._constants.kAND) {\n       if (parse_tree.right.operator == this._constants.kOR) {\n         const old_left = parse_tree.left;\n         parse_tree.left = this._constructAND(old_left, parse_tree.right.left);\n         parse_tree.right = this._constructAND(old_left, parse_tree.right.right);\n         parse_tree.operator = this._constants.kOR;\n       }\n       else if (parse_tree.left.operator == this._constants.kOR) {\n         const old_right = parse_tree.right;\n         parse_tree.right = this._constructAND(parse_tree.left.right, old_right);\n         parse_tree.left = this._constructAND(parse_tree.left.left, old_right);\n         parse_tree.operator = this._constants.kOR;\n       }\n       this._pushDownAnds(parse_tree.left);\n       this._pushDownAnds(parse_tree.right);\n     }\n     else if (parse_tree.operator == this._constants.kOR) {\n       this._pushDownAnds(parse_tree.left);\n       this._pushDownAnds(parse_tree.right);\n     }\n       // Negations and terminals are terminating cases\n   };\n\n   // Get all positive and negative variables\n   // structure terms as: { data: { positive: [], negative: [] } }\n   // Must be in negation form to work properly\n   ccBooleanAnalysis._sortTerms = function(parse_tree, terms, label_pos_neg) {\n     if (parse_tree.operator == this._constants.kAND || parse_tree.operator == this._constants.kOR) {\n       this._sortTerms(parse_tree.left, terms, label_pos_neg);\n       this._sortTerms(parse_tree.right, terms, label_pos_neg);\n     } else if (parse_tree.type == this._constants.kIdentifier) {\n       if (label_pos_neg) {\n         terms.data.push(`${parse_tree.name}___pos`);\n       } else {\n         terms.data.push(parse_tree.name);\n       }\n     } else if (parse_tree.operator == this._constants.kNOT) {\n       if (label_pos_neg) {\n         terms.data.push(`${parse_tree.argument.name}___neg`);\n       } else {\n         terms.data.push(parse_tree.argument.name);\n       }\n     }\n   };\n\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////  State Transition Graphs\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   ccBooleanAnalysis._evaluateState = function(expression, regexes) {\n     // convert the expression into a parseable form\n     // regexes are regular expression forms of the assignments.\n     // This function could compute the regexes based on the assignments,\n     // but as this function is likely to be called many times with the same assignment,\n     // the function requests precomputed regexes.\n     //\n     // These regexes can be generated with ccBooleanAnalysis._getRegexes(assignments).\n     const mapObj = {\n       'OR':'||',\n       'AND':'&&',\n       '~':'!'\n     };\n\n     let parsable_expression = expression.replace(/AND|OR|~/gi, matched => mapObj[matched]);\n\n     // insert the assignments into the parsable_expression\n     parsable_expression = this._applyRegexes(parsable_expression, regexes);\n     /*jshint -W061 */\n     return eval(parsable_expression);\n   };\n\n   ccBooleanAnalysis._applyRegexes = (parsable_expression, regexes) => {\n     // This expression should be parsable (i.e. have &&, ||, etc.)\n     // regexes / assignments should be generated using ccBooleanAnalysis._getRegexes.\n     // This function applies those regexes to an expression.\n     for (const regex of regexes) {\n       parsable_expression = parsable_expression.replace(regex[0], regex[1]);\n     }\n\n     return parsable_expression;\n   };\n\n   ccBooleanAnalysis._getRegexes = assignments => {\n     // generate the appropriate regular expressions that can be applied\n     // to a parseable expression so that an evaluation gives the updated\n     // state of the term.\n     //\n     // Note that assignments should be a hashmap where keys are the\n     // the variables; and values are booleans of the desired state.\n     //\n     // Each term of the array includes another array.\n     // The first term of this inner array is the regular expression.\n     // The second term of the array is the assignment that should be made.\n     // The assignment is represented as a boolean.\n     const regexes = [];\n     for (let key in assignments) {\n       const assignment = assignments[key];\n       const re = new RegExp(key, 'g');\n       regexes.push([re, assignment.toString()]);\n     }\n     return regexes;\n   };\n\n   ccBooleanAnalysis.evaluateStateTransition = function(equations, assignments) {\n     const regexes = this._getRegexes(assignments);\n     const new_assignments = {};\n\n     for (const equation of equations) {\n       const sides = equation.split('=');\n       new_assignments[sides[0]] = this._evaluateState(sides[1], regexes);\n     }\n\n     return new_assignments;\n   };\n\n   ccBooleanAnalysis.stateTransitionGraph = function(equations) {\n     // First, grab all the terms in the equations.\n     const terms = [];\n     for (var i = 0; i < equations.length; i++) {\n       const equation = equations[i];\n       terms.push(equation.split('=')[0]);\n     }\n\n     // Iterate through each possible combination of assignments\n     // transitions is an array.\n     // each element is an array of length 2.\n     // The first entry is the starting assignments.\n     // The second entry is the ending assignments.\n     const transitions = [];\n\n     // In order to compute the truth table, we count\n     // to 2^(equations.length - 1) in binary.\n     // Each digit of this binary expression gives the setting\n     // of a term in the evaluation.\n     for (let i = 0; i < (2 << equations.length); i++) {\n       const settings = i.toString(2);\n       const assignments = {};\n       for (let j = 0; j < terms.length; j++) {\n         const term = terms[j];\n         if (j < settings.length) {\n           if (settings[j] == 1) {\n             assignments[term] = true;\n           } else {\n             assignments[term] = false;\n           }\n         } else {\n           assignments[term] = false;\n         }\n       }\n       const new_assignments = this.evaluateStateTransition(equations, assignments);\n       transitions.push([assignments, new_assignments]);\n     }\n\n     return transitions;\n   };\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////        Attractor Search\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ccBooleanAnalysis.attractorSearchExhaustive = equations => {\n     const st_graph = ccBooleanAnalysis.stateTransitionGraph(equations);\n\n\n\n    //  console.log(\"st_graph\");\n    //  console.log(st_graph);\n    //  console.log(\"JSON.stringify(st_graph[0])\");\n    //  console.log(JSON.stringify(st_graph[0]));\n\n   };\n\n   ccBooleanAnalysis.attractorSearchHeuristic = (equations, num_runs, depth) => {\n     const attractors = [];\n     const st_graph = ccBooleanAnalysis.stateTransitionGraph(equations);\n\n     for (let i = 0; i < num_runs; i++) {\n       let random_idx = Math.floor((Math.random() * st_graph.length));\n       let c_i = st_graph[st_graph];\n     }\n   };\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////         Satisfiability\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   // returns a Logic (logic-solver) encoding of the parse_tree\n   // recursively builds the encoding\n   // does not require DNF or any fancy expresion\n   ccBooleanAnalysis._buildLogicFormula = function(parse_tree) {\n     if (parse_tree.type == ccBooleanAnalysis._constants.kIdentifier) {\n       // base case\n       return parse_tree.name;\n     } else if (parse_tree.type == ccBooleanAnalysis._constants.kUnaryExpression) {\n       return Logic.not(this._buildLogicFormula(parse_tree.argument));\n     } else if (parse_tree.operator == ccBooleanAnalysis._constants.kAND) {\n       return Logic.and(this._buildLogicFormula(parse_tree.left), this._buildLogicFormula(parse_tree.right));\n     } else if (parse_tree.operator == ccBooleanAnalysis._constants.kOR) {\n       return Logic.or(this._buildLogicFormula(parse_tree.left), this._buildLogicFormula(parse_tree.right));\n     }\n   };\n\n   // Is the given formula satisfiable?\n   ccBooleanAnalysis._formulaSatisfiable = logic_formula => {\n     const solver = new Logic.Solver();\n     solver.require(logic_formula);\n     const result = solver.solve(); // null if not satisfiable\n     if (result) {\n       return true;\n     } else {\n       return false;\n     }\n   };\n\n   /**\n    * @method ccBooleanAnalysis.satisfiable\n    * @param {string} s A string encoding a boolean expression that should be checked for satisfiability.\n    * @return {boolean} Whether the expression is satisfiable.\n    */\n   ccBooleanAnalysis.satisfiable = function(s) {\n     const parse_tree = this.getParseTree(s);\n     const logic_formula = this._buildLogicFormula(parse_tree);\n     return this._formulaSatisfiable(logic_formula);\n   };\n\n   /**\n    * @method ccBooleanAnalysis.compareBooleansSAT\n    * @param {string} s1 A string encoding a boolean expression that should be checked for equality.\n    * @param {string} s2 A string encoding a boolean expression that should be checked for equality.\n    * @return {boolean} Whether the two expressions are equivalent.\n    */\n   ccBooleanAnalysis.compareBooleansSAT = function(s1, s2) {\n     const pt1 = this.getParseTree(s1);\n     const pt2 = this.getParseTree(s2);\n\n     const logic_formula1 = this._buildLogicFormula(pt1);\n     const logic_formula2 = this._buildLogicFormula(pt2);\n\n     const expression = Logic.xor(logic_formula1, logic_formula2);\n     return !(ccBooleanAnalysis._formulaSatisfiable(expression));\n   };\n\n\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n   ////         Model Reduction\n   ////\n   ////////////////////////////////////////\n   ////////////////////////////////////////\n\n   // conjuctions is an array of arrays (all values in DNFObject)\n   // returns new conjuctions array\n   ccBooleanAnalysis.parseConjuctionsAtPoint = (conjuctions, variable, value) => {\n     let anything_changed = false;\n     for (let i = 0; i < conjuctions.length; i++) {\n       const conjuction = conjuctions[i];\n       for (let j = 0; j < conjuction[0].length; j++) { // pos variables\n         if (conjuction[0][j] == variable) {\n           if (value) { // true\n             // if there is only one conjuction\n             // and that conjuction has just one positive variable\n             if (conjuction[0].length == 1 && conjuction[1].length === 0) {\n               // this it the only term left in the conjuction,\n               // though other conjuctions still remain.\n               // But since this conjuction is true, and we only\n               // need one conjuction to be true for SAT,\n               // we return that the entire expression is true.\n               return [true, true, 1];\n             } else {\n               // delete term\n               conjuction[0].splice(j, 1);\n               j--;\n               anything_changed = true;\n             }\n           } else { // false\n             if (conjuctions.length == 1) {\n               // this is the only conjuction left. Report a constant false function.\n               return [false, true, -1];\n             } else {\n               // delete conjuction\n               conjuctions.splice(i, 1);\n               i--;\n               anything_changed = true;\n               break;\n             }\n           }\n         }\n       }\n\n       for (let j = 0; j < conjuction[1].length; j++) { // neg variables\n         if (conjuction[1][j] == variable) {\n           if (!(value)) { // true\n             // if there is only one conjuction\n             // and that conjuction has just one positive variable\n             if (conjuction[1].length == 1 && conjuction[0].length === 0) {\n               // this it the only term left in the conjuction,\n               // though other conjuctions still remain.\n               // But since this conjuction is true, and we only\n               // need one conjuction to be true for SAT,\n               // we return that the entire expression is true.\n               return [true, true, 1];\n             } else {\n               // delete term\n               conjuction[1].splice(j, 1);\n               j--;\n               anything_changed = true;\n             }\n           } else { // false\n             if (conjuctions.length == 1) {\n               // this is the only conjuction left. Report a constant false function.\n               return [false, true, -1];\n             } else {\n               // delete conjuction\n               conjuctions.splice(i, 1);\n               i--;\n               anything_changed = true;\n               break;\n             }\n           }\n         }\n       }\n     }\n     return [conjuctions, anything_changed, 0];\n     // last item in array is whether this thing is a constant term\n     // -1 -> constant false\n     // 1 ->  constant true\n     // 0 -> not constant\n   };\n\n  // accepts equations as an array of strings\n  // dependent_on and depends_on will change overtime,\n  // but the beginning values still serve as a good heuristic\n  // on what to analyze\n  //\n  // future: find data structure which lets us look up where a value in within\n  // the hashtable and remove it (quickly).\n  ccBooleanAnalysis.reduceModel = function(equations) {\n    var equation_mapping = {}; // equation_mapping['A'] gives array of arrays of conjuctions for expr in A=(expr)\n    var depends_on = {}; // depends_on['A'] gives all variables which depend on 'A'.\n    var constant_term_pos = [];\n    var constant_term_neg = [];\n    // can derive dependent_on from equation_mapping (a flattening of the outer array in equation_mapping)\n\n    // prepare those dictionaries\n    for (var i = 0; i < equations.length; i++) {\n      var equation = equations[i];\n      var parts = equation.split('=');\n\n      // Clear white space from the LHS\n      parts[0] = parts[0].replace(/ /gi, \"\");\n\n      // Example format of conjuctions:\n      // [ [ [ 'A' ], [ 'D' ] ], [ [ 'C' ], [] ] ]\n      var conjuctions = this._getValuesFlattened(this.getDNFObjectEncoding(parts[1]));\n\n      // First, propogate any 'true' and 'false' values that are baked in.\n      var result_at_point = this.parseConjuctionsAtPoint(conjuctions, 'true', true);\n      if (result_at_point[2] == 1) {\n        constant_term_pos.push(parts[0]);\n        continue;\n      } else if (result_at_point[2] == -1) {\n        constant_term_neg.push(parts[0]);\n        continue;\n      }\n\n      result_at_point = this.parseConjuctionsAtPoint(result_at_point[0], 'false', false);\n      if (result_at_point[2] == 1) {\n        constant_term_pos.push(parts[0]);\n        continue;\n      } else if (result_at_point[2] == -1) {\n        constant_term_neg.push(parts[0]);\n        continue;\n      }\n\n      // Then, set up the depends_on matrix\n      equation_mapping[parts[0]] = conjuctions;\n      for (let j = 0; j < conjuctions.length; j++) {\n        var individual_conjuction = conjuctions[j];\n        for (let k = 0; k < individual_conjuction[0].length; k++) {\n          let term = individual_conjuction[0][k];\n          if (!(term in depends_on)) {\n            depends_on[term] = [];\n          }\n          depends_on[term].push(parts[0]);\n        }\n\n        for (let k = 0; k < individual_conjuction[1].length; k++) {\n          let term = individual_conjuction[1][k];\n          if (!(term in depends_on)) {\n            depends_on[term] = [];\n          }\n          depends_on[term].push(parts[0]);\n        }\n      }\n    }\n\n    // Reduction Algorithm 1\n    // Identifying and eliminating the stabilized nodes\n    // See section 2.1 of Saadatpour, et al.\n\n    // We optimize the algorithm by finding all constant functions in advance\n    // and noting that a non-constant function can only become constant\n    // if it depends on a constant function.\n    //\n    // This way, we can determine that we are at a fixed point a priori without\n    // actually confirming this (saves O(N) time).\n\n    for (let i = 0; i < constant_term_pos.length; i++) {\n      let term = constant_term_pos[i];\n      let dependencies = depends_on[term]; // A = B AND C ->>>>> A depends on B. A shows up in dependencies.\n      for (let j = 0; j < dependencies.length; j++) {\n        let dependency = dependencies[j];\n        if (!(dependency in equation_mapping)) { // meaning it hasn't been removed yet by becoming constant...\n          continue;\n        }\n        let conjuctions = equation_mapping[dependency];\n        let result_at_point = this.parseConjuctionsAtPoint(conjuctions, term, true);\n\n        if (result_at_point[2] == 1) {\n          constant_term_pos.push(dependency);\n          delete equation_mapping[dependency];\n          continue;\n        } else if (result_at_point[2] == -1) {\n          constant_term_neg.push(dependency);\n          delete equation_mapping[dependency];\n          continue;\n        } else {\n          equation_mapping[dependency] = result_at_point[0];\n        }\n      }\n    }\n\n    // Basically same code for negatives\n    for (let i = 0; i < constant_term_neg.length; i++) {\n      let term = constant_term_neg[i];\n      let dependencies = depends_on[term];\n      for (let j = 0; j < dependencies.length; j++) {\n        let dependency = dependencies[j];\n        if (!(dependency in equation_mapping)) { // meaning it hasn't been removed yet by becoming constant...\n          continue;\n        }\n        let conjuctions = equation_mapping[dependency];\n        let result_at_point = this.parseConjuctionsAtPoint(conjuctions, term, false);\n\n        if (result_at_point[2] == 1) {\n          constant_term_pos.push(dependency);\n          delete equation_mapping[dependency];\n          continue;\n        } else if (result_at_point[2] == -1) {\n          constant_term_neg.push(dependency);\n          delete equation_mapping[dependency];\n          continue;\n        } else {\n          equation_mapping[dependency] = result_at_point[0];\n        }\n      }\n    }\n\n    // Reduction Algorithm 2\n    // Merging simple mediator nodes\n    // See section 2.1 of Saadatpour, et al.\n\n    // a -> b -> c ------> a -> c\n    const inDegreeOneDependency = eq_conjuctions => {\n      // returns false if the in-degree is > 1\n      // otherwise, returns the dependency, whether the term is pos (True) / neg (False)\n\n      // If there are multiple conjuctions, there must be\n      // multiple variables. Becuase otherwise, these variables\n      // would have been removed in a pre-processing step.\n      // I.e. we would never see (A OR NOT A).\n      // We might see (A OR (NOT A AND B)),\n      // but the in-degree is >1 here.\n      if (eq_conjuctions.length > 1) {\n        return false;\n      }\n      // If there are variables in both the true and false sections\n      // of the conjuction, then in-degree must be > 1.\n      else if (eq_conjuctions[0][0].length + eq_conjuctions[0][1].length > 1) {\n        return false;\n      }\n      // there is one variable in the positive section\n      else if (eq_conjuctions[0][0].length == 1 && eq_conjuctions[0][1].length === 0) {\n        return [eq_conjuctions[0][0][0], true];\n      }\n      // there is one variable in the negative section\n      else if (eq_conjuctions[0][0].length === 0 && eq_conjuctions[0][1].length == 1) {\n        return [eq_conjuctions[0][1][0], false];\n      }\n    };\n\n    // If a term is in in_degree_one_mat, then it has in_degree_one.\n    // It's value in the hash_map is [its_dependency, pos/neg reliance]\n    let in_degree_one_mat = {};\n    for (var term in equation_mapping) {\n      const result = inDegreeOneDependency(equation_mapping[term]);\n      if (result) {\n        in_degree_one_mat[term] = result;\n      }\n    }\n\n    // Find mediator nodes\n    for (let term in in_degree_one_mat) {\n      // keep_going allows us to keep collapsing terms\n      // until the chain ends\n      let keep_going = true;\n      while (keep_going) {\n        const back_dependency_1_info = in_degree_one_mat[term];\n        if (back_dependency_1_info[0] in in_degree_one_mat) {\n          const back_dependency_2_info = in_degree_one_mat[back_dependency_1_info[0]];\n\n          // Update the chain\n          if (back_dependency_1_info[1] == back_dependency_2_info[1]) { // true/true of false/false gives positive\n            equation_mapping[term] = [ [ [ back_dependency_2_info[0] ], [] ] ];\n            in_degree_one_mat[term] = [back_dependency_2_info[0], true];\n          } else {\n            equation_mapping[term] = [ [ [], [ back_dependency_2_info[0] ] ] ];\n            in_degree_one_mat[term] = [back_dependency_2_info[0], false];\n          }\n\n          // Remove the mediator node\n          delete equation_mapping[back_dependency_1_info[0]];\n          delete in_degree_one_mat[back_dependency_1_info[0]];\n        } else {\n          // if there is no mediator node, move onto the next term\n          keep_going = false;\n        }\n      }\n    }\n\n    // returns a hash_table representing the conjuctions for each term\n    // can be interconverted into parse_tree or similar, as needed.\n    return equation_mapping;\n  };\n\n  module.exports = ccBooleanAnalysis;\n// });\n\n\n\n// WEBPACK FOOTER //\n// ./src/ccBooleanAnalysis.js","//     JavaScript Expression Parser (JSEP) 0.3.0\n//     JSEP may be freely distributed under the MIT License\n//     http://jsep.from.so/\n\n/*global module: true, exports: true, console: true */\n(function (root) {\n\t'use strict';\n\t// Node Types\n\t// ----------\n\t\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tvar COMPOUND = 'Compound',\n\t\tIDENTIFIER = 'Identifier',\n\t\tMEMBER_EXP = 'MemberExpression',\n\t\tLITERAL = 'Literal',\n\t\tTHIS_EXP = 'ThisExpression',\n\t\tCALL_EXP = 'CallExpression',\n\t\tUNARY_EXP = 'UnaryExpression',\n\t\tBINARY_EXP = 'BinaryExpression',\n\t\tLOGICAL_EXP = 'LogicalExpression',\n\t\tCONDITIONAL_EXP = 'ConditionalExpression',\n\t\tARRAY_EXP = 'ArrayExpression',\n\n\t\tPERIOD_CODE = 46, // '.'\n\t\tCOMMA_CODE  = 44, // ','\n\t\tSQUOTE_CODE = 39, // single quote\n\t\tDQUOTE_CODE = 34, // double quotes\n\t\tOPAREN_CODE = 40, // (\n\t\tCPAREN_CODE = 41, // )\n\t\tOBRACK_CODE = 91, // [\n\t\tCBRACK_CODE = 93, // ]\n\t\tQUMARK_CODE = 63, // ?\n\t\tSEMCOL_CODE = 59, // ;\n\t\tCOLON_CODE  = 58, // :\n\n\t\tthrowError = function(message, index) {\n\t\t\tvar error = new Error(message + ' at character ' + index);\n\t\t\terror.index = index;\n\t\t\terror.description = message;\n\t\t\tthrow error;\n\t\t},\n\n\t// Operations\n\t// ----------\n\t\n\t// Set `t` to `true` to save space (when minified, not gzipped)\n\t\tt = true,\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `true` (it really doesn't matter)\n\t\tunary_ops = {'-': t, '!': t, '~': t, '+': t},\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference:\n\t// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)\n\t\tbinary_ops = {\n\t\t\t'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,\n\t\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t\t'<': 7,  '>': 7,  '<=': 7,  '>=': 7, \n\t\t\t'<<':8,  '>>': 8, '>>>': 8,\n\t\t\t'+': 9, '-': 9,\n\t\t\t'*': 10, '/': 10, '%': 10\n\t\t},\n\t// Get return the longest key length of any object\n\t\tgetMaxKeyLen = function(obj) {\n\t\t\tvar max_len = 0, len;\n\t\t\tfor(var key in obj) {\n\t\t\t\tif((len = key.length) > max_len && obj.hasOwnProperty(key)) {\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max_len;\n\t\t},\n\t\tmax_unop_len = getMaxKeyLen(unary_ops),\n\t\tmax_binop_len = getMaxKeyLen(binary_ops),\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\t\tliterals = {\n\t\t\t'true': true,\n\t\t\t'false': false,\n\t\t\t'null': null\n\t\t},\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\t\tthis_str = 'this',\n\t// Returns the precedence of a binary operator or `0` if it isn't a binary operator\n\t\tbinaryPrecedence = function(op_val) {\n\t\t\treturn binary_ops[op_val] || 0;\n\t\t},\n\t// Utility function (gets called from multiple places)\n\t// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n\t\tcreateBinaryExpression = function (operator, left, right) {\n\t\t\tvar type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;\n\t\t\treturn {\n\t\t\t\ttype: type,\n\t\t\t\toperator: operator,\n\t\t\t\tleft: left,\n\t\t\t\tright: right\n\t\t\t};\n\t\t},\n\t\t// `ch` is a character code in the next three functions\n\t\tisDecimalDigit = function(ch) {\n\t\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t\t},\n\t\tisIdentifierStart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122); // a...z\n\t\t},\n\t\tisIdentifierPart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t\t\t(ch >= 48 && ch <= 57); // 0...9\n\t\t},\n\n\t\t// Parsing\n\t\t// -------\n\t\t// `expr` is a string with the passed in expression\n\t\tjsep = function(expr) {\n\t\t\t// `index` stores the character number we are currently at while `length` is a constant\n\t\t\t// All of the gobbles below will modify `index` as we move along\n\t\t\tvar index = 0,\n\t\t\t\tcharAtFunc = expr.charAt,\n\t\t\t\tcharCodeAtFunc = expr.charCodeAt,\n\t\t\t\texprI = function(i) { return charAtFunc.call(expr, i); },\n\t\t\t\texprICode = function(i) { return charCodeAtFunc.call(expr, i); },\n\t\t\t\tlength = expr.length,\n\n\t\t\t\t// Push `index` up to the next non-space character\n\t\t\t\tgobbleSpaces = function() {\n\t\t\t\t\tvar ch = exprICode(index);\n\t\t\t\t\t// space or tab\n\t\t\t\t\twhile(ch === 32 || ch === 9) {\n\t\t\t\t\t\tch = exprICode(++index);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t// The main parsing function. Much of this code is dedicated to ternary expressions\n\t\t\t\tgobbleExpression = function() {\n\t\t\t\t\tvar test = gobbleBinaryExpression(),\n\t\t\t\t\t\tconsequent, alternate;\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === QUMARK_CODE) {\n\t\t\t\t\t\t// Ternary expression: test ? consequent : alternate\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tconsequent = gobbleExpression();\n\t\t\t\t\t\tif(!consequent) {\n\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tif(exprICode(index) === COLON_CODE) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\talternate = gobbleExpression();\n\t\t\t\t\t\t\tif(!alternate) {\n\t\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\t\t\ttest: test,\n\t\t\t\t\t\t\t\tconsequent: consequent,\n\t\t\t\t\t\t\t\talternate: alternate\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowError('Expected :', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn test;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Search for the operation portion of the string (e.g. `+`, `===`)\n\t\t\t\t// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t\t\t\t// and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t\t\t\t// then, return that binary operation\n\t\t\t\tgobbleBinaryOp = function() {\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tvar biop, to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;\n\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\tif(binary_ops.hasOwnProperty(to_check)) {\n\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\treturn to_check;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// This function is responsible for gobbling an individual expression,\n\t\t\t\t// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t\t\t\tgobbleBinaryExpression = function() {\n\t\t\t\t\tvar ch_i, node, biop, prec, stack, biop_info, left, right, i;\n\n\t\t\t\t\t// First, try to get the leftmost thing\n\t\t\t\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t\t\t\tleft = gobbleToken();\n\t\t\t\t\tbiop = gobbleBinaryOp();\n\n\t\t\t\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\t\t\t\tif(!biop) {\n\t\t\t\t\t\treturn left;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t\t\t\t// precedence structure\n\t\t\t\t\tbiop_info = { value: biop, prec: binaryPrecedence(biop)};\n\n\t\t\t\t\tright = gobbleToken();\n\t\t\t\t\tif(!right) {\n\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\n\t\t\t\t\t}\n\t\t\t\t\tstack = [left, biop_info, right];\n\n\t\t\t\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\t\t\t\twhile((biop = gobbleBinaryOp())) {\n\t\t\t\t\t\tprec = binaryPrecedence(biop);\n\n\t\t\t\t\t\tif(prec === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbiop_info = { value: biop, prec: prec };\n\n\t\t\t\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\t\t\t\twhile ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t\t\t\t\t\t\tright = stack.pop();\n\t\t\t\t\t\t\tbiop = stack.pop().value;\n\t\t\t\t\t\t\tleft = stack.pop();\n\t\t\t\t\t\t\tnode = createBinaryExpression(biop, left, right);\n\t\t\t\t\t\t\tstack.push(node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode = gobbleToken();\n\t\t\t\t\t\tif(!node) {\n\t\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstack.push(biop_info, node);\n\t\t\t\t\t}\n\n\t\t\t\t\ti = stack.length - 1;\n\t\t\t\t\tnode = stack[i];\n\t\t\t\t\twhile(i > 1) {\n\t\t\t\t\t\tnode = createBinaryExpression(stack[i - 1].value, stack[i - 2], node); \n\t\t\t\t\t\ti -= 2;\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// An individual part of a binary expression:\n\t\t\t\t// e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t\t\t\tgobbleToken = function() {\n\t\t\t\t\tvar ch, to_check, tc_len;\n\t\t\t\t\t\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch = exprICode(index);\n\n\t\t\t\t\tif(isDecimalDigit(ch) || ch === PERIOD_CODE) {\n\t\t\t\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\t\t\t\treturn gobbleNumericLiteral();\n\t\t\t\t\t} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n\t\t\t\t\t\t// Single or double quotes\n\t\t\t\t\t\treturn gobbleStringLiteral();\n\t\t\t\t\t} else if(isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis\n\t\t\t\t\t\t// `foo`, `bar.baz`\n\t\t\t\t\t\treturn gobbleVariable();\n\t\t\t\t\t} else if (ch === OBRACK_CODE) {\n\t\t\t\t\t\treturn gobbleArray();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tto_check = expr.substr(index, max_unop_len);\n\t\t\t\t\t\ttc_len = to_check.length;\n\t\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\t\tif(unary_ops.hasOwnProperty(to_check)) {\n\t\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: UNARY_EXP,\n\t\t\t\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\t\t\t\targument: gobbleToken(),\n\t\t\t\t\t\t\t\t\tprefix: true\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t\t\t\t// keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t\t\t\tgobbleNumericLiteral = function() {\n\t\t\t\t\tvar number = '', ch, chCode;\n\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tch = exprI(index);\n\t\t\t\t\tif(ch === 'e' || ch === 'E') { // exponent marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\tch = exprI(index);\n\t\t\t\t\t\tif(ch === '+' || ch === '-') { // exponent sign\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) { //exponent itself\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isDecimalDigit(exprICode(index-1)) ) {\n\t\t\t\t\t\t\tthrowError('Expected exponent (' + number + exprI(index) + ')', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\tchCode = exprICode(index);\n\t\t\t\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\t\t\t\tif(isIdentifierStart(chCode)) {\n\t\t\t\t\t\tthrowError('Variable names cannot start with a number (' +\n\t\t\t\t\t\t\t\t\tnumber + exprI(index) + ')', index);\n\t\t\t\t\t} else if(chCode === PERIOD_CODE) {\n\t\t\t\t\t\tthrowError('Unexpected period', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: parseFloat(number),\n\t\t\t\t\t\traw: number\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t// Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t\t\t\t// e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t\t\t\tgobbleStringLiteral = function() {\n\t\t\t\t\tvar str = '', quote = exprI(index++), closed = false, ch;\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\tif(ch === quote) {\n\t\t\t\t\t\t\tclosed = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if(ch === '\\\\') {\n\t\t\t\t\t\t\t// Check for all of the common escape codes\n\t\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\t\tswitch(ch) {\n\t\t\t\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += ch;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!closed) {\n\t\t\t\t\t\tthrowError('Unclosed quote after \"'+str+'\"', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: str,\n\t\t\t\t\t\traw: quote + str + quote\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t// Gobbles only identifiers\n\t\t\t\t// e.g.: `foo`, `_value`, `$x1`\n\t\t\t\t// Also, this function checks if that identifier is a literal:\n\t\t\t\t// (e.g. `true`, `false`, `null`) or `this`\n\t\t\t\tgobbleIdentifier = function() {\n\t\t\t\t\tvar ch = exprICode(index), start = index, identifier;\n\n\t\t\t\t\tif(isIdentifierStart(ch)) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unexpected ' + exprI(index), index);\n\t\t\t\t\t}\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprICode(index);\n\t\t\t\t\t\tif(isIdentifierPart(ch)) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tidentifier = expr.slice(start, index);\n\n\t\t\t\t\tif(literals.hasOwnProperty(identifier)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\t\tvalue: literals[identifier],\n\t\t\t\t\t\t\traw: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if(identifier === this_str) {\n\t\t\t\t\t\treturn { type: THIS_EXP };\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: IDENTIFIER,\n\t\t\t\t\t\t\tname: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Gobbles a list of arguments within the context of a function call\n\t\t\t\t// or array literal. This function also assumes that the opening character\n\t\t\t\t// `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t\t\t\t// until the terminator character `)` or `]` is encountered.\n\t\t\t\t// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t\t\t\tgobbleArguments = function(termination) {\n\t\t\t\t\tvar ch_i, args = [], node;\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\tif(ch_i === termination) { // done parsing\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (ch_i === COMMA_CODE) { // between expressions\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = gobbleExpression();\n\t\t\t\t\t\t\tif(!node || node.type === COMPOUND) {\n\t\t\t\t\t\t\t\tthrowError('Expected comma', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\targs.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn args;\n\t\t\t\t},\n\n\t\t\t\t// Gobble a non-literal variable name. This variable name may include properties\n\t\t\t\t// e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t\t\t\t// It also gobbles function calls:\n\t\t\t\t// e.g. `Math.acos(obj.angle)`\n\t\t\t\tgobbleVariable = function() {\n\t\t\t\t\tvar ch_i, node;\n\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\t\n\t\t\t\t\tif(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tnode = gobbleGroup();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = gobbleIdentifier();\n\t\t\t\t\t}\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\twhile(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif(ch_i === PERIOD_CODE) {\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: false,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleIdentifier()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if(ch_i === OBRACK_CODE) {\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: true,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleExpression()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\t\tif(ch_i !== CBRACK_CODE) {\n\t\t\t\t\t\t\t\tthrowError('Unclosed [', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else if(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: CALL_EXP,\n\t\t\t\t\t\t\t\t'arguments': gobbleArguments(CPAREN_CODE),\n\t\t\t\t\t\t\t\tcallee: node\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing a group of things within parentheses `()`\n\t\t\t\t// This function assumes that it needs to gobble the opening parenthesis\n\t\t\t\t// and then tries to gobble everything within that parenthesis, assuming\n\t\t\t\t// that the next thing it should see is the close parenthesis. If not,\n\t\t\t\t// then the expression probably doesn't have a `)`\n\t\t\t\tgobbleGroup = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\tvar node = gobbleExpression();\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === CPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unclosed (', index);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing Array literals `[1, 2, 3]`\n\t\t\t\t// This function assumes that it needs to gobble the opening bracket\n\t\t\t\t// and then tries to gobble the expressions as arguments.\n\t\t\t\tgobbleArray = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: ARRAY_EXP,\n\t\t\t\t\t\telements: gobbleArguments(CBRACK_CODE)\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tnodes = [], ch_i, node;\n\t\t\t\t\n\t\t\twhile(index < length) {\n\t\t\t\tch_i = exprICode(index);\n\n\t\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t\t// separators\n\t\t\t\tif(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {\n\t\t\t\t\tindex++; // ignore separators\n\t\t\t\t} else {\n\t\t\t\t\t// Try to gobble each expression individually\n\t\t\t\t\tif((node = gobbleExpression())) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t\t} else if(index < length) {\n\t\t\t\t\t\tthrowError('Unexpected \"' + exprI(index) + '\"', index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there's only one expression just try returning the expression\n\t\t\tif(nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: COMPOUND,\n\t\t\t\t\tbody: nodes\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t// To be filled in by the template\n\tjsep.version = '0.3.0';\n\tjsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };\n\n\t/**\n\t * @method jsep.addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @return jsep\n\t */\n\tjsep.addUnaryOp = function(op_name) {\n\t\tunary_ops[op_name] = t; return this;\n\t};\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float)\n\t * @return jsep\n\t */\n\tjsep.addBinaryOp = function(op_name, precedence) {\n\t\tmax_binop_len = Math.max(op_name.length, max_binop_len);\n\t\tbinary_ops[op_name] = precedence;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeUnaryOp = function(op_name) {\n\t\tdelete unary_ops[op_name];\n\t\tif(op_name.length === max_unop_len) {\n\t\t\tmax_unop_len = getMaxKeyLen(unary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeBinaryOp = function(op_name) {\n\t\tdelete binary_ops[op_name];\n\t\tif(op_name.length === max_binop_len) {\n\t\t\tmax_binop_len = getMaxKeyLen(binary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t// In desktop environments, have a way to restore the old value for `jsep`\n\tif (typeof exports === 'undefined') {\n\t\tvar old_jsep = root.jsep;\n\t\t// The star of the show! It's a function!\n\t\troot.jsep = jsep;\n\t\t// And a courteous function willing to move out of the way for other similarly-named objects!\n\t\tjsep.noConflict = function() {\n\t\t\tif(root.jsep === jsep) {\n\t\t\t\troot.jsep = old_jsep;\n\t\t\t}\n\t\t\treturn jsep;\n\t\t};\n\t} else {\n\t\t// In Node.JS environments\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = jsep;\n\t\t} else {\n\t\t\texports.parse = jsep;\n\t\t}\n\t}\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jsep/build/jsep.js\n// module id = 1\n// module chunks = 0","/*\nQueue.js\n\nA function to represent a queue\n\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\nthe terms of the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n/* Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\n * items are added to the end of the queue and removed from the front.\n */\n/*jshint esversion: 6 */\n function Queue(){\n\n   // initialise the queue and offset\n   let queue  = [];\n   let offset = 0;\n\n   // Returns the length of the queue.\n   this.getLength = () => queue.length - offset;\n\n   // Returns true if the queue is empty, and false otherwise.\n   this.isEmpty = () => queue.length === 0;\n\n   /* Enqueues the specified item. The parameter is:\n    *\n    * item - the item to enqueue\n    */\n   this.enqueue = item => {\n     queue.push(item);\n   };\n\n   /* Dequeues an item and returns it. If the queue is empty, the value\n    * 'undefined' is returned.\n    */\n   this.dequeue = () => {\n\n     // if the queue is empty, return immediately\n     if (queue.length === 0) return undefined;\n\n     // store the item at the front of the queue\n     const item = queue[offset];\n\n     // increment the offset and remove the free space if necessary\n     if (++ offset * 2 >= queue.length){\n       queue  = queue.slice(offset);\n       offset = 0;\n     }\n\n     // return the dequeued item\n     return item;\n\n   };\n\n   /* Returns the item at the front of the queue (without dequeuing it). If the\n    * queue is empty then undefined is returned.\n    */\n   this.peek = () => queue.length > 0 ? queue[offset] : undefined;\n\n }\n\n\n\n// WEBPACK FOOTER //\n// ./src/queue.js","var MiniSat = require(\"./minisat_wrapper.js\");\nvar _ = require(\"underscore\");\nvar Logic;\nLogic = {};\n\n////////// TYPE TESTERS\n\n\n// Set the `description` property of a tester function and return the function.\nvar withDescription = function (description, tester) {\n  tester.description = description;\n  return tester;\n};\n\n// Create a function (x) => (x instanceof constructor), but possibly before\n// constructor is available.  For example, if Logic.Formula hasn't been\n// assigned yet, passing Logic for `obj` and \"Formula\" for `constructorName`\n// will still work.\nvar lazyInstanceofTester = function (description, obj, constructorName) {\n  return withDescription(description, function (x) {\n    return x instanceof obj[constructorName];\n  });\n};\n\n\n///// PUBLIC TYPE TESTERS\n\n// All variables have a name and a number.  The number is mainly used\n// internally, and it's what's given to MiniSat.  Names and numbers\n// are interchangeable, which is convenient for doing manipulation\n// of terms in a way that works before or after variable names are\n// converted to numbers.\n\n// Term: a variable name or variable number, optionally\n// negated (meaning \"boolean not\").  For example,\n// `1`, `-1`, `\"foo\"`, or `\"-foo\"`.  All variables have\n// internal numbers that start at 1, so \"foo\" might be\n// variable number 1, for example.  Any number of leading\n// \"-\" will be parsed in the string form, but we try to\n// keep it to either one or zero of them.\n\nLogic.isNumTerm = withDescription('a NumTerm (non-zero integer)',\n                                  function (x) {\n                                    // 32-bit integer, but not 0\n                                    return (x === (x | 0)) && x !== 0;\n                                  });\n\n// NameTerm must not be empty, or just `-` characters, or look like a\n// number.  Specifically, it can't be zero or more `-` followed by\n// zero or more digits.\nLogic.isNameTerm = withDescription('a NameTerm (string)',\n                                   function (x) {\n                                     return (typeof x === 'string') &&\n                                       ! /^-*[0-9]*$/.test(x);\n                                   });\n\nLogic.isTerm = withDescription('a Term (appropriate string or number)',\n                               function (x) {\n                                 return Logic.isNumTerm(x) ||\n                                   Logic.isNameTerm(x);\n                               });\n\n// WholeNumber: a non-negative integer (0 is allowed)\nLogic.isWholeNumber = withDescription('a whole number (integer >= 0)',\n                                      function (x) {\n                                        return (x === (x | 0)) && x >= 0;\n                                      });\n\nLogic.isFormula = lazyInstanceofTester('a Formula', Logic, 'Formula');\nLogic.isClause = lazyInstanceofTester('a Clause', Logic, 'Clause');\nLogic.isBits = lazyInstanceofTester('a Bits', Logic, 'Bits');\n\n///// UNDOCUMENTED TYPE TESTERS\n\nLogic._isInteger = withDescription(\n  'an integer', function (x) { return x === (x | 0); });\n\nLogic._isFunction = withDescription(\n  'a Function', function (x) { return typeof x === 'function'; });\n\nLogic._isString = withDescription(\n  'a String', function (x) { return typeof x === 'string'; });\n\nLogic._isArrayWhere = function (tester) {\n  var description = 'an array';\n  if (tester.description) {\n    description += ' of ' + tester.description;\n  }\n  return withDescription(description, function (x) {\n    if (! _.isArray(x)) {\n      return false;\n    } else {\n      for (var i = 0; i < x.length; i++) {\n        if (! tester(x[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n};\n\nLogic._isFormulaOrTerm = withDescription('a Formula or Term',\n                                         function (x) {\n                                           return Logic.isFormula(x) ||\n                                             Logic.isTerm(x);\n                                         });\n\n\nLogic._isFormulaOrTermOrBits = withDescription('a Formula, Term, or Bits',\n                                               function (x) {\n                                                 return Logic.isFormula(x) ||\n                                                   Logic.isBits(x) ||\n                                                   Logic.isTerm(x);\n                                               });\nLogic._MiniSat = MiniSat; // Expose for testing and poking around\n\n// import the private testers from types.js\nvar isInteger = Logic._isInteger;\nvar isFunction = Logic._isFunction;\nvar isString = Logic._isString;\nvar isArrayWhere = Logic._isArrayWhere;\nvar isFormulaOrTerm = Logic._isFormulaOrTerm;\nvar isFormulaOrTermOrBits = Logic._isFormulaOrTermOrBits;\n\nLogic._assert = function (value, tester, description) {\n  if (! tester(value)) {\n    var displayValue = (typeof value === 'string' ? JSON.stringify(value) :\n                        value);\n    throw new Error(displayValue + \" is not \" +\n                    (tester.description || description));\n  }\n};\n\n// Call this as `if (assert) assertNumArgs(...)`\nvar assertNumArgs = function (actual, expected, funcName) {\n  if (actual !== expected) {\n    throw new Error(\"Expected \" + expected + \" args in \" + funcName +\n                    \", got \" + actual);\n  }\n};\n\n// Call `assert` as: `if (assert) assert(...)`.\n// This local variable temporarily set to `null` inside\n// `Logic.disablingAssertions`.\nvar assert = Logic._assert;\n\n// Like `if (assert) assert(...)` but usable from other files in the package.\nLogic._assertIfEnabled = function (value, tester, description) {\n  if (assert) assert(value, tester, description);\n};\n\n// Disabling runtime assertions speeds up clause generation.  Assertions\n// are disabled when the local variable `assert` is null instead of\n// `Logic._assert`.\nLogic.disablingAssertions = function (f) {\n  var oldAssert = assert;\n  try {\n    assert = null;\n    return f();\n  } finally {\n    assert = oldAssert;\n  }\n};\n\n// Back-compat.\nLogic._disablingTypeChecks = Logic.disablingAssertions;\n\n////////////////////\n\n// Takes a Formula or Term, returns a Formula or Term.\n// Unlike other operators, if you give it a Term,\n// you will get a Term back (of the same type, NameTerm\n// or NumTerm).\nLogic.not = function (operand) {\n  if (assert) assert(operand, isFormulaOrTerm);\n\n  if (operand instanceof Logic.Formula) {\n    return new Logic.NotFormula(operand);\n  } else {\n    // Term\n    if (typeof operand === 'number') {\n      return -operand;\n    } else if (operand.charAt(0) === '-') {\n      return operand.slice(1);\n    } else {\n      return '-' + operand;\n    }\n  }\n};\n\nLogic.NAME_FALSE = \"$F\";\nLogic.NAME_TRUE = \"$T\";\nLogic.NUM_FALSE = 1;\nLogic.NUM_TRUE = 2;\n\nLogic.TRUE = Logic.NAME_TRUE;\nLogic.FALSE = Logic.NAME_FALSE;\n\n// Abstract base class.  Subclasses are created using _defineFormula.\nLogic.Formula = function () {};\n\nLogic._defineFormula = function (constructor, typeName, methods) {\n  if (assert) assert(constructor, isFunction);\n  if (assert) assert(typeName, isString);\n\n  constructor.prototype = new Logic.Formula();\n  constructor.prototype.type = typeName;\n  if (methods) {\n    _.extend(constructor.prototype, methods);\n  }\n};\n\n// Returns a list of Clauses that together require the Formula to be\n// true, or false (depending on isTrue; both cases must be\n// implemented).  A single Clause may also be returned.  The\n// implementation should call the termifier to convert terms and\n// formulas to NumTerms specific to a solver instance, and use them to\n// construct a Logic.Clause.\nLogic.Formula.prototype.generateClauses = function (isTrue, termifier) {\n  throw new Error(\"Cannot generate this Formula; it must be expanded\");\n};\n// All Formulas have a globally-unique id so that Solvers can track them.\n// It is assigned lazily.\nLogic.Formula._nextGuid = 1;\nLogic.Formula.prototype._guid = null;\nLogic.Formula.prototype.guid = function () {\n  if (this._guid === null) {\n    this._guid = Logic.Formula._nextGuid++;\n  }\n  return this._guid;\n};\n\n// A \"clause\" is a disjunction of terms, e.g. \"A or B or (not C)\",\n// which we write \"A v B v -C\".  Logic.Clause is mainly an internal\n// Solver data structure, which is the final result of formula\n// generation and mapping variable names to numbers, before passing\n// the clauses to MiniSat.\nLogic.Clause = function (/*formulaOrArray, ...*/) {\n  var terms = _.flatten(arguments);\n  if (assert) assert(terms, isArrayWhere(Logic.isNumTerm));\n\n  this.terms = terms; // immutable [NumTerm]\n};\n\n// Returns a new Clause with the extra term or terms appended\nLogic.Clause.prototype.append = function (/*formulaOrArray, ...*/) {\n  return new Logic.Clause(this.terms.concat(_.flatten(arguments)));\n};\n\nvar FormulaInfo = function () {\n  // We generate a variable when a Formula is used.\n  this.varName = null; // string name of variable\n  this.varNum = null; // number of variable (always positive)\n\n  // A formula variable that is used only in the positive or only\n  // in the negative doesn't need the full set of clauses that\n  // establish a bidirectional implication between the formula and the\n  // variable.  For example, in the formula `Logic.or(\"A\", \"B\")`, with the\n  // formula variable `$or1`, the full set of clauses is `A v B v\n  // -$or1; -A v $or1; -B v $or1`.  If both `$or1` and `-$or1` appear\n  // elsewhere in the set of clauses, then all three of these clauses\n  // are required.  However, somewhat surprisingly, if only `$or1` appears,\n  // then only the first is necessary.  If only `-$or1` appears, then only\n  // the second and third are necessary.\n  //\n  // Suppose the formula A v B is represented by the variable $or1,\n  // and $or1 is only used positively. It's important that A v B being\n  // false forces $or1 to be false, so that when $or1 is used it has\n  // the appropriate effect. For example, if we have the clause $or1 v\n  // C, then A v B being false should force $or1 to be false, which\n  // forces C to be true. So we generate the clause A v B v\n  // -$or1. (The implications of this clause are: If A v B is false,\n  // $or1 must be false. If $or1 is true, A v B must be true.)\n  //\n  // However, in the case where A v B is true, we don't actually\n  // need to insist that the solver set $or1 to true, as long as we\n  // are ok with relaxing the relationship between A v B and $or1\n  // and getting a \"wrong\" value for $or1 in the solution. Suppose\n  // the solver goes to work and at some point determines A v B to\n  // be true. It could set $or1 to true, satisfying all the clauses\n  // where it appears, or it could set $or1 to false, which only\n  // constrains the solution space and doesn't open up any new\n  // solutions for other variables. If the solver happens to find a\n  // solution where A v B is true and $or1 is false, we know there\n  // is a similar solution that makes all the same assignments\n  // except it assigns $or1 to true.\n  //\n  // If a formula is used only negatively, a similar argument applies\n  // but with signs flipped, and if it is used both positively and\n  // negatively, both kinds of clauses must be generated.\n  //\n  // See the mention of \"polarity\" in the MiniSat+ paper\n  // (http://minisat.se/downloads/MiniSat+.pdf).\n  //\n  // These flags are set when generation has been done for the positive\n  // case or the negative case, so that we only generate each one once.\n  this.occursPositively = false;\n  this.occursNegatively = false;\n\n  // If a Formula has been directly required or forbidden, we can\n  // replace it by TRUE or FALSE in subsequent clauses.  Track the\n  // information here.\n  this.isRequired = false;\n  this.isForbidden = false;\n};\n\n\n// The \"termifier\" interface is provided to a Formula's\n// generateClauses method, which must use it to generate Clause\n// objects.\n//\n// The reason for this approach is that it gives the Formula control\n// over the clauses returned, but it gives the Solver control over\n// Formula generation.\nLogic.Termifier = function (solver) {\n  this.solver = solver;\n};\n\n// The main entry point, the `clause` method takes a list of\n// FormulaOrTerms and converts it to a Clause containing NumTerms, *by\n// replacing Formulas with their variables*, creating the variable if\n// necessary.  For example, if an OrFormula is represented by the\n// variable `$or1`, it will be replaced by the numeric version of\n// `$or1` to make the Clause.  When the Clause is actually used, it\n// will trigger generation of the clauses that relate `$or1` to the\n// operands of the OrFormula.\nLogic.Termifier.prototype.clause = function (/*args*/) {\n  var self = this;\n  var formulas = _.flatten(arguments);\n  if (assert) assert(formulas, isArrayWhere(isFormulaOrTerm));\n\n  return new Logic.Clause(_.map(formulas, function (f) {\n    return self.term(f);\n  }));\n};\n\n// The `term` method performs the mapping from FormulaOrTerm to\n// NumTerm.  It's called by `clause` and could be called directly\n// from a Formula's generateClauses if it was useful for some\n// reason.\nLogic.Termifier.prototype.term = function (formula) {\n  return this.solver._formulaToTerm(formula);\n};\n\n// The `generate` method generates clauses for a Formula (or\n// Term).  It should be used carefully, because it works quite\n// differently from passing a Formula into `clause`, which is the\n// normal way for one Formula to refer to another.  When you use a\n// Formula in `clause`, it is replaced by the Formula's variable,\n// and the Solver handles generating the Formula's clauses once.\n// When you use `generate`, this system is bypassed, and the\n// Formula's generateClauses method is called pretty much directly,\n// returning the array of Clauses.\nLogic.Termifier.prototype.generate = function (isTrue, formula) {\n  return this.solver._generateFormula(isTrue, formula, this);\n};\n\n\nLogic.Solver = function () {\n  var self = this;\n\n  self.clauses = []; // mutable [Clause]\n  self._num2name = [null]; // no 0th var\n  self._name2num = {}; // (' '+vname) -> vnum\n\n  // true and false\n  var F = self.getVarNum(Logic.NAME_FALSE, false, true); // 1\n  var T = self.getVarNum(Logic.NAME_TRUE, false, true); // 2\n  if (F !== Logic.NUM_FALSE || T !== Logic.NUM_TRUE) {\n    throw new Error(\"Assertion failure: $T and $F have wrong numeric value\");\n  }\n  self._F_used = false;\n  self._T_used = false;\n  // It's important that these clauses are elements 0 and 1\n  // of the clauses array, so that they can optionally be stripped\n  // off.  For example, _clauseData takes advantage of this fact.\n  self.clauses.push(new Logic.Clause(-Logic.NUM_FALSE));\n  self.clauses.push(new Logic.Clause(Logic.NUM_TRUE));\n\n  self._formulaInfo = {}; // Formula guid -> FormulaInfo\n  // For generating formula variables like \"$or1\", \"$or2\", \"$and1\", \"$and2\"\n  self._nextFormulaNumByType = {}; // Formula type -> next var id\n  // Map of Formulas whose info has `false` for either\n  // `occursPositively` or `occursNegatively`\n  self._ungeneratedFormulas = {}; // varNum -> Formula\n\n  self._numClausesAddedToMiniSat = 0;\n  self._unsat = false; // once true, no solution henceforth\n  self._minisat = new MiniSat(); // this takes some time\n\n  self._termifier = new Logic.Termifier(self);\n};\n\n// Get a var number for vname, assigning it a number if it is new.\n// Setting \"noCreate\" to true causes the function to return 0 instead of\n// creating a new variable.\n// Setting \"_createInternals\" to true grants the ability to create $ variables.\nLogic.Solver.prototype.getVarNum = function (vname, noCreate, _createInternals) {\n  var key = ' '+vname;\n  if (_.has(this._name2num, key)) {\n    return this._name2num[key];\n  } else if (noCreate) {\n    return 0;\n  } else {\n    if (vname.charAt(0) === \"$\" && ! _createInternals) {\n      throw new Error(\"Only generated variable names can start with $\");\n    }\n    var vnum = this._num2name.length;\n    this._name2num[key] = vnum;\n    this._num2name.push(vname);\n    return vnum;\n  }\n};\n\nLogic.Solver.prototype.getVarName = function (vnum) {\n  if (assert) assert(vnum, isInteger);\n\n  var num2name = this._num2name;\n  if (vnum < 1 || vnum >= num2name.length) {\n    throw new Error(\"Bad variable num: \" + vnum);\n  } else {\n    return num2name[vnum];\n  }\n};\n\n// Converts a Term to a NumTerm (if it isn't already).  This is done\n// when a Formula creates Clauses for a Solver, since Clauses require\n// NumTerms.  NumTerms stay the same, while a NameTerm like \"-foo\"\n// might become (say) the number -3.  If a NameTerm names a variable\n// that doesn't exist, it is automatically created, unless noCreate\n// is passed, in which case 0 is returned instead.\nLogic.Solver.prototype.toNumTerm = function (t, noCreate) {\n  var self = this;\n\n  if (assert) assert(t, Logic.isTerm);\n\n  if (typeof t === 'number') {\n    return t;\n  } else { // string\n    var not = false;\n    while (t.charAt(0) === '-') {\n      t = t.slice(1);\n      not = ! not;\n    }\n    var n = self.getVarNum(t, noCreate);\n    if (! n) {\n      return 0; // must be the noCreate case\n    } else {\n      return (not ? -n : n);\n    }\n  }\n};\n\n// Converts a Term to a NameTerm (if it isn't already).\nLogic.Solver.prototype.toNameTerm = function (t) {\n  var self = this;\n\n  if (assert) assert(t, Logic.isTerm);\n\n  if (typeof t === 'string') {\n    // canonicalize, removing leading \"--\"\n    while (t.slice(0, 2) === '--') {\n      t = t.slice(2);\n    }\n    return t;\n  } else { // number\n    var not = false;\n    if (t < 0) {\n      not = true;\n      t = -t;\n    }\n    t = self.getVarName(t);\n    if (not) {\n      t = '-' + t;\n    }\n    return t;\n  }\n};\n\nLogic.Solver.prototype._addClause = function (cls, _extraTerms,\n                                              _useTermOverride) {\n  var self = this;\n\n  if (assert) assert(cls, Logic.isClause);\n\n  var extraTerms = null;\n  if (_extraTerms) {\n    extraTerms = _extraTerms;\n    if (assert) assert(extraTerms, isArrayWhere(Logic.isNumTerm));\n  }\n\n  var usedF = false;\n  var usedT = false;\n\n  var numRealTerms = cls.terms.length;\n  if (extraTerms) {\n    // extraTerms are added to the clause as is.  Formula variables in\n    // extraTerms do not cause Formula clause generation, which is\n    // necessary to implement Formula clause generation.\n    cls = cls.append(extraTerms);\n  }\n\n  for (var i = 0; i < cls.terms.length; i++) {\n    var t = cls.terms[i];\n    var v = (t < 0) ? -t : t;\n    if (v === Logic.NUM_FALSE) {\n      usedF = true;\n    } else if (v === Logic.NUM_TRUE) {\n      usedT = true;\n    } else if (v < 1 || v >= self._num2name.length) {\n      throw new Error(\"Bad variable number: \" + v);\n    } else if (i < numRealTerms) {\n      if (_useTermOverride) {\n        _useTermOverride(t);\n      } else {\n        self._useFormulaTerm(t);\n      }\n    }\n  }\n\n  this._F_used = (this._F_used || usedF);\n  this._T_used = (this._T_used || usedT);\n\n  this.clauses.push(cls);\n};\n\n// When we actually use a Formula variable, generate clauses for it,\n// based on whether the usage is positive or negative.  For example,\n// if the Formula `Logic.or(\"X\", \"Y\")` is represented by `$or1`, which\n// is variable number 5, then when you actually use 5 or -5 in a clause,\n// the clauses \"X v Y v -5\" (when you use 5) or \"-X v 5; -Y v 5\"\n// (when you use -5) will be generated.  The clause \"X v Y v -5\"\n// is equivalent to \"5 => X v Y\" (or -(X v Y) => -5), while the clauses\n// \"-X v 5; -Y v 5\" are equivalent to \"-5 => -X; -5 => -Y\" (or\n// \"X => 5; Y => 5\").\n\nLogic.Solver.prototype._useFormulaTerm = function (t, _addClausesOverride) {\n  var self = this;\n  if (assert) assert(t, Logic.isNumTerm);\n  var v = (t < 0) ? -t : t;\n\n  if (! _.has(self._ungeneratedFormulas, v)) {\n    return;\n  }\n\n  // using a Formula's var; maybe have to generate clauses\n  // for the Formula\n  var formula = self._ungeneratedFormulas[v];\n  var info = self._getFormulaInfo(formula);\n  var positive = t > 0;\n\n  // To avoid overflowing the JS stack, defer calls to addClause.\n  // The way we get overflows is when Formulas are deeply nested\n  // (which happens naturally when you call Logic.sum or\n  // Logic.weightedSum on a long list of terms), which causes\n  // addClause to call useFormulaTerm to call addClause, and so\n  // on.  Approach:  The outermost useFormulaTerm keeps a list\n  // of clauses to add, and then adds them in a loop using a\n  // special argument to addClause that passes a special argument\n  // to useFormulaTerm that causes those clauses to go into the\n  // list too.  Code outside of `_useFormulaTerm` and `_addClause(s)`\n  // does not have to pass these special arguments to call them.\n  var deferredAddClauses = null;\n  var addClauses;\n  if (! _addClausesOverride) {\n    deferredAddClauses = [];\n    addClauses = function (clauses, extraTerms) {\n      deferredAddClauses.push({clauses: clauses,\n                               extraTerms: extraTerms});\n    };\n  } else {\n    addClauses = _addClausesOverride;\n  }\n\n  if (positive && ! info.occursPositively) {\n    // generate clauses for the formula.\n    // Eg, if we use variable `X` which represents the formula\n    // `A v B`, add the clause `A v B v -X`.\n    // By using the extraTerms argument to addClauses, we avoid\n    // treating this as a negative occurrence of X.\n    info.occursPositively = true;\n    var clauses = self._generateFormula(true, formula);\n    addClauses(clauses, [-v]);\n  } else if ((! positive) && ! info.occursNegatively) {\n    // Eg, if we have the term `-X` where `X` represents the\n    // formula `A v B`, add the clauses `-A v X` and `-B v X`.\n    // By using the extraTerms argument to addClauses, we avoid\n    // treating this as a positive occurrence of X.\n    info.occursNegatively = true;\n    var clauses = self._generateFormula(false, formula);\n    addClauses(clauses, [v]);\n  }\n  if (info.occursPositively && info.occursNegatively) {\n    delete self._ungeneratedFormulas[v];\n  }\n\n  if (! (deferredAddClauses && deferredAddClauses.length)) {\n    return;\n  }\n\n  var useTerm = function (t) {\n    self._useFormulaTerm(t, addClauses);\n  };\n  // This is the loop that turns recursion into iteration.\n  // When addClauses calls useTerm, which calls useFormulaTerm,\n  // the nested useFormulaTerm will add any clauses to our\n  // own deferredAddClauses list.\n  while (deferredAddClauses.length) {\n    var next = deferredAddClauses.pop();\n    self._addClauses(next.clauses, next.extraTerms, useTerm);\n  }\n};\n\nLogic.Solver.prototype._addClauses = function (array, _extraTerms,\n                                               _useTermOverride) {\n  if (assert) assert(array, isArrayWhere(Logic.isClause));\n  var self = this;\n  _.each(array, function (cls) {\n    self._addClause(cls, _extraTerms, _useTermOverride);\n  });\n};\n\nLogic.Solver.prototype.require = function (/*formulaOrArray, ...*/) {\n  this._requireForbidImpl(true, _.flatten(arguments));\n};\n\nLogic.Solver.prototype.forbid = function (/*formulaOrArray, ...*/) {\n  this._requireForbidImpl(false, _.flatten(arguments));\n};\n\nLogic.Solver.prototype._requireForbidImpl = function (isRequire, formulas) {\n  var self = this;\n  if (assert) assert(formulas, isArrayWhere(isFormulaOrTerm));\n\n  _.each(formulas, function (f) {\n    if (f instanceof Logic.NotFormula) {\n      self._requireForbidImpl(!isRequire, [f.operand]);\n    } else if (f instanceof Logic.Formula) {\n      var info = self._getFormulaInfo(f);\n      if (info.varNum !== null) {\n        var sign = isRequire ? 1 : -1;\n        self._addClause(new Logic.Clause(sign*info.varNum));\n      } else {\n        self._addClauses(self._generateFormula(isRequire, f));\n      }\n      if (isRequire) {\n        info.isRequired = true;\n      } else {\n        info.isForbidden = true;\n      }\n    } else {\n      self._addClauses(self._generateFormula(isRequire, f));\n    }\n  });\n};\n\nLogic.Solver.prototype._generateFormula = function (isTrue, formula, _termifier) {\n  var self = this;\n  if (assert) assert(formula, isFormulaOrTerm);\n\n  if (formula instanceof Logic.NotFormula) {\n    return self._generateFormula(!isTrue, formula.operand);\n  } else if (formula instanceof Logic.Formula) {\n    var info = self._getFormulaInfo(formula);\n    if ((isTrue && info.isRequired) ||\n        (!isTrue && info.isForbidden)) {\n      return [];\n      } else if ((isTrue && info.isForbidden) ||\n                 (!isTrue && info.isRequired)) {\n        return [new Logic.Clause()]; // never satisfied clause\n      } else {\n        var ret = formula.generateClauses(isTrue,\n                                          _termifier || self._termifier);\n        return _.isArray(ret) ? ret : [ret];\n      }\n  } else { // Term\n    var t = self.toNumTerm(formula);\n    var sign = isTrue ? 1 : -1;\n    if (t === sign*Logic.NUM_TRUE || t === -sign*Logic.NUM_FALSE) {\n      return [];\n    } else if (t === sign*Logic.NUM_FALSE || t === -sign*Logic.NUM_TRUE) {\n      return [new Logic.Clause()]; // never satisfied clause\n    } else {\n      return [new Logic.Clause(sign*t)];\n    }\n  }\n};\n\n// Get clause data as an array of arrays of integers,\n// for testing and debugging purposes.\nLogic.Solver.prototype._clauseData = function () {\n  var clauses = _.pluck(this.clauses, 'terms');\n  if (! this._T_used) {\n    clauses.splice(1, 1);\n  }\n  if (! this._F_used) {\n    clauses.splice(0, 1);\n  }\n  return clauses;\n};\n\n// Get clause data as an array of human-readable strings,\n// for testing and debugging purposes.\n// A clause might look like \"A v -B\" (where \"v\" represents\n// and OR operator).\nLogic.Solver.prototype._clauseStrings = function () {\n  var self = this;\n  var clauseData = self._clauseData();\n  return _.map(clauseData, function (clause) {\n    return _.map(clause, function (nterm) {\n      var str = self.toNameTerm(nterm);\n      if (/\\s/.test(str)) {\n        // write name in quotes for readability.  we don't bother\n        // making this string machine-parsable in the general case.\n        var sign = '';\n        if (str.charAt(0) === '-') {\n          // temporarily remove '-'\n          sign = '-';\n          str = str.slice(1);\n        }\n        str = sign + '\"' + str + '\"';\n      }\n      return str;\n    }).join(' v ');\n  });\n};\n\nLogic.Solver.prototype._getFormulaInfo = function (formula, _noCreate) {\n  var self = this;\n  var guid = formula.guid();\n  if (! self._formulaInfo[guid]) {\n    if (_noCreate) {\n      return null;\n    }\n    self._formulaInfo[guid] = new FormulaInfo();\n  }\n  return self._formulaInfo[guid];\n};\n\n// Takes a Formula or an array of Formulas, returns a NumTerm or\n// array of NumTerms.\nLogic.Solver.prototype._formulaToTerm = function (formula) {\n  var self = this;\n\n  if (_.isArray(formula)) {\n    if (assert) assert(formula, isArrayWhere(isFormulaOrTerm));\n    return _.map(formula, _.bind(self._formulaToTerm, self));\n  } else {\n    if (assert) assert(formula, isFormulaOrTerm);\n  }\n\n  if (formula instanceof Logic.NotFormula) {\n    // shortcut that avoids creating a variable called\n    // something like \"$not1\" when you use Logic.not(formula).\n    return Logic.not(self._formulaToTerm(formula.operand));\n  } else if (formula instanceof Logic.Formula) {\n    var info = this._getFormulaInfo(formula);\n    if (info.isRequired) {\n      return Logic.NUM_TRUE;\n    } else if (info.isForbidden) {\n      return Logic.NUM_FALSE;\n    } else if (info.varNum === null) {\n      // generate a Solver-local formula variable like \"$or1\"\n      var type = formula.type;\n      if (! this._nextFormulaNumByType[type]) {\n        this._nextFormulaNumByType[type] = 1;\n      }\n      var numForVarName = this._nextFormulaNumByType[type]++;\n      info.varName = \"$\" + formula.type + numForVarName;\n      info.varNum = this.getVarNum(info.varName, false, true);\n      this._ungeneratedFormulas[info.varNum] = formula;\n    }\n    return info.varNum;\n  } else {\n    // formula is a Term\n    return self.toNumTerm(formula);\n  }\n};\n\nLogic.or = function (/*formulaOrArray, ...*/) {\n  var args = _.flatten(arguments);\n  if (args.length === 0) {\n    return Logic.FALSE;\n  } else if (args.length === 1) {\n    if (assert) assert(args[0], isFormulaOrTerm);\n    return args[0];\n  } else {\n    return new Logic.OrFormula(args);\n  }\n};\n\nLogic.OrFormula = function (operands) {\n  if (assert) assert(operands, isArrayWhere(isFormulaOrTerm));\n  this.operands = operands;\n};\n\nLogic._defineFormula(Logic.OrFormula, 'or', {\n  generateClauses: function (isTrue, t) {\n    if (isTrue) {\n      // eg A v B v C\n      return t.clause(this.operands);\n    } else {\n      // eg -A; -B; -C\n      var result = [];\n      _.each(this.operands, function (o) {\n        result.push.apply(result, t.generate(false, o));\n      });\n      return result;\n    }\n  }\n});\n\nLogic.NotFormula = function (operand) {\n  if (assert) assert(operand, isFormulaOrTerm);\n  this.operand = operand;\n};\n\n// No generation or simplification for 'not'; it is\n// simplified away by the solver itself.\nLogic._defineFormula(Logic.NotFormula, 'not');\n\nLogic.and = function (/*formulaOrArray, ...*/) {\n  var args = _.flatten(arguments);\n  if (args.length === 0) {\n    return Logic.TRUE;\n  } else if (args.length === 1) {\n    if (assert) assert(args[0], isFormulaOrTerm);\n    return args[0];\n  } else {\n    return new Logic.AndFormula(args);\n  }\n};\n\nLogic.AndFormula = function (operands) {\n  if (assert) assert(operands, isArrayWhere(isFormulaOrTerm));\n  this.operands = operands;\n};\n\nLogic._defineFormula(Logic.AndFormula, 'and', {\n  generateClauses: function (isTrue, t) {\n    if (isTrue) {\n      // eg A; B; C\n      var result = [];\n      _.each(this.operands, function (o) {\n        result.push.apply(result, t.generate(true, o));\n      });\n      return result;\n    } else {\n      // eg -A v -B v -C\n      return t.clause(_.map(this.operands, Logic.not));\n    }\n  }\n});\n\n// Group `array` into groups of N, where the last group\n// may be shorter than N.  group([a,b,c,d,e], 3) => [[a,b,c],[d,e]]\nvar group = function (array, N) {\n  var ret = [];\n  for (var i = 0; i < array.length; i += N) {\n    ret.push(array.slice(i, i+N));\n  }\n  return ret;\n};\n\nLogic.xor = function (/*formulaOrArray, ...*/) {\n  var args = _.flatten(arguments);\n  if (args.length === 0) {\n    return Logic.FALSE;\n  } else if (args.length === 1) {\n    if (assert) assert(args[0], isFormulaOrTerm);\n    return args[0];\n  } else {\n    return new Logic.XorFormula(args);\n  }\n};\n\nLogic.XorFormula = function (operands) {\n  if (assert) assert(operands, isArrayWhere(isFormulaOrTerm));\n  this.operands = operands;\n};\n\nLogic._defineFormula(Logic.XorFormula, 'xor', {\n  generateClauses: function (isTrue, t) {\n    var args = this.operands;\n    var not = Logic.not;\n    if (args.length > 3) {\n      return t.generate(\n        isTrue,\n        Logic.xor(\n          _.map(group(this.operands, 3), function (group) {\n            return Logic.xor(group);\n          })));\n    } else if (isTrue) { // args.length <= 3\n      if (args.length === 0) {\n        return t.clause(); // always fail\n      } else if (args.length === 1) {\n        return t.clause(args[0]);\n      } else if (args.length === 2) {\n        var A = args[0], B = args[1];\n        return [t.clause(A, B), // A v B\n                t.clause(not(A), not(B))]; // -A v -B\n      } else if (args.length === 3) {\n        var A = args[0], B = args[1], C = args[2];\n        return [t.clause(A, B, C), // A v B v C\n                t.clause(A, not(B), not(C)), // A v -B v -C\n                t.clause(not(A), B, not(C)), // -A v B v -C\n                t.clause(not(A), not(B), C)]; // -A v -B v C\n      }\n    } else { // !isTrue, args.length <= 3\n      if (args.length === 0) {\n        return []; // always succeed\n      } else if (args.length === 1) {\n        return t.clause(not(args[0]));\n      } else if (args.length === 2) {\n        var A = args[0], B = args[1];\n        return [t.clause(A, not(B)), // A v -B\n                t.clause(not(A), B)]; // -A v B\n      } else if (args.length === 3) {\n        var A = args[0], B = args[1], C = args[2];\n        return [t.clause(not(A), not(B), not(C)), // -A v -B v -C\n                t.clause(not(A), B, C), // -A v B v C\n                t.clause(A, not(B), C), // A v -B v C\n                t.clause(A, B, not(C))]; // A v B v -C\n      }\n    }\n  }\n});\n\nLogic.atMostOne = function (/*formulaOrArray, ...*/) {\n  var args = _.flatten(arguments);\n  if (args.length <= 1) {\n    return Logic.TRUE;\n  } else {\n    return new Logic.AtMostOneFormula(args);\n  }\n};\n\nLogic.AtMostOneFormula = function (operands) {\n  if (assert) assert(operands, isArrayWhere(isFormulaOrTerm));\n  this.operands = operands;\n};\n\nLogic._defineFormula(Logic.AtMostOneFormula, 'atMostOne', {\n  generateClauses: function (isTrue, t) {\n     var args = this.operands;\n     var not = Logic.not;\n     if (args.length <= 1) {\n       return []; // always succeed\n     } else if (args.length === 2) {\n       return t.generate(isTrue, Logic.not(Logic.and(args)));\n     } else if (isTrue && args.length === 3) {\n       // Pick any two args; at least one is false (they aren't\n       // both true).  This strategy would also work for\n       // N>3, and could provide a speed-up by having more clauses\n       // (N^2) but fewer propagation steps.  No speed-up was\n       // observed on the Sudoku test from using this strategy\n       // up to N=10.\n       var clauses = [];\n       for (var i = 0; i < args.length; i++) {\n         for (var j = i+1; j < args.length; j++) {\n           clauses.push(t.clause(not(args[i]), not(args[j])));\n         }\n       }\n       return clauses;\n     } else if ((! isTrue) && args.length === 3) {\n       var A = args[0], B = args[1], C = args[2];\n       // Pick any two args; at least one is true (they aren't\n       // both false).  This only works for N=3.\n       return [t.clause(A, B), t.clause(A, C), t.clause(B, C)];\n     } else {\n       // See the \"commander variables\" technique from:\n       // http://www.cs.cmu.edu/~wklieber/papers/2007_efficient-cnf-encoding-for-selecting-1.pdf\n       // But in short: At most one group has at least one \"true\",\n       // and each group has at most one \"true\".  Formula generation\n       // automatically generates the right implications.\n       var groups = group(args, 3);\n       var ors = _.map(groups, function (g) { return Logic.or(g); });\n       if (groups[groups.length - 1].length < 2) {\n         // Remove final group of length 1 so we don't generate\n         // no-op clauses of one sort or another\n         groups.pop();\n       }\n       var atMostOnes = _.map(groups, function (g) {\n         return Logic.atMostOne(g);\n       });\n       return t.generate(isTrue, Logic.and(Logic.atMostOne(ors), atMostOnes));\n     }\n  }\n});\n\nLogic.implies = function (A, B) {\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.implies\");\n  return new Logic.ImpliesFormula(A, B);\n};\n\nLogic.ImpliesFormula = function (A, B) {\n  if (assert) assert(A, isFormulaOrTerm);\n  if (assert) assert(B, isFormulaOrTerm);\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.implies\");\n  this.A = A;\n  this.B = B;\n};\n\nLogic._defineFormula(Logic.ImpliesFormula, 'implies', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(isTrue, Logic.or(Logic.not(this.A), this.B));\n  }\n});\n\nLogic.equiv = function (A, B) {\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.equiv\");\n  return new Logic.EquivFormula(A, B);\n};\n\nLogic.EquivFormula = function (A, B) {\n  if (assert) assert(A, isFormulaOrTerm);\n  if (assert) assert(B, isFormulaOrTerm);\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.equiv\");\n  this.A = A;\n  this.B = B;\n};\n\nLogic._defineFormula(Logic.EquivFormula, 'equiv', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(!isTrue, Logic.xor(this.A, this.B));\n  }\n});\n\nLogic.exactlyOne = function (/*formulaOrArray, ...*/) {\n  var args = _.flatten(arguments);\n  if (args.length === 0) {\n    return Logic.FALSE;\n  } else if (args.length === 1) {\n    if (assert) assert(args[0], isFormulaOrTerm);\n    return args[0];\n  } else {\n    return new Logic.ExactlyOneFormula(args);\n  }\n};\n\nLogic.ExactlyOneFormula = function (operands) {\n  if (assert) assert(operands, isArrayWhere(isFormulaOrTerm));\n  this.operands = operands;\n};\n\nLogic._defineFormula(Logic.ExactlyOneFormula, 'exactlyOne', {\n  generateClauses: function (isTrue, t) {\n    var args = this.operands;\n    if (args.length < 3) {\n      return t.generate(isTrue, Logic.xor(args));\n    } else {\n      return t.generate(isTrue, Logic.and(Logic.atMostOne(args),\n                                          Logic.or(args)));\n    }\n  }\n});\n\n// List of 0 or more formulas or terms, which together represent\n// a non-negative integer.  Least significant bit is first.  That is,\n// the kth array element has a place value of 2^k.\nLogic.Bits = function (formulaArray) {\n  if (assert) assert(formulaArray, isArrayWhere(isFormulaOrTerm));\n  this.bits = formulaArray; // public, immutable\n};\n\nLogic.constantBits = function (wholeNumber) {\n  if (assert) assert(wholeNumber, Logic.isWholeNumber);\n  var result = [];\n  while (wholeNumber) {\n    result.push((wholeNumber & 1) ? Logic.TRUE : Logic.FALSE);\n    wholeNumber >>>= 1;\n  }\n  return new Logic.Bits(result);\n};\n\nLogic.variableBits = function (baseName, nbits) {\n  if (assert) assert(nbits, Logic.isWholeNumber);\n  var result = [];\n  for (var i = 0; i < nbits; i++) {\n    result.push(baseName + '$' + i);\n  }\n  return new Logic.Bits(result);\n};\n\n// bits1 <= bits2\nLogic.lessThanOrEqual = function (bits1, bits2) {\n  return new Logic.LessThanOrEqualFormula(bits1, bits2);\n};\n\nLogic.LessThanOrEqualFormula = function (bits1, bits2) {\n  if (assert) assert(bits1, Logic.isBits);\n  if (assert) assert(bits2, Logic.isBits);\n  if (assert) assertNumArgs(arguments.length, 2, \"Bits comparison function\");\n  this.bits1 = bits1;\n  this.bits2 = bits2;\n};\n\nvar genLTE = function (bits1, bits2, t, notEqual) {\n  var ret = [];\n  // clone so we can mutate them in place\n  var A = bits1.bits.slice();\n  var B = bits2.bits.slice();\n  if (notEqual && ! bits2.bits.length) {\n    // can't be less than 0\n    return t.clause();\n  }\n  // if A is longer than B, the extra (high) bits\n  // must be 0.\n  while (A.length > B.length) {\n    var hi = A.pop();\n    ret.push(t.clause(Logic.not(hi)));\n  }\n  // now B.length >= A.length\n  // Let xors[i] be (A[i] xor B[i]), or just\n  // B[i] if A is too short.\n  var xors = _.map(B, function (b, i) {\n    if (i < A.length) {\n      return Logic.xor(A[i], b);\n    } else {\n      return b;\n    }\n  });\n\n  // Suppose we are comparing 3-bit numbers, requiring\n  // that ABC <= XYZ.  Here is what we require:\n  //\n  // * It is false that A=1 and X=0.\n  // * It is false that A=X, B=1, and Y=0.\n  // * It is false that A=X, B=Y, C=1, and Y=0.\n  //\n  // Translating these into clauses using DeMorgan's law:\n  //\n  // * A=0 or X=1\n  // * (A xor X) or B=0 or Y=1\n  // * (A xor X) or (B xor Y) or C=0 or Y=1\n  //\n  // Since our arguments are LSB first, in the example\n  // we would be given [C, B, A] and [Z, Y, X] as input.\n  // We iterate over the first argument starting from\n  // the right, and build up a clause by iterating over\n  // the xors from the right.\n  //\n  // If we have ABC <= VWXYZ, then we still have three clauses,\n  // but each one is prefixed with \"V or W or\", because V and W\n  // are at the end of the xors array.  This is equivalent to\n  // padding ABC with two zeros.\n\n  for (var i = A.length-1; i >= 0; i--) {\n    ret.push(t.clause(xors.slice(i+1), Logic.not(A[i]), B[i]));\n  }\n  if (notEqual) {\n    ret.push.apply(ret, t.generate(true, Logic.or(xors)));\n  }\n  return ret;\n};\n\nLogic._defineFormula(Logic.LessThanOrEqualFormula, 'lte', {\n  generateClauses: function (isTrue, t) {\n    if (isTrue) {\n      // bits1 <= bits2\n      return genLTE(this.bits1, this.bits2, t, false);\n    } else {\n      // bits2 < bits1\n      return genLTE(this.bits2, this.bits1, t, true);\n    }\n  }\n});\n\n// bits1 < bits2\nLogic.lessThan = function (bits1, bits2) {\n  return new Logic.LessThanFormula(bits1, bits2);\n};\n\nLogic.LessThanFormula = function (bits1, bits2) {\n  if (assert) assert(bits1, Logic.isBits);\n  if (assert) assert(bits2, Logic.isBits);\n  if (assert) assertNumArgs(arguments.length, 2, \"Bits comparison function\");\n  this.bits1 = bits1;\n  this.bits2 = bits2;\n};\n\nLogic._defineFormula(Logic.LessThanFormula, 'lt', {\n  generateClauses: function (isTrue, t) {\n    if (isTrue) {\n      // bits1 < bits2\n      return genLTE(this.bits1, this.bits2, t, true);\n    } else {\n      // bits2 <= bits1\n      return genLTE(this.bits2, this.bits1, t, false);\n    }\n  }\n});\n\nLogic.greaterThan = function (bits1, bits2) {\n  return Logic.lessThan(bits2, bits1);\n};\n\nLogic.greaterThanOrEqual = function (bits1, bits2) {\n  return Logic.lessThanOrEqual(bits2, bits1);\n};\n\nLogic.equalBits = function (bits1, bits2) {\n  return new Logic.EqualBitsFormula(bits1, bits2);\n};\n\nLogic.EqualBitsFormula = function (bits1, bits2) {\n  if (assert) assert(bits1, Logic.isBits);\n  if (assert) assert(bits2, Logic.isBits);\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.equalBits\");\n  this.bits1 = bits1;\n  this.bits2 = bits2;\n};\n\nLogic._defineFormula(Logic.EqualBitsFormula, 'equalBits', {\n  generateClauses: function (isTrue, t) {\n    var A = this.bits1.bits;\n    var B = this.bits2.bits;\n    var nbits = Math.max(A.length, B.length);\n    var facts = [];\n    for (var i = 0; i < nbits; i++) {\n      if (i >= A.length) {\n        facts.push(Logic.not(B[i]));\n      } else if (i >= B.length) {\n        facts.push(Logic.not(A[i]));\n      } else {\n        facts.push(Logic.equiv(A[i], B[i]));\n      }\n    }\n    return t.generate(isTrue, Logic.and(facts));\n  }\n});\n\n// Definition of full-adder and half-adder:\n//\n// A full-adder is a 3-input, 2-output gate producing the sum of its\n// inputs as a 2-bit binary number. The most significant bit is called\n// \"carry\", the least significant \"sum\". A half-adder does the same\n// thing, but has only 2 inputs (and can therefore never output a\n// \"3\").\n//\n// The half-adder sum bit is really just an XOR, and the carry bit\n// is really just an AND.  However, they get their own formula types\n// here to enhance readability of the generated clauses.\n\nLogic.HalfAdderSum = function (formula1, formula2) {\n  if (assert) assert(formula1, isFormulaOrTerm);\n  if (assert) assert(formula2, isFormulaOrTerm);\n\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.HalfAdderSum\");\n  this.a = formula1;\n  this.b = formula2;\n};\n\nLogic._defineFormula(Logic.HalfAdderSum, 'hsum', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(isTrue, Logic.xor(this.a, this.b));\n  }\n});\n\nLogic.HalfAdderCarry = function (formula1, formula2) {\n  if (assert) assert(formula1, isFormulaOrTerm);\n  if (assert) assert(formula2, isFormulaOrTerm);\n  if (assert) assertNumArgs(arguments.length, 2, \"Logic.HalfAdderCarry\");\n  this.a = formula1;\n  this.b = formula2;\n};\n\nLogic._defineFormula(Logic.HalfAdderCarry, 'hcarry', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(isTrue, Logic.and(this.a, this.b));\n  }\n});\n\nLogic.FullAdderSum = function (formula1, formula2, formula3) {\n  if (assert) assert(formula1, isFormulaOrTerm);\n  if (assert) assert(formula2, isFormulaOrTerm);\n  if (assert) assert(formula3, isFormulaOrTerm);\n  if (assert) assertNumArgs(arguments.length, 3, \"Logic.FullAdderSum\");\n  this.a = formula1;\n  this.b = formula2;\n  this.c = formula3;\n};\n\nLogic._defineFormula(Logic.FullAdderSum, 'fsum', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(isTrue, Logic.xor(this.a, this.b, this.c));\n  }\n});\n\nLogic.FullAdderCarry = function (formula1, formula2, formula3) {\n  if (assert) assert(formula1, isFormulaOrTerm);\n  if (assert) assert(formula2, isFormulaOrTerm);\n  if (assert) assert(formula3, isFormulaOrTerm);\n  if (assert) assertNumArgs(arguments.length, 3, \"Logic.FullAdderCarry\");\n  this.a = formula1;\n  this.b = formula2;\n  this.c = formula3;\n};\n\nLogic._defineFormula(Logic.FullAdderCarry, 'fcarry', {\n  generateClauses: function (isTrue, t) {\n    return t.generate(! isTrue,\n                      Logic.atMostOne(this.a, this.b, this.c));\n  }\n});\n\n// Implements the Adder strategy from the MiniSat+ paper:\n// http://minisat.se/downloads/MiniSat+.pdf\n// \"Translating Pseudo-boolean Constraints into SAT\"\n//\n// Takes a list of list of Formulas.  The first list is bits\n// to give weight 1; the second is bits to give weight 2;\n// the third is bits to give weight 4; and so on.\n//\n// Returns an array of Logic.FormulaOrTerm.\nvar binaryWeightedSum = function (varsByWeight) {\n  if (assert) assert(varsByWeight,\n                     isArrayWhere(isArrayWhere(isFormulaOrTerm)));\n  // initialize buckets to a two-level clone of varsByWeight\n  var buckets = _.map(varsByWeight, _.clone);\n  var lowestWeight = 0; // index of the first non-empty array\n  var output = [];\n  while (lowestWeight < buckets.length) {\n    var bucket = buckets[lowestWeight];\n    if (! bucket.length) {\n      output.push(Logic.FALSE);\n      lowestWeight++;\n    } else if (bucket.length === 1) {\n      output.push(bucket[0]);\n      lowestWeight++;\n    } else if (bucket.length === 2) {\n      var sum = new Logic.HalfAdderSum(bucket[0], bucket[1]);\n      var carry = new Logic.HalfAdderCarry(bucket[0], bucket[1]);\n      bucket.length = 0;\n      bucket.push(sum);\n      pushToNth(buckets, lowestWeight+1, carry);\n    } else {\n      // Whether we take variables from the start or end of the\n      // bucket (i.e. `pop` or `shift`) determines the shape of the tree.\n      // Empirically, some logic problems are faster with `shift` (2x or so),\n      // but `pop` gives an order-of-magnitude speed-up on the Meteor Version\n      // Solver \"benchmark-tests\" suite (Slava's benchmarks based on data from\n      // Rails).  So, `pop` it is.\n      var c = bucket.pop();\n      var b = bucket.pop();\n      var a = bucket.pop();\n      var sum = new Logic.FullAdderSum(a, b, c);\n      var carry = new Logic.FullAdderCarry(a, b, c);\n      bucket.push(sum);\n      pushToNth(buckets, lowestWeight+1, carry);\n    }\n  }\n  return output;\n};\n\n// Push `newItem` onto the array at arrayOfArrays[n],\n// first ensuring that it exists by pushing empty\n// arrays onto arrayOfArrays.\nvar pushToNth = function (arrayOfArrays, n, newItem) {\n  while (n >= arrayOfArrays.length) {\n    arrayOfArrays.push([]);\n  }\n  arrayOfArrays[n].push(newItem);\n};\n\nvar checkWeightedSumArgs = function (formulas, weights) {\n  if (assert) assert(formulas, isArrayWhere(isFormulaOrTerm));\n  if (typeof weights === 'number') {\n    if (assert) assert(weights, Logic.isWholeNumber);\n  } else {\n    if (assert) assert(weights, isArrayWhere(Logic.isWholeNumber));\n    if (formulas.length !== weights.length) {\n      throw new Error(\"Formula array and weight array must be same length\" +\n                      \"; they are \" + formulas.length + \" and \" + weights.length);\n    }\n  }\n};\n\nLogic.weightedSum = function (formulas, weights) {\n  checkWeightedSumArgs(formulas, weights);\n\n  if (formulas.length === 0) {\n    return new Logic.Bits([]);\n  }\n\n  if (typeof weights === 'number') {\n    weights = _.map(formulas, function () { return weights; });\n  }\n\n  var binaryWeighted = [];\n  _.each(formulas, function (f, i) {\n    var w = weights[i];\n    var whichBit = 0;\n    while (w) {\n      if (w & 1) {\n        pushToNth(binaryWeighted, whichBit, f);\n      }\n      w >>>= 1;\n      whichBit++;\n    }\n  });\n\n  return new Logic.Bits(binaryWeightedSum(binaryWeighted));\n};\n\nLogic.sum = function (/*formulaOrBitsOrArray, ...*/) {\n  var things = _.flatten(arguments);\n  if (assert) assert(things, isArrayWhere(isFormulaOrTermOrBits));\n\n  var binaryWeighted = [];\n  _.each(things, function (x) {\n    if (x instanceof Logic.Bits) {\n      _.each(x.bits, function (b, i) {\n        pushToNth(binaryWeighted, i, b);\n      });\n    } else {\n      pushToNth(binaryWeighted, 0, x);\n    }\n  });\n\n  return new Logic.Bits(binaryWeightedSum(binaryWeighted));\n};\n\n////////////////////////////////////////\n\nLogic.Solver.prototype.solve = function (_assumpVar) {\n  var self = this;\n  if (_assumpVar !== undefined) {\n    if (! (_assumpVar >= 1)) {\n      throw new Error(\"_assumpVar must be a variable number\");\n    }\n  }\n\n  if (self._unsat) {\n    return null;\n  }\n\n  while (self._numClausesAddedToMiniSat < self.clauses.length) {\n    var i = self._numClausesAddedToMiniSat;\n    var terms = self.clauses[i].terms;\n    if (assert) assert(terms, isArrayWhere(Logic.isNumTerm));\n    var stillSat = self._minisat.addClause(terms);\n    self._numClausesAddedToMiniSat++;\n    if (! stillSat) {\n      self._unsat = true;\n      return null;\n    }\n  }\n\n  if (assert) assert(this._num2name.length - 1, Logic.isWholeNumber);\n  self._minisat.ensureVar(this._num2name.length - 1);\n\n  var stillSat = (_assumpVar ?\n                  self._minisat.solveAssuming(_assumpVar) :\n                  self._minisat.solve());\n  if (! stillSat) {\n    if (! _assumpVar) {\n      self._unsat = true;\n    }\n    return null;\n  }\n\n  return new Logic.Solution(self, self._minisat.getSolution());\n};\n\nLogic.Solver.prototype.solveAssuming = function (formula) {\n  if (assert) assert(formula, isFormulaOrTerm);\n\n  // Wrap the formula in a formula of type Assumption, so that\n  // we always generate a var like `$assump123`, regardless\n  // of whether `formula` is a Term, a NotFormula, an already\n  // required or forbidden Formula, etc.\n  var assump = new Logic.Assumption(formula);\n  var assumpVar = this._formulaToTerm(assump);\n  if (! (typeof assumpVar === 'number' && assumpVar > 0)) {\n    throw new Error(\"Assertion failure: not a positive numeric term\");\n  }\n\n  // Generate clauses as if we used the assumption variable in a\n  // clause, in the positive.  So if we assume \"A v B\", we might get a\n  // clause like \"A v B v -$assump123\" (or actually, \"$or1 v\n  // -$assump123\"), as if we had used $assump123 in a clause.  Instead\n  // of using it in a clause, though, we temporarily assume it to be\n  // true.\n  this._useFormulaTerm(assumpVar);\n\n  var result = this.solve(assumpVar);\n  // Tell MiniSat that we will never use assumpVar again.\n  // The formula may be used again, however.  (For example, you\n  // can solve assuming a formula F, and if it works, require F.)\n  this._minisat.retireVar(assumpVar);\n\n  return result;\n};\n\nLogic.Assumption = function (formula) {\n  if (assert) assert(formula, isFormulaOrTerm);\n  this.formula = formula;\n};\n\nLogic._defineFormula(Logic.Assumption, 'assump', {\n  generateClauses: function (isTrue, t) {\n    if (isTrue) {\n      return t.clause(this.formula);\n    } else {\n      return t.clause(Logic.not(this.formula));\n    }\n  }\n});\n\nLogic.Solution = function (_solver, _assignment) {\n  var self = this;\n  self._solver = _solver;\n  self._assignment = _assignment;\n\n  // save a snapshot of which formulas have variables designated\n  // for them, but where we haven't generated clauses that constrain\n  // those variables in both the positive and the negative direction.\n  self._ungeneratedFormulas = _.clone(_solver._ungeneratedFormulas);\n\n  self._formulaValueCache = {};\n  self._termifier = new Logic.Termifier(self._solver);\n  // Normally, when a Formula uses a Termifier to generate clauses that\n  // refer to other Formulas, the Termifier replaces the Formulas with\n  // their variables.  We hijack this mechanism to replace the Formulas\n  // with their truth variables instead, leading to recursive evaluation.\n  // Note that we cache the evaluated truth values of Formulas to avoid\n  // redundant evaluation.\n  self._termifier.term = function (formula) {\n    return self.evaluate(formula) ? Logic.NUM_TRUE : Logic.NUM_FALSE;\n  };\n\n  // When true, evaluation doesn't throw errors when\n  // `evaluate` or `getWeightedSum` encounter named variables that are\n  // unknown or variables that weren't present when this Solution was\n  // generated.  Instead, the unknown variables are assumed to be false.\n  self._ignoreUnknownVariables = false;\n};\n\nLogic.Solution.prototype.ignoreUnknownVariables = function () {\n  // We only make this settable one way (false to true).\n  // Setting it back and forth would be questionable, since we keep\n  // a cache of Formula evaluations.\n  this._ignoreUnknownVariables = true;\n};\n\n// Get a map of variables to their assignments,\n// such as `{A: true, B: false, C: true}`.\n// Internal variables are excluded.\nLogic.Solution.prototype.getMap = function () {\n  var solver = this._solver;\n  var assignment = this._assignment;\n  var result = {};\n  for (var i = 1; i < assignment.length; i++) {\n    var name = solver.getVarName(i);\n    if (name && name.charAt(0) !== '$') {\n      result[name] = assignment[i];\n    }\n  }\n  return result;\n};\n\n// Get an array of variables that are assigned\n// `true` by this solution, sorted by name.\n// Internal variables are excluded.\nLogic.Solution.prototype.getTrueVars = function () {\n  var solver = this._solver;\n  var assignment = this._assignment;\n  var result = [];\n  for (var i = 1; i < assignment.length; i++) {\n    if (assignment[i]) {\n      var name = solver.getVarName(i);\n      if (name && name.charAt(0) !== '$') {\n        result.push(name);\n      }\n    }\n  }\n  result.sort();\n  return result;\n};\n\n// Get a Formula that says that the variables are assigned\n// according to this solution.  (Internal variables are\n// excluded.)  By forbidding this Formula and solving again,\n// you can see if there are other solutions.\nLogic.Solution.prototype.getFormula = function () {\n  var solver = this._solver;\n  var assignment = this._assignment;\n  var terms = [];\n  for (var i = 1; i < assignment.length; i++) {\n    var name = solver.getVarName(i);\n    if (name && name.charAt(0) !== '$') {\n      terms.push(assignment[i] ? i : -i);\n    }\n  }\n  return Logic.and(terms);\n};\n\n// Returns a boolean if the argument is a Formula (or Term), and an integer\n// if the argument is a Logic.Bits.\nLogic.Solution.prototype.evaluate = function (formulaOrBits) {\n  var self = this;\n  if (assert) assert(formulaOrBits, isFormulaOrTermOrBits);\n\n  if (formulaOrBits instanceof Logic.Bits) {\n    // Evaluate to an integer\n    var ret = 0;\n    _.each(formulaOrBits.bits, function (f, i) {\n      if (self.evaluate(f)) {\n        ret += 1 << i;\n      }\n    });\n    return ret;\n  }\n\n  var solver = self._solver;\n  var ignoreUnknownVariables = self._ignoreUnknownVariables;\n  var assignment = self._assignment;\n  var formula = formulaOrBits;\n  if (formula instanceof Logic.NotFormula) {\n    return ! self.evaluate(formula.operand);\n  } else if (formula instanceof Logic.Formula) {\n    var cachedResult = self._formulaValueCache[formula.guid()];\n    if (typeof cachedResult === 'boolean') {\n      return cachedResult;\n    } else {\n      var value;\n      var info = solver._getFormulaInfo(formula, true);\n      if (info && info.varNum && info.varNum < assignment.length &&\n          ! _.has(self._ungeneratedFormulas, info.varNum)) {\n        // as an optimization, read the value of the formula directly\n        // from a variable if the formula's clauses were completely\n        // generated at the time of solving.  (We must be careful,\n        // because if we didn't generate both the positive and the\n        // negative polarity clauses for the formula, then the formula\n        // variable is not actually constrained to have the right\n        // value.)\n        value = assignment[info.varNum];\n      } else {\n        var clauses = solver._generateFormula(true, formula, self._termifier);\n        var value = _.all(clauses, function (cls) {\n          return _.any(cls.terms, function (t) {\n            return self.evaluate(t);\n          });\n        });\n      }\n      self._formulaValueCache[formula.guid()] = value;\n      return value;\n    }\n  } else {\n    // Term; convert to numeric (possibly negative), but throw\n    // an error if the name is not found.  If `ignoreUnknownVariables`\n    // is set, return false instead.\n    var numTerm = solver.toNumTerm(formula, true);\n    if (! numTerm) {\n      if (ignoreUnknownVariables) {\n        return false;\n      } else {\n        // formula must be a NameTerm naming a variable that doesn't exist\n        var vname = String(formula).replace(/^-*/, '');\n        throw new Error(\"No such variable: \" + vname);\n      }\n    }\n    var v = numTerm;\n    var isNot = false;\n    if (numTerm < 0) {\n      v = -v;\n      isNot = true;\n    }\n    if (v < 1 || v >= assignment.length) {\n      var vname = v;\n      if (v >= 1 && v < solver._num2name.length) {\n        vname = solver._num2name[v];\n      }\n      if (ignoreUnknownVariables) {\n        return false;\n      } else {\n        throw new Error(\"Variable not part of solution: \" + vname);\n      }\n    }\n    var ret = assignment[v];\n    if (isNot) {\n      ret = ! ret;\n    }\n    return ret;\n  }\n};\n\nLogic.Solution.prototype.getWeightedSum = function (formulas, weights) {\n  checkWeightedSumArgs(formulas, weights);\n\n  var total = 0;\n  if (typeof weights === 'number') {\n    for (var i = 0; i < formulas.length; i++) {\n      total += weights * (this.evaluate(formulas[i]) ? 1 : 0);\n    }\n  } else {\n    for (var i = 0; i < formulas.length; i++) {\n      total += weights[i] * (this.evaluate(formulas[i]) ? 1 : 0);\n    }\n  }\n  return total;\n};\nvar getNonZeroWeightedTerms = function (costTerms, costWeights) {\n  if (typeof costWeights === 'number') {\n    return costWeights ? costTerms : [];\n  } else {\n    var terms = [];\n    for (var i = 0; i < costTerms.length; i++) {\n      if (costWeights[i]) {\n        terms.push(costTerms[i]);\n      }\n    }\n    return terms;\n  }\n};\n\n// See comments on minimizeWeightedSum and maximizeWeightedSum.\nvar minMaxWS = function (solver, solution, costTerms, costWeights, options,\n                         isMin) {\n  var curSolution = solution;\n  var curCost = curSolution.getWeightedSum(costTerms, costWeights);\n\n  var optFormula = options && options.formula;\n  var weightedSum = (optFormula || Logic.weightedSum(costTerms, costWeights));\n\n  var progress = options && options.progress;\n  var strategy = options && options.strategy;\n\n  // array of terms with non-zero weights, populated on demand\n  var nonZeroTerms = null;\n\n  if (isMin && curCost > 0) {\n    // try to skip straight to 0 cost, because if it works, it could\n    // save us some time\n    if (progress) {\n      progress('trying', 0);\n    }\n    var zeroSolution = null;\n    nonZeroTerms = getNonZeroWeightedTerms(costTerms, costWeights);\n    var zeroSolution = solver.solveAssuming(Logic.not(Logic.or(nonZeroTerms)));\n    if (zeroSolution) {\n      curSolution = zeroSolution;\n      curCost = 0;\n    }\n  }\n\n  if (isMin && strategy === 'bottom-up') {\n    for (var trialCost = 1; trialCost < curCost; trialCost++) {\n      if (progress) {\n        progress('trying', trialCost);\n      }\n      var costIsTrialCost = Logic.equalBits(\n        weightedSum, Logic.constantBits(trialCost));\n      var newSolution = solver.solveAssuming(costIsTrialCost);\n      if (newSolution) {\n        curSolution = newSolution;\n        curCost = trialCost;\n        break;\n      }\n    }\n  } else if (strategy && strategy !== 'default') {\n    throw new Error(\"Bad strategy: \" + strategy);\n  } else {\n    strategy = 'default';\n  }\n\n  if (strategy === 'default') {\n    // for minimization, count down from current cost. for maximization,\n    // count up.\n    while (isMin ? curCost > 0 : true) {\n      if (progress) {\n        progress('improving', curCost);\n      }\n      var improvement = (isMin ? Logic.lessThan : Logic.greaterThan)(\n        weightedSum, Logic.constantBits(curCost));\n      var newSolution = solver.solveAssuming(improvement);\n      if (! newSolution) {\n        break;\n      }\n      solver.require(improvement);\n      curSolution = newSolution;\n      curCost = curSolution.getWeightedSum(costTerms, costWeights);\n    }\n  }\n\n  if (isMin && curCost === 0) {\n    // express the requirement that the weighted sum be 0 in an efficient\n    // way for the solver (all terms with non-zero weights must be 0)\n    if (! nonZeroTerms) {\n      nonZeroTerms = getNonZeroWeightedTerms(costTerms, costWeights);\n    }\n    solver.forbid(nonZeroTerms);\n  } else {\n    solver.require(Logic.equalBits(weightedSum, Logic.constantBits(curCost)));\n  }\n\n  if (progress) {\n    progress('finished', curCost);\n  }\n\n  return curSolution;\n};\n\n// Minimize (or maximize) the dot product of costTerms and\n// costWeights, and further, require (as in solver.require) that the\n// value of the dot product be equal to the optimum found.  Returns a\n// valid solution where this optimum is achieved.\n//\n// `solution` must be a current valid solution as returned from\n// `solve` or `solveAssuming`.  It is used as a starting point (to\n// evaluate the current cost).\n//\n// costWeights is an array (of same length as costTerms) or a single\n// WholeNumber.\n//\n// if the caller passes options.formula, it should be the formula\n// Logic.weightedSum(costTerms, costWeights).  The optimizer will use\n// this existing formula rather than generating a new one (for\n// efficiency).  The optimizer still wants to know the terms and\n// weights, because it is more efficient for it to evaluate the\n// current cost using them directly rather than the formula.\n//\n// options.progress: a function that takes two arguments, to call at\n// particular times during optimization.  Called with arguments\n// ('improving', cost) when about to search for a way to improve on\n// `cost`, and called with arguments ('finished', cost) when the\n// optimum is reached.  There's also ('trying', cost) when a cost\n// is tried directly (which is usually done with 0 right off the bat).\n//\n// options.strategy: a string hinting how to go about the optimization.\n// the default strategy (option absent or 'default') is to work down\n// from the current cost for minimization or up from the current cost\n// for maximization, and iteratively insist that the cost be made lower\n// if possible.  For minimization, the alternate strategy 'bottom-up' is\n// available, which starts at 0 and tries ever higher costs until one\n// works.  All strategies first try and see if a cost of 0 is possible.\n\n// (\"costTerms\" is kind of a misnomer since they may be Formulas or Terms.)\nLogic.Solver.prototype.minimizeWeightedSum = function (solution, costTerms,\n                                                       costWeights, options) {\n  return minMaxWS(this, solution, costTerms, costWeights, options, true);\n};\n\nLogic.Solver.prototype.maximizeWeightedSum = function (solution, costTerms,\n                                                       costWeights, options) {\n  return minMaxWS(this, solution, costTerms, costWeights, options, false);\n};\nmodule.exports = Logic;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/logic-solver/logic-solver.js\n// module id = 3\n// module chunks = 0","var C_MINISAT = require(\"./minisat.js\");\nvar _ = require(\"underscore\");\nvar MiniSat;\nMiniSat = function () {\n  // A MiniSat object wraps an instance of \"native\" MiniSat.  You can\n  // have as many MiniSat objects as you want, and they are all\n  // independent.\n  //\n  // C is the \"module\" object created by Emscripten.  We wrap the\n  // output of Emscripten in a closure, so each call to C_MINISAT()\n  // actually instantiates a separate C environment, including\n  // the \"native\" heap.\n  //\n  // The methods available on `C` include the global functions we\n  // define in `logic-solver.cc`, each prefixed with `_`, and a varied\n  // assortment of helpers put there by Emscripten, some of which are\n  // documented here:\n  // http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html\n  //\n  // See the README in the meteor/minisat repo for more notes about\n  // our build of MiniSat.\n  var C = this._C = C_MINISAT();\n\n  this._native = {\n    getStackPointer: function () {\n      return C.Runtime.stackSave();\n    },\n    setStackPointer: function (ptr) {\n      C.Runtime.stackRestore(ptr);\n    },\n    allocateBytes: function (len) {\n      return C.allocate(len, 'i8', C.ALLOC_STACK);\n    },\n    pushString: function (str) {\n      return this.allocateBytes(C.intArrayFromString(str));\n    },\n    savingStack: function (func) {\n      var SP = this.getStackPointer();\n      try {\n        return func(this, C);\n      } finally {\n        this.setStackPointer(SP);\n      }\n    }\n  };\n\n  C._createTheSolver();\n\n  // useful log for debugging and testing\n  this._clauses = [];\n};\n\n\n// Make sure MiniSat has allocated space in its model for v,\n// even if v is unused.  If we have variables A,B,C,D which\n// are numbers 1,2,3,4, for example, but we never actually use\n// C and D, calling ensureVar(4) will make MiniSat give us\n// solution values for them anyway.\nMiniSat.prototype.ensureVar = function (v) {\n  this._C._ensureVar(v);\n};\n\n// Add a clause, in the form of an array of Logic.NumTerms.\n// Returns true if the problem is still satisfiable\n// (as far as we know without doing more work), and false if\n// we can already tell that it is unsatisfiable.\nMiniSat.prototype.addClause = function (terms) {\n  this._clauses.push(terms);\n  return this._native.savingStack(function (native, C) {\n    var termsPtr = C.allocate((terms.length+1)*4, 'i32', C.ALLOC_STACK);\n    _.each(terms, function (t, i) {\n      C.setValue(termsPtr + i*4, t, 'i32');\n    });\n    C.setValue(termsPtr + terms.length*4, 0, 'i32'); // 0-terminate\n    return C._addClause(termsPtr) ? true : false;\n  });\n};\n\nMiniSat.prototype.solve = function () {\n  return this._C._solve() ? true : false;\n};\n\nMiniSat.prototype.solveAssuming = function (v) {\n  return this._C._solveAssuming(v) ? true : false;\n};\n\nMiniSat.prototype.getSolution = function () {\n  var solution = [null]; // no 0th var\n  var C = this._C;\n  var numVars = C._getNumVars();\n  var solPtr = C._getSolution();\n  for (var i = 0; i < numVars; i++) {\n    // 0 is Minisat::l_True (lifted \"true\").\n    // Internally, Minisat has three states for a variable:\n    // true, false, and undetermined.  It doesn't distinguish\n    // between \"false\" and \"undetermined\" in solutions though\n    // (I think it sets undetermined variables to false).\n    solution[i+1] = (C.getValue(solPtr+i, 'i8') === 0);\n  }\n  return solution;\n};\n\nMiniSat.prototype.retireVar = function (v) {\n  this._C._retireVar(v);\n};\n\n// The \"conflict clause\" feature of MiniSat is not what it sounds\n// like, unfortunately -- it doesn't help explain conflicts.\n// It only tells us which assumption vars are to blame for a failed\n// solveAssuming (and we only ever pass one var).\n// We keep this function around in case we discover a use for it.\nMiniSat.prototype.getConflictClause = function () {\n  var C = this._C;\n  var numTerms = C._getConflictClauseSize();\n  var clausePtr = C._getConflictClause();\n  var terms = [];\n  for (var i = 0; i < numTerms; i++) {\n    var t = C.getValue(clausePtr + i*4, 'i32');\n    var v = (t >>> 1);\n    var s = (t & 1) ? -1 : 1;\n    terms[i] = v * s;\n  }\n  return terms;\n};\nmodule.exports = MiniSat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/logic-solver/minisat_wrapper.js\n// module id = 4\n// module chunks = 0","var C_MINISAT;\n// This file is generated by the meteor/minisat repo.\n// See that repo's README for instructions for building it.\nC_MINISAT=(function(){var module={};var require=(function(){});var process={argv:[\"node\",\"minisat\"],on:(function(){}),stdout:{write:(function(str){console.log(\"MINISAT-out:\",str.replace(/\\n$/,\"\"))})},stderr:{write:(function(str){console.log(\"MINISAT-err:\",str.replace(/\\n$/,\"\"))})}};var window=0;var Module;if(!Module)Module=(typeof Module!==\"undefined\"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\";var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[\"print\"])Module[\"print\"]=function print(x){process[\"stdout\"].write(x+\"\\n\")};if(!Module[\"printErr\"])Module[\"printErr\"]=function printErr(x){process[\"stderr\"].write(x+\"\\n\")};var nodeFS=require(\"fs\");var nodePath=require(\"path\");Module[\"read\"]=function read(filename,binary){filename=nodePath[\"normalize\"](filename);var ret=nodeFS[\"readFileSync\"](filename);if(!ret&&filename!=nodePath[\"resolve\"](filename)){filename=path.join(__dirname,\"..\",\"src\",filename);ret=nodeFS[\"readFileSync\"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module[\"readBinary\"]=function readBinary(filename){return Module[\"read\"](filename,true)};Module[\"load\"]=function load(f){globalEval(read(f))};if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}else{Module[\"thisProgram\"]=\"unknown-program\"}Module[\"arguments\"]=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}))}else if(ENVIRONMENT_IS_SHELL){if(!Module[\"print\"])Module[\"print\"]=print;if(typeof printErr!=\"undefined\")Module[\"printErr\"]=printErr;if(typeof read!=\"undefined\"){Module[\"read\"]=read}else{Module[\"read\"]=function read(){throw\"no read() available (jsc?)\"}}Module[\"readBinary\"]=function readBinary(f){if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}var data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){Module[\"arguments\"]=scriptArgs}else if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}this[\"Module\"]=Module}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module[\"read\"]=function read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof console!==\"undefined\"){if(!Module[\"print\"])Module[\"print\"]=function print(x){console.log(x)};if(!Module[\"printErr\"])Module[\"printErr\"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module[\"print\"])Module[\"print\"]=TRY_USE_DUMP&&typeof dump!==\"undefined\"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WEB){window[\"Module\"]=Module}else{Module[\"load\"]=importScripts}}else{throw\"Unknown runtime environment. Where are we?\"}function globalEval(x){eval.call(null,x)}if(!Module[\"load\"]&&Module[\"read\"]){Module[\"load\"]=function load(f){globalEval(Module[\"read\"](f))}}if(!Module[\"print\"]){Module[\"print\"]=(function(){})}if(!Module[\"printErr\"]){Module[\"printErr\"]=Module[\"print\"]}if(!Module[\"arguments\"]){Module[\"arguments\"]=[]}if(!Module[\"thisProgram\"]){Module[\"thisProgram\"]=\"./this.program\"}Module.print=Module[\"print\"];Module.printErr=Module[\"printErr\"];Module[\"preRun\"]=[];Module[\"postRun\"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return Runtime.QUANTUM_SIZE}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,getAlignSize:(function(type,size,vararg){if(!vararg&&(type==\"i64\"||type==\"double\"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module[\"dynCall_\"+sig].apply(null,args)}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),getAsmConst:(function(code,numArgs){if(!Runtime.asmConstCache)Runtime.asmConstCache={};var func=Runtime.asmConstCache[code];if(func)return func;var args=[];for(var i=0;i<numArgs;i++){args.push(String.fromCharCode(36)+i)}var source=Pointer_stringify(code);if(source[0]==='\"'){if(source.indexOf('\"',1)===source.length-1){source=source.substr(1,source.length-2)}else{abort(\"invalid EM_ASM input |\"+source+\"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)\")}}try{var evalled=eval(\"(function(Module, FS) { return function(\"+args.join(\",\")+\"){ \"+source+\" } })\")(Module,typeof FS!==\"undefined\"?FS:null)}catch(e){Module.printErr(\"error in executing inline EM_ASM code: \"+e+\" on: \\n\\n\"+source+\"\\n\\nwith args |\"+args+\"| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)\");throw e}return Runtime.asmConstCache[code]=evalled}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),UTF8Processor:(function(){var buffer=[];var needed=0;this.processCChar=(function(code){code=code&255;if(buffer.length==0){if((code&128)==0){return String.fromCharCode(code)}buffer.push(code);if((code&224)==192){needed=1}else if((code&240)==224){needed=2}else{needed=3}return\"\"}if(needed){buffer.push(code);needed--;if(needed>0)return\"\"}var c1=buffer[0];var c2=buffer[1];var c3=buffer[2];var c4=buffer[3];var ret;if(buffer.length==2){ret=String.fromCharCode((c1&31)<<6|c2&63)}else if(buffer.length==3){ret=String.fromCharCode((c1&15)<<12|(c2&63)<<6|c3&63)}else{var codePoint=(c1&7)<<18|(c2&63)<<12|(c3&63)<<6|c4&63;ret=String.fromCharCode(((codePoint-65536)/1024|0)+55296,(codePoint-65536)%1024+56320)}buffer.length=0;return ret});this.processJSString=function processJSString(string){string=unescape(encodeURIComponent(string));var ret=[];for(var i=0;i<string.length;i++){ret.push(string.charCodeAt(i))}return ret}}),getCompilerSetting:(function(name){throw\"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY)enlargeMemory();return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module[\"Runtime\"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var globalScope=this;function getCFunc(ident){var func=Module[\"_\"+ident];if(!func){try{func=eval(\"_\"+ident)}catch(e){}}assert(func,\"Cannot call unknown function \"+ident+\" (perhaps LLVM optimizations or closure removed it?)\");return func}var cwrap,ccall;((function(){var JSfuncs={\"stackSave\":(function(){Runtime.stackSave()}),\"stackRestore\":(function(){Runtime.stackRestore()}),\"arrayToC\":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),\"stringToC\":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={\"string\":JSfuncs[\"stringToC\"],\"array\":JSfuncs[\"arrayToC\"]};ccall=function ccallFunc(ident,returnType,argTypes,args){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType===\"string\")ret=Pointer_stringify(ret);if(stack!==0)Runtime.stackRestore(stack);return ret};var sourceRegex=/^function\\s*\\(([^)]*)\\)\\s*{\\s*([^*]*?)[\\s;]*(?:return\\s*(.*?)[;\\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type===\"number\"}));var numericRet=returnType!==\"string\";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return\"$\"+i}));var funcstr=\"(function(\"+argNames.join(\",\")+\") {\";var nargs=argTypes.length;if(!numericArgs){funcstr+=\"var stack = \"+JSsource[\"stackSave\"].body+\";\";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type===\"number\")continue;var convertCode=JSsource[type+\"ToC\"];funcstr+=\"var \"+convertCode.arguments+\" = \"+arg+\";\";funcstr+=convertCode.body+\";\";funcstr+=arg+\"=\"+convertCode.returnValue+\";\"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+=\"var ret = \"+cfuncname+\"(\"+argNames.join(\",\")+\");\";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+=\"ret = \"+strgfy+\"(ret);\"}if(!numericArgs){funcstr+=JSsource[\"stackRestore\"].body.replace(\"()\",\"(stack)\")+\";\"}funcstr+=\"return ret})\";return eval(funcstr)}}))();Module[\"cwrap\"]=cwrap;Module[\"ccall\"]=ccall;function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}Module[\"setValue\"]=setValue;function getValue(ptr,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":return HEAP8[ptr>>0];case\"i8\":return HEAP8[ptr>>0];case\"i16\":return HEAP16[ptr>>1];case\"i32\":return HEAP32[ptr>>2];case\"i64\":return HEAP32[ptr>>2];case\"float\":return HEAPF32[ptr>>2];case\"double\":return HEAPF64[ptr>>3];default:abort(\"invalid type for setValue: \"+type)}return null}Module[\"getValue\"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module[\"ALLOC_NORMAL\"]=ALLOC_NORMAL;Module[\"ALLOC_STACK\"]=ALLOC_STACK;Module[\"ALLOC_STATIC\"]=ALLOC_STATIC;Module[\"ALLOC_DYNAMIC\"]=ALLOC_DYNAMIC;Module[\"ALLOC_NONE\"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab===\"number\"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types===\"string\"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType===\"i8\"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr===\"function\"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type==\"i64\")type=\"i32\";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module[\"allocate\"]=allocate;function Pointer_stringify(ptr,length){if(length===0||!ptr)return\"\";var hasUtf=false;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];if(t>=128)hasUtf=true;else if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\"\";if(!hasUtf){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}var utf8=new Runtime.UTF8Processor;for(i=0;i<length;i++){t=HEAPU8[ptr+i>>0];ret+=utf8.processCChar(t)}return ret}Module[\"Pointer_stringify\"]=Pointer_stringify;function UTF16ToString(ptr){var i=0;var str=\"\";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module[\"UTF16ToString\"]=UTF16ToString;function stringToUTF16(str,outPtr){for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr+i*2>>1]=codeUnit}HEAP16[outPtr+str.length*2>>1]=0}Module[\"stringToUTF16\"]=stringToUTF16;function UTF32ToString(ptr){var i=0;var str=\"\";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module[\"UTF32ToString\"]=UTF32ToString;function stringToUTF32(str,outPtr){var iChar=0;for(var iCodeUnit=0;iCodeUnit<str.length;++iCodeUnit){var codeUnit=str.charCodeAt(iCodeUnit);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++iCodeUnit);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr+iChar*4>>2]=codeUnit;++iChar}HEAP32[outPtr+iChar*4>>2]=0}Module[\"stringToUTF32\"]=stringToUTF32;function demangle(func){var hasLibcxxabi=!!Module[\"___cxa_demangle\"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module[\"___cxa_demangle\"](buf,0,0,status);if(getValue(status,\"i32\")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={\"v\":\"void\",\"b\":\"bool\",\"c\":\"char\",\"s\":\"short\",\"i\":\"int\",\"l\":\"long\",\"f\":\"float\",\"d\":\"double\",\"w\":\"wchar_t\",\"a\":\"signed char\",\"h\":\"unsigned char\",\"t\":\"unsigned short\",\"j\":\"unsigned int\",\"m\":\"unsigned long\",\"x\":\"long long\",\"y\":\"unsigned long long\",\"z\":\"...\"};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre=\"\";for(var a=0;a<i;a++)pre+=\" \";Module.print(pre+\"^\")}function parseNested(){i++;if(func[i]===\"K\")i++;var parts=[];while(func[i]!==\"E\"){if(func[i]===\"S\"){i++;var next=func.indexOf(\"_\",i);var num=func.substring(i,next)||0;parts.push(subs[num]||\"?\");i=next+1;continue}if(func[i]===\"C\"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret=\"\",list=[];function flushList(){return\"(\"+list.join(\", \")+\")\"}var name;if(func[i]===\"N\"){name=parseNested().join(\"::\");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]===\"K\"||first&&func[i]===\"L\")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]===\"I\"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+\" \"+name+\"<\"+iList.join(\", \")+\">\"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case\"P\":list.push(parse(true,1,true)[0]+\"*\");break;case\"R\":list.push(parse(true,1,true)[0]+\"&\");break;case\"L\":{i++;var end=func.indexOf(\"E\",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case\"A\":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!==\"_\")throw\"?\";i++;list.push(parse(true,1,true)[0]+\" [\"+size+\"]\");break};case\"E\":break paramLoop;default:ret+=\"?\"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]===\"void\")list=[];if(rawList){if(ret){list.push(ret+\"?\")}return list}else{return ret+flushList()}}var parsed=func;try{if(func==\"Object._main\"||func==\"_main\"){return\"main()\"}if(typeof func===\"number\")func=Pointer_stringify(func);if(func[0]!==\"_\")return func;if(func[1]!==\"_\")return func;if(func[2]!==\"Z\")return func;switch(func[3]){case\"n\":return\"operator new()\";case\"d\":return\"operator delete()\"}parsed=parse()}catch(e){parsed+=\"?\"}if(parsed.indexOf(\"?\")>=0&&!hasLibcxxabi){Runtime.warnOnce(\"warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\")}return parsed}function demangleAll(text){return text.replace(/__Z[\\w\\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+\" [\"+y+\"]\"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module[\"stackTrace\"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){return x+4095&-4096}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){abort(\"Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value \"+TOTAL_MEMORY+\", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.\")}var TOTAL_STACK=Module[\"TOTAL_STACK\"]||5242880;var TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||67108864;var FAST_MEMORY=Module[\"FAST_MEMORY\"]||2097152;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){Module.printErr(\"increasing TOTAL_MEMORY to \"+totalMemory+\" to be compliant with the asm.js spec\");TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!==\"undefined\"&&typeof Float64Array!==\"undefined\"&&!!(new Int32Array(1))[\"subarray\"]&&!!(new Int32Array(1))[\"set\"],\"JS engine does not provide full typed array support\");var buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,\"Typed arrays 2 must be run on a little-endian system\");Module[\"HEAP\"]=HEAP;Module[\"buffer\"]=buffer;Module[\"HEAP8\"]=HEAP8;Module[\"HEAP16\"]=HEAP16;Module[\"HEAP32\"]=HEAP32;Module[\"HEAPU8\"]=HEAPU8;Module[\"HEAPU16\"]=HEAPU16;Module[\"HEAPU32\"]=HEAPU32;Module[\"HEAPF32\"]=HEAPF32;Module[\"HEAPF64\"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Runtime.dynCall(\"v\",func)}else{Runtime.dynCall(\"vi\",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module[\"addOnPreRun\"]=Module.addOnPreRun=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module[\"addOnInit\"]=Module.addOnInit=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module[\"addOnPreMain\"]=Module.addOnPreMain=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module[\"addOnExit\"]=Module.addOnExit=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module[\"addOnPostRun\"]=Module.addOnPostRun=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var ret=(new Runtime.UTF8Processor).processJSString(stringy);if(length){ret.length=length}if(!dontAddNull){ret.push(0)}return ret}Module[\"intArrayFromString\"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\"\")}Module[\"intArrayToString\"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module[\"writeStringToMemory\"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer+i>>0]=array[i]}}Module[\"writeArrayToMemory\"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;i++){HEAP8[buffer+i>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer+str.length>>0]=0}Module[\"writeAsciiToMemory\"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math[\"imul\"]||Math[\"imul\"](4294967295,5)!==-5)Math[\"imul\"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math[\"imul\"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}Module[\"addRunDependency\"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"removeRunDependency\"]=removeRunDependency;Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var memoryInitializer=null;STATIC_BASE=8;STATICTOP=STATIC_BASE+5664;__ATINIT__.push({func:(function(){__GLOBAL__I_a()})},{func:(function(){__GLOBAL__I_a127()})});allocate([78,55,77,105,110,105,115,97,116,50,48,79,117,116,79,102,77,101,109,111,114,121,69,120,99,101,112,116,105,111,110,69,0,0,0,0,0,0,0,0,88,18,0,0,8,0,0,0,78,55,77,105,110,105,115,97,116,54,79,112,116,105,111,110,69,0,0,0,0,0,0,0,88,18,0,0,56,0,0,0,10,32,32,32,32,32,32,32,32,37,115,10,0,0,0,0,0,0,0,0,80,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,78,55,77,105,110,105,115,97,116,49,48,66,111,111,108,79,112,116,105,111,110,69,0,0,128,18,0,0,176,0,0,0,80,0,0,0,0,0,0,0,32,32,45,37,115,44,32,45,110,111,45,37,115,0,0,0,40,100,101,102,97,117,108,116,58,32,37,115,41,10,0,0,111,110,0,0,0,0,0,0,111,102,102,0,0,0,0,0,110,111,45,0,0,0,0,0,0,0,0,0,64,1,0,0,1,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,78,55,77,105,110,105,115,97,116,57,73,110,116,79,112,116,105,111,110,69,0,0,0,0,128,18,0,0,40,1,0,0,80,0,0,0,0,0,0,0,32,32,45,37,45,49,50,115,32,61,32,37,45,56,115,32,91,0,0,0,0,0,0,0,105,109,105,110,0,0,0,0,37,52,100,0,0,0,0,0,32,46,46,32,0,0,0,0,105,109,97,120,0,0,0,0,93,32,40,100,101,102,97,117,108,116,58,32,37,100,41,10,0,0,0,0,0,0,0,0,69,82,82,79,82,33,32,118,97,108,117,101,32,60,37,115,62,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,111,112,116,105,111,110,32,34,37,115,34,46,10,0,0,0,0,0,0,0,0,69,82,82,79,82,33,32,118,97,108,117,101,32,60,37,115,62,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,111,112,116,105,111,110,32,34,37,115,34,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,97,114,45,100,101,99,97,121,0,0,0,0,0,0,0,84,104,101,32,118,97,114,105,97,98,108,101,32,97,99,116,105,118,105,116,121,32,100,101,99,97,121,32,102,97,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,108,97,45,100,101,99,97,121,0,0,0,0,0,0,0,84,104,101,32,99,108,97,117,115,101,32,97,99,116,105,118,105,116,121,32,100,101,99,97,121,32,102,97,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,110,100,45,102,114,101,113,0,0,0,0,0,0,0,0,84,104,101,32,102,114,101,113,117,101,110,99,121,32,119,105,116,104,32,119,104,105,99,104,32,116,104,101,32,100,101,99,105,115,105,111,110,32,104,101,117,114,105,115,116,105,99,32,116,114,105,101,115,32,116,111,32,99,104,111,111,115,101,32,97,32,114,97,110,100,111,109,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,110,100,45,115,101,101,100,0,0,0,0,0,0,0,0,85,115,101,100,32,98,121,32,116,104,101,32,114,97,110,100,111,109,32,118,97,114,105,97,98,108,101,32,115,101,108,101,99,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,99,109,105,110,45,109,111,100,101,0,0,0,0,0,0,67,111,110,116,114,111,108,115,32,99,111,110,102,108,105,99,116,32,99,108,97,117,115,101,32,109,105,110,105,109,105,122,97,116,105,111,110,32,40,48,61,110,111,110,101,44,32,49,61,98,97,115,105,99,44,32,50,61,100,101,101,112,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,104,97,115,101,45,115,97,118,105,110,103,0,0,0,0,67,111,110,116,114,111,108,115,32,116,104,101,32,108,101,118,101,108,32,111,102,32,112,104,97,115,101,32,115,97,118,105,110,103,32,40,48,61,110,111,110,101,44,32,49,61,108,105,109,105,116,101,100,44,32,50,61,102,117,108,108,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,110,100,45,105,110,105,116,0,0,0,0,0,0,0,0,82,97,110,100,111,109,105,122,101,32,116,104,101,32,105,110,105,116,105,97,108,32,97,99,116,105,118,105,116,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,117,98,121,0,0,0,0,85,115,101,32,116,104,101,32,76,117,98,121,32,114,101,115,116,97,114,116,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,102,105,114,115,116,0,0,84,104,101,32,98,97,115,101,32,114,101,115,116,97,114,116,32,105,110,116,101,114,118,97,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,105,110,99,0,0,0,0,82,101,115,116,97,114,116,32,105,110,116,101,114,118,97,108,32,105,110,99,114,101,97,115,101,32,102,97,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,99,45,102,114,97,99,0,84,104,101,32,102,114,97,99,116,105,111,110,32,111,102,32,119,97,115,116,101,100,32,109,101,109,111,114,121,32,97,108,108,111,119,101,100,32,98,101,102,111,114,101,32,97,32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,32,105,115,32,116,114,105,103,103,101,114,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,105,110,45,108,101,97,114,110,116,115,0,0,0,0,0,77,105,110,105,109,117,109,32,108,101,97,114,110,116,32,99,108,97,117,115,101,32,108,105,109,105,116,0,0,0,0,0,0,0,0,0,192,7,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,124,32,37,57,100,32,124,32,37,55,100,32,37,56,100,32,37,56,100,32,124,32,37,56,100,32,37,56,100,32,37,54,46,48,102,32,124,32,37,54,46,51,102,32,37,37,32,124,10,0,0,0,0,0,0,0,124,32,32,71,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,58,32,32,32,37,49,50,100,32,98,121,116,101,115,32,61,62,32,37,49,50,100,32,98,121,116,101,115,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,0,0,0,0,0,78,55,77,105,110,105,115,97,116,54,83,111,108,118,101,114,69,0,0,0,0,0,0,0,88,18,0,0,168,7,0,0,60,98,111,111,108,62,0,0,10,32,32,32,32,32,32,32,32,37,115,10,0,0,0,0,60,105,110,116,51,50,62,0,69,82,82,79,82,33,32,118,97,108,117,101,32,60,37,115,62,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,111,112,116,105,111,110,32,34,37,115,34,46,10,0,0,0,0,0,0,0,0,69,82,82,79,82,33,32,118,97,108,117,101,32,60,37,115,62,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,111,112,116,105,111,110,32,34,37,115,34,46,10,0,0,0,0,0,0,0,0,67,79,82,69,0,0,0,0,60,100,111,117,98,108,101,62,0,0,0,0,0,0,0,0,0,0,0,0,168,8,0,0,1,0,0,0,8,0,0,0,3,0,0,0,3,0,0,0,78,55,77,105,110,105,115,97,116,49,50,68,111,117,98,108,101,79,112,116,105,111,110,69,0,0,0,0,0,0,0,0,128,18,0,0,136,8,0,0,80,0,0,0,0,0,0,0,32,32,45,37,45,49,50,115,32,61,32,37,45,56,115,32,37,99,37,52,46,50,103,32,46,46,32,37,52,46,50,103,37,99,32,40,100,101,102,97,117,108,116,58,32,37,103,41,10,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,91,32,83,101,97,114,99,104,32,83,116,97,116,105,115,116,105,99,115,32,93,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,124,32,67,111,110,102,108,105,99,116,115,32,124,32,32,32,32,32,32,32,32,32,32,79,82,73,71,73,78,65,76,32,32,32,32,32,32,32,32,32,124,32,32,32,32,32,32,32,32,32,32,76,69,65,82,78,84,32,32,32,32,32,32,32,32,32,32,124,32,80,114,111,103,114,101,115,115,32,124,0,124,32,32,32,32,32,32,32,32,32,32,32,124,32,32,32,32,86,97,114,115,32,32,67,108,97,117,115,101,115,32,76,105,116,101,114,97,108,115,32,124,32,32,32,32,76,105,109,105,116,32,32,67,108,97,117,115,101,115,32,76,105,116,47,67,108,32,124,32,32,32,32,32,32,32,32,32,32,124,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,115,121,109,109,0,0,0,83,104,114,105,110,107,32,99,108,97,117,115,101,115,32,98,121,32,97,115,121,109,109,101,116,114,105,99,32,98,114,97,110,99,104,105,110,103,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,99,104,101,99,107,0,0,67,104,101,99,107,32,105,102,32,97,32,99,108,97,117,115,101,32,105,115,32,97,108,114,101,97,100,121,32,105,109,112,108,105,101,100,46,32,40,99,111,115,116,108,121,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,108,105,109,0,0,0,0,80,101,114,102,111,114,109,32,118,97,114,105,97,98,108,101,32,101,108,105,109,105,110,97,116,105,111,110,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,114,111,119,0,0,0,0,65,108,108,111,119,32,97,32,118,97,114,105,97,98,108,101,32,101,108,105,109,105,110,97,116,105,111,110,32,115,116,101,112,32,116,111,32,103,114,111,119,32,98,121,32,97,32,110,117,109,98,101,114,32,111,102,32,99,108,97,117,115,101,115,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,108,45,108,105,109,0,0,86,97,114,105,97,98,108,101,115,32,97,114,101,32,110,111,116,32,101,108,105,109,105,110,97,116,101,100,32,105,102,32,105,116,32,112,114,111,100,117,99,101,115,32,97,32,114,101,115,111,108,118,101,110,116,32,119,105,116,104,32,97,32,108,101,110,103,116,104,32,97,98,111,118,101,32,116,104,105,115,32,108,105,109,105,116,46,32,45,49,32,109,101,97,110,115,32,110,111,32,108,105,109,105,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,117,98,45,108,105,109,0,68,111,32,110,111,116,32,99,104,101,99,107,32,105,102,32,115,117,98,115,117,109,112,116,105,111,110,32,97,103,97,105,110,115,116,32,97,32,99,108,97,117,115,101,32,108,97,114,103,101,114,32,116,104,97,110,32,116,104,105,115,46,32,45,49,32,109,101,97,110,115,32,110,111,32,108,105,109,105,116,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,105,109,112,45,103,99,45,102,114,97,99,0,0,0,0,84,104,101,32,102,114,97,99,116,105,111,110,32,111,102,32,119,97,115,116,101,100,32,109,101,109,111,114,121,32,97,108,108,111,119,101,100,32,98,101,102,111,114,101,32,97,32,103,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,32,105,115,32,116,114,105,103,103,101,114,101,100,32,100,117,114,105,110,103,32,115,105,109,112,108,105,102,105,99,97,116,105,111,110,46,0,0,0,0,0,0,0,120,14,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,115,117,98,115,117,109,112,116,105,111,110,32,108,101,102,116,58,32,37,49,48,100,32,40,37,49,48,100,32,115,117,98,115,117,109,101,100,44,32,37,49,48,100,32,100,101,108,101,116,101,100,32,108,105,116,101,114,97,108,115,41,13,0,0,101,108,105,109,105,110,97,116,105,111,110,32,108,101,102,116,58,32,37,49,48,100,13,0,124,32,32,69,108,105,109,105,110,97,116,101,100,32,99,108,97,117,115,101,115,58,32,32,32,32,32,37,49,48,46,50,102,32,77,98,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,0,124,32,32,71,97,114,98,97,103,101,32,99,111,108,108,101,99,116,105,111,110,58,32,32,32,37,49,50,100,32,98,121,116,101,115,32,61,62,32,37,49,50,100,32,98,121,116,101,115,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,0,0,0,0,0,78,55,77,105,110,105,115,97,116,49,48,83,105,109,112,83,111,108,118,101,114,69,0,0,128,18,0,0,96,14,0,0,192,7,0,0,0,0,0,0,60,100,111,117,98,108,101,62,0,0,0,0,0,0,0,0,60,105,110,116,51,50,62,0,83,73,77,80,0,0,0,0,60,98,111,111,108,62,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,79,33,0,0,0,0,0,2,0,0,0,0,0,0,0,48,15,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,200,16,0,0,12,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,128,18,0,0,184,16,0,0,80,17,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,88,18,0,0,64,17,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,88,18,0,0,88,17,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,128,18,0,0,112,17,0,0,104,17,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,128,18,0,0,168,17,0,0,152,17,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,128,18,0,0,8,18,0,0,152,17,0,0,0,0,0,0,128,18,0,0,224,17,0,0,48,18,0,0,0,0,0,0,0,0,0,0,208,17,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,200,18,0,0,14,0,0,0,18,0,0,0,16,0,0,0,17,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,128,18,0,0,160,18,0,0,208,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5],\"i8\",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=Runtime.alignMemory(allocate(12,\"i8\",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}Module[\"_i64Subtract\"]=_i64Subtract;var ___errno_state=0;function ___setErrNo(value){HEAP32[___errno_state>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator===\"object\")return navigator[\"hardwareConcurrency\"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall(\"vi\",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm[\"setTempRet0\"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm[\"setTempRet0\"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\"___cxa_is_pointer_type\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\"___cxa_can_catch\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm[\"setTempRet0\"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm[\"setTempRet0\"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}Module[\"_memset\"]=_memset;Module[\"_bitshift64Shl\"]=_bitshift64Shl;function _abort(){Module[\"abort\"]()}var FS=undefined;var SOCKFS=undefined;function _send(fd,buf,len,flags){var sock=SOCKFS.getSocket(fd);if(!sock){___setErrNo(ERRNO_CODES.EBADF);return-1}return _write(fd,buf,len)}function _pwrite(fildes,buf,nbyte,offset){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte,offset)}catch(e){FS.handleFSError(e);return-1}}function _write(fildes,buf,nbyte){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte)}catch(e){FS.handleFSError(e);return-1}}function _fileno(stream){stream=FS.getStreamFromPtr(stream);if(!stream)return-1;return stream.fd}function _fwrite(ptr,size,nitems,stream){var bytesToWrite=nitems*size;if(bytesToWrite==0)return 0;var fd=_fileno(stream);var bytesWritten=_write(fd,ptr,bytesToWrite);if(bytesWritten==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return 0}else{return bytesWritten/size|0}}Module[\"_strlen\"]=_strlen;function __reallyNegative(x){return x<0||x===0&&1/x===-Infinity}function __formatString(format,varargs){var textIndex=format;var argIndex=0;function getNextArg(type){var ret;if(type===\"double\"){ret=(HEAP32[tempDoublePtr>>2]=HEAP32[varargs+argIndex>>2],HEAP32[tempDoublePtr+4>>2]=HEAP32[varargs+(argIndex+4)>>2],+HEAPF64[tempDoublePtr>>3])}else if(type==\"i64\"){ret=[HEAP32[varargs+argIndex>>2],HEAP32[varargs+(argIndex+4)>>2]]}else{type=\"i32\";ret=HEAP32[varargs+argIndex>>2]}argIndex+=Runtime.getNativeFieldSize(type);return ret}var ret=[];var curr,next,currArg;while(1){var startTextIndex=textIndex;curr=HEAP8[textIndex>>0];if(curr===0)break;next=HEAP8[textIndex+1>>0];if(curr==37){var flagAlwaysSigned=false;var flagLeftAlign=false;var flagAlternative=false;var flagZeroPad=false;var flagPadSign=false;flagsLoop:while(1){switch(next){case 43:flagAlwaysSigned=true;break;case 45:flagLeftAlign=true;break;case 35:flagAlternative=true;break;case 48:if(flagZeroPad){break flagsLoop}else{flagZeroPad=true;break};case 32:flagPadSign=true;break;default:break flagsLoop}textIndex++;next=HEAP8[textIndex+1>>0]}var width=0;if(next==42){width=getNextArg(\"i32\");textIndex++;next=HEAP8[textIndex+1>>0]}else{while(next>=48&&next<=57){width=width*10+(next-48);textIndex++;next=HEAP8[textIndex+1>>0]}}var precisionSet=false,precision=-1;if(next==46){precision=0;precisionSet=true;textIndex++;next=HEAP8[textIndex+1>>0];if(next==42){precision=getNextArg(\"i32\");textIndex++}else{while(1){var precisionChr=HEAP8[textIndex+1>>0];if(precisionChr<48||precisionChr>57)break;precision=precision*10+(precisionChr-48);textIndex++}}next=HEAP8[textIndex+1>>0]}if(precision<0){precision=6;precisionSet=false}var argSize;switch(String.fromCharCode(next)){case\"h\":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==104){textIndex++;argSize=1}else{argSize=2}break;case\"l\":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==108){textIndex++;argSize=8}else{argSize=4}break;case\"L\":case\"q\":case\"j\":argSize=8;break;case\"z\":case\"t\":case\"I\":argSize=4;break;default:argSize=null}if(argSize)textIndex++;next=HEAP8[textIndex+1>>0];switch(String.fromCharCode(next)){case\"d\":case\"i\":case\"u\":case\"o\":case\"x\":case\"X\":case\"p\":{var signed=next==100||next==105;argSize=argSize||4;var currArg=getNextArg(\"i\"+argSize*8);var origArg=currArg;var argText;if(argSize==8){currArg=Runtime.makeBigInt(currArg[0],currArg[1],next==117)}if(argSize<=4){var limit=Math.pow(256,argSize)-1;currArg=(signed?reSign:unSign)(currArg&limit,argSize*8)}var currAbsArg=Math.abs(currArg);var prefix=\"\";if(next==100||next==105){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],null);else argText=reSign(currArg,8*argSize,1).toString(10)}else if(next==117){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],true);else argText=unSign(currArg,8*argSize,1).toString(10);currArg=Math.abs(currArg)}else if(next==111){argText=(flagAlternative?\"0\":\"\")+currAbsArg.toString(8)}else if(next==120||next==88){prefix=flagAlternative&&currArg!=0?\"0x\":\"\";if(argSize==8&&i64Math){if(origArg[1]){argText=(origArg[1]>>>0).toString(16);var lower=(origArg[0]>>>0).toString(16);while(lower.length<8)lower=\"0\"+lower;argText+=lower}else{argText=(origArg[0]>>>0).toString(16)}}else if(currArg<0){currArg=-currArg;argText=(currAbsArg-1).toString(16);var buffer=[];for(var i=0;i<argText.length;i++){buffer.push((15-parseInt(argText[i],16)).toString(16))}argText=buffer.join(\"\");while(argText.length<argSize*2)argText=\"f\"+argText}else{argText=currAbsArg.toString(16)}if(next==88){prefix=prefix.toUpperCase();argText=argText.toUpperCase()}}else if(next==112){if(currAbsArg===0){argText=\"(nil)\"}else{prefix=\"0x\";argText=currAbsArg.toString(16)}}if(precisionSet){while(argText.length<precision){argText=\"0\"+argText}}if(currArg>=0){if(flagAlwaysSigned){prefix=\"+\"+prefix}else if(flagPadSign){prefix=\" \"+prefix}}if(argText.charAt(0)==\"-\"){prefix=\"-\"+prefix;argText=argText.substr(1)}while(prefix.length+argText.length<width){if(flagLeftAlign){argText+=\" \"}else{if(flagZeroPad){argText=\"0\"+argText}else{prefix=\" \"+prefix}}}argText=prefix+argText;argText.split(\"\").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case\"f\":case\"F\":case\"e\":case\"E\":case\"g\":case\"G\":{var currArg=getNextArg(\"double\");var argText;if(isNaN(currArg)){argText=\"nan\";flagZeroPad=false}else if(!isFinite(currArg)){argText=(currArg<0?\"-\":\"\")+\"inf\";flagZeroPad=false}else{var isGeneral=false;var effectivePrecision=Math.min(precision,20);if(next==103||next==71){isGeneral=true;precision=precision||1;var exponent=parseInt(currArg.toExponential(effectivePrecision).split(\"e\")[1],10);if(precision>exponent&&exponent>=-4){next=(next==103?\"f\":\"F\").charCodeAt(0);precision-=exponent+1}else{next=(next==103?\"e\":\"E\").charCodeAt(0);precision--}effectivePrecision=Math.min(precision,20)}if(next==101||next==69){argText=currArg.toExponential(effectivePrecision);if(/[eE][-+]\\d$/.test(argText)){argText=argText.slice(0,-1)+\"0\"+argText.slice(-1)}}else if(next==102||next==70){argText=currArg.toFixed(effectivePrecision);if(currArg===0&&__reallyNegative(currArg)){argText=\"-\"+argText}}var parts=argText.split(\"e\");if(isGeneral&&!flagAlternative){while(parts[0].length>1&&parts[0].indexOf(\".\")!=-1&&(parts[0].slice(-1)==\"0\"||parts[0].slice(-1)==\".\")){parts[0]=parts[0].slice(0,-1)}}else{if(flagAlternative&&argText.indexOf(\".\")==-1)parts[0]+=\".\";while(precision>effectivePrecision++)parts[0]+=\"0\"}argText=parts[0]+(parts.length>1?\"e\"+parts[1]:\"\");if(next==69)argText=argText.toUpperCase();if(currArg>=0){if(flagAlwaysSigned){argText=\"+\"+argText}else if(flagPadSign){argText=\" \"+argText}}}while(argText.length<width){if(flagLeftAlign){argText+=\" \"}else{if(flagZeroPad&&(argText[0]==\"-\"||argText[0]==\"+\")){argText=argText[0]+\"0\"+argText.slice(1)}else{argText=(flagZeroPad?\"0\":\" \")+argText}}}if(next<97)argText=argText.toUpperCase();argText.split(\"\").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case\"s\":{var arg=getNextArg(\"i8*\");var argLength=arg?_strlen(arg):\"(null)\".length;if(precisionSet)argLength=Math.min(argLength,precision);if(!flagLeftAlign){while(argLength<width--){ret.push(32)}}if(arg){for(var i=0;i<argLength;i++){ret.push(HEAPU8[arg++>>0])}}else{ret=ret.concat(intArrayFromString(\"(null)\".substr(0,argLength),true))}if(flagLeftAlign){while(argLength<width--){ret.push(32)}}break};case\"c\":{if(flagLeftAlign)ret.push(getNextArg(\"i8\"));while(--width>0){ret.push(32)}if(!flagLeftAlign)ret.push(getNextArg(\"i8\"));break};case\"n\":{var ptr=getNextArg(\"i32*\");HEAP32[ptr>>2]=ret.length;break};case\"%\":{ret.push(curr);break};default:{for(var i=startTextIndex;i<textIndex+2;i++){ret.push(HEAP8[i>>0])}}}textIndex+=2}else{ret.push(curr);textIndex+=1}}return ret}function _fprintf(stream,format,varargs){var result=__formatString(format,varargs);var stack=Runtime.stackSave();var ret=_fwrite(allocate(result,\"i8\",ALLOC_STACK),1,result.length,stream);Runtime.stackRestore(stack);return ret}function _printf(format,varargs){var result=__formatString(format,varargs);var string=intArrayToString(result);if(string[string.length-1]===\"\\n\")string=string.substr(0,string.length-1);Module.print(string);return result.length}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall(\"v\",func);_pthread_once.seen[ptr]=1}function _fputc(c,stream){var chr=unSign(c&255);HEAP8[_fputc.ret>>0]=chr;var fd=_fileno(stream);var ret=_write(fd,_fputc.ret,1);if(ret==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return-1}else{return chr}}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}Module[\"_i64Add\"]=_i64Add;function _fputs(s,stream){var fd=_fileno(stream);return _write(fd,s,_strlen(s))}var _stdout=allocate(1,\"i32*\",ALLOC_STATIC);function _puts(s){var result=Pointer_stringify(s);var string=result.substr(0);if(string[string.length-1]===\"\\n\")string=string.substr(0,string.length-1);Module.print(string);return result.length}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function __exit(status){Module[\"exit\"](status)}function _exit(status){__exit(status)}var _UItoD=true;function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module[\"_malloc\"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}function _fmod(x,y){return x%y}function _fmodl(){return _fmod.apply(null,arguments)}Module[\"_bitshift64Lshr\"]=_bitshift64Lshr;function ___cxa_pure_virtual(){ABORT=true;throw\"Pure virtual function called!\"}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function ___cxa_guard_acquire(variable){if(!HEAP8[variable>>0]){HEAP8[variable>>0]=1;return 1}return 0}function ___cxa_guard_release(){}function _vfprintf(s,f,va_arg){return _fprintf(s,f,HEAP32[va_arg>>2])}function ___cxa_begin_catch(ptr){__ZSt18uncaught_exceptionv.uncaught_exception--;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module[\"_memcpy\"]=_memcpy;var _llvm_pow_f64=Math_pow;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort(\"cannot dynamically allocate, sbrk now has control\")})}var ret=DYNAMICTOP;if(bytes!=0)self.alloc(bytes);return ret}var _fabs=Math_abs;function ___errno_location(){return ___errno_state}var _BItoD=true;function _copysign(a,b){return __reallyNegative(a)===__reallyNegative(b)?a:-a}function _copysignl(){return _copysign.apply(null,arguments)}var ___dso_handle=allocate(1,\"i32*\",ALLOC_STATIC);var _stderr=allocate(1,\"i32*\",ALLOC_STATIC);___errno_state=Runtime.staticAlloc(4);HEAP32[___errno_state>>2]=0;_fputc.ret=allocate([0],\"i8\",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,\"TOTAL_MEMORY not big enough for stack\");var ctlz_i8=allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"i8\",ALLOC_DYNAMIC);var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],\"i8\",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module[\"dynCall_iiii\"](index,a1,a2,a3)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module[\"dynCall_viiiii\"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_vi(index,a1){try{Module[\"dynCall_vi\"](index,a1)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_vii(index,a1,a2){try{Module[\"dynCall_vii\"](index,a1,a2)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_ii(index,a1){try{return Module[\"dynCall_ii\"](index,a1)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_v(index){try{Module[\"dynCall_v\"](index)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module[\"dynCall_viiiiii\"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_iii(index,a1,a2){try{return Module[\"dynCall_iii\"](index,a1,a2)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module[\"dynCall_viiii\"](index,a1,a2,a3,a4)}catch(e){if(typeof e!==\"number\"&&e!==\"longjmp\")throw e;asm[\"setThrew\"](1,0)}}Module.asmGlobalArg={\"Math\":Math,\"Int8Array\":Int8Array,\"Int16Array\":Int16Array,\"Int32Array\":Int32Array,\"Uint8Array\":Uint8Array,\"Uint16Array\":Uint16Array,\"Uint32Array\":Uint32Array,\"Float32Array\":Float32Array,\"Float64Array\":Float64Array};Module.asmLibraryArg={\"abort\":abort,\"assert\":assert,\"min\":Math_min,\"invoke_iiii\":invoke_iiii,\"invoke_viiiii\":invoke_viiiii,\"invoke_vi\":invoke_vi,\"invoke_vii\":invoke_vii,\"invoke_ii\":invoke_ii,\"invoke_v\":invoke_v,\"invoke_viiiiii\":invoke_viiiiii,\"invoke_iii\":invoke_iii,\"invoke_viiii\":invoke_viiii,\"_fabs\":_fabs,\"_llvm_pow_f64\":_llvm_pow_f64,\"_send\":_send,\"_fmod\":_fmod,\"___cxa_guard_acquire\":___cxa_guard_acquire,\"___setErrNo\":___setErrNo,\"_vfprintf\":_vfprintf,\"___cxa_allocate_exception\":___cxa_allocate_exception,\"___cxa_find_matching_catch\":___cxa_find_matching_catch,\"___cxa_guard_release\":___cxa_guard_release,\"_pwrite\":_pwrite,\"__reallyNegative\":__reallyNegative,\"_sbrk\":_sbrk,\"___cxa_begin_catch\":___cxa_begin_catch,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_fileno\":_fileno,\"___resumeException\":___resumeException,\"__ZSt18uncaught_exceptionv\":__ZSt18uncaught_exceptionv,\"_sysconf\":_sysconf,\"_pthread_getspecific\":_pthread_getspecific,\"_atexit\":_atexit,\"_pthread_once\":_pthread_once,\"_puts\":_puts,\"_printf\":_printf,\"_pthread_key_create\":_pthread_key_create,\"_write\":_write,\"___errno_location\":___errno_location,\"_pthread_setspecific\":_pthread_setspecific,\"___cxa_atexit\":___cxa_atexit,\"_copysign\":_copysign,\"_fputc\":_fputc,\"___cxa_throw\":___cxa_throw,\"__exit\":__exit,\"_copysignl\":_copysignl,\"_abort\":_abort,\"_fwrite\":_fwrite,\"_time\":_time,\"_fprintf\":_fprintf,\"__formatString\":__formatString,\"_fputs\":_fputs,\"_exit\":_exit,\"___cxa_pure_virtual\":___cxa_pure_virtual,\"_fmodl\":_fmodl,\"STACKTOP\":STACKTOP,\"STACK_MAX\":STACK_MAX,\"tempDoublePtr\":tempDoublePtr,\"ABORT\":ABORT,\"cttz_i8\":cttz_i8,\"ctlz_i8\":ctlz_i8,\"NaN\":NaN,\"Infinity\":Infinity,\"___dso_handle\":___dso_handle,\"_stderr\":_stderr};// EMSCRIPTEN_START_ASM\nvar asm=(function(global,env,buffer) {\n\"use asm\";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.___dso_handle|0;var p=env._stderr|0;var q=0;var r=0;var s=0;var t=0;var u=+env.NaN,v=+env.Infinity;var w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0.0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=0;var P=global.Math.floor;var Q=global.Math.abs;var R=global.Math.sqrt;var S=global.Math.pow;var T=global.Math.cos;var U=global.Math.sin;var V=global.Math.tan;var W=global.Math.acos;var X=global.Math.asin;var Y=global.Math.atan;var Z=global.Math.atan2;var _=global.Math.exp;var $=global.Math.log;var aa=global.Math.ceil;var ba=global.Math.imul;var ca=env.abort;var da=env.assert;var ea=env.min;var fa=env.invoke_iiii;var ga=env.invoke_viiiii;var ha=env.invoke_vi;var ia=env.invoke_vii;var ja=env.invoke_ii;var ka=env.invoke_v;var la=env.invoke_viiiiii;var ma=env.invoke_iii;var na=env.invoke_viiii;var oa=env._fabs;var pa=env._llvm_pow_f64;var qa=env._send;var ra=env._fmod;var sa=env.___cxa_guard_acquire;var ta=env.___setErrNo;var ua=env._vfprintf;var va=env.___cxa_allocate_exception;var wa=env.___cxa_find_matching_catch;var xa=env.___cxa_guard_release;var ya=env._pwrite;var za=env.__reallyNegative;var Aa=env._sbrk;var Ba=env.___cxa_begin_catch;var Ca=env._emscripten_memcpy_big;var Da=env._fileno;var Ea=env.___resumeException;var Fa=env.__ZSt18uncaught_exceptionv;var Ga=env._sysconf;var Ha=env._pthread_getspecific;var Ia=env._atexit;var Ja=env._pthread_once;var Ka=env._puts;var La=env._printf;var Ma=env._pthread_key_create;var Na=env._write;var Oa=env.___errno_location;var Pa=env._pthread_setspecific;var Qa=env.___cxa_atexit;var Ra=env._copysign;var Sa=env._fputc;var Ta=env.___cxa_throw;var Ua=env.__exit;var Va=env._copysignl;var Wa=env._abort;var Xa=env._fwrite;var Ya=env._time;var Za=env._fprintf;var _a=env.__formatString;var $a=env._fputs;var ab=env._exit;var bb=env.___cxa_pure_virtual;var cb=env._fmodl;var db=0.0;\n// EMSCRIPTEN_START_FUNCS\nfunction nb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function ob(){return i|0}function pb(a){a=a|0;i=a}function qb(a,b){a=a|0;b=b|0;if(!q){q=a;r=b}}function rb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function sb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function tb(a){a=a|0;F=a}function ub(){return F|0}function vb(a){a=a|0;Ba(a|0)|0;ud()}function wb(a){a=a|0;return}function xb(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;c[b>>2]=112;c[b+4>>2]=d;c[b+8>>2]=e;c[b+12>>2]=f;c[b+16>>2]=g;if((a[144]|0)==0?(sa(144)|0)!=0:0){c[32]=0;c[33]=0;c[34]=0;Qa(19,128,o|0)|0;xa(144)}g=c[33]|0;if((g|0)==(c[34]|0)){f=(g>>1)+2&-2;f=(f|0)<2?2:f;if((f|0)>(2147483647-g|0)){d=va(1)|0;Ta(d|0,48,0)}e=c[32]|0;d=f+g|0;c[34]=d;d=Ud(e,d<<2)|0;c[32]=d;if((d|0)==0?(c[(Oa()|0)>>2]|0)==12:0){d=va(1)|0;Ta(d|0,48,0)}g=c[33]|0}c[33]=g+1;g=(c[32]|0)+(g<<2)|0;if(!g){i=h;return}c[g>>2]=b;i=h;return}function yb(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function zb(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if(!d){i=b;return}c[a+4>>2]=0;Td(d);c[a>>2]=0;c[a+8>>2]=0;i=b;return}function Ab(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function Bb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if((a[d>>0]|0)!=45){k=0;i=e;return k|0}f=d+1|0;g=110;j=f;k=0;while(1){h=k+1|0;if((a[j>>0]|0)!=g<<24>>24){g=1;break}j=d+(k+2)|0;if((h|0)==3){g=0;f=j;break}else{g=a[264+h>>0]|0;k=h}}if(ee(f,c[b+4>>2]|0)|0){k=0;i=e;return k|0}a[b+20>>0]=g;k=1;i=e;return k|0}function Cb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;h=i;i=i+16|0;e=h;f=c[p>>2]|0;g=b+4|0;j=c[g>>2]|0;c[e>>2]=j;c[e+4>>2]=j;Za(f|0,216,e|0)|0;j=0;while(1){k=j>>>0<(32-((me(c[g>>2]|0)|0)<<1)|0)>>>0;Sa(32,f|0)|0;if(k)j=j+1|0;else break}c[e>>2]=(a[b+20>>0]|0)!=0?248:256;Za(f|0,232,e|0)|0;if(!d){i=h;return}c[e>>2]=c[b+8>>2];Za(f|0,88,e|0)|0;Sa(10,f|0)|0;i=h;return}function Db(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function Eb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+16|0;h=e;g=e+8|0;if((a[d>>0]|0)!=45){n=0;i=e;return n|0}l=d+1|0;f=b+4|0;j=c[f>>2]|0;k=a[j>>0]|0;a:do if(k<<24>>24){m=0;while(1){n=m;m=m+1|0;if((a[l>>0]|0)!=k<<24>>24){b=0;break}k=a[j+m>>0]|0;l=d+(n+2)|0;if(!(k<<24>>24))break a}i=e;return b|0}while(0);if((a[l>>0]|0)!=61){n=0;i=e;return n|0}d=l+1|0;j=de(d,g,10)|0;if(!(c[g>>2]|0)){n=0;i=e;return n|0}if((j|0)>(c[b+24>>2]|0)){n=c[p>>2]|0;m=c[f>>2]|0;c[h>>2]=d;c[h+4>>2]=m;Za(n|0,416,h|0)|0;ab(1)}if((j|0)<(c[b+20>>2]|0)){n=c[p>>2]|0;m=c[f>>2]|0;c[h>>2]=d;c[h+4>>2]=m;Za(n|0,472,h|0)|0;ab(1)}c[b+28>>2]=j;n=1;i=e;return n|0}function Fb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d;f=c[p>>2]|0;g=c[a+16>>2]|0;c[e>>2]=c[a+4>>2];c[e+4>>2]=g;Za(f|0,336,e|0)|0;g=c[a+20>>2]|0;if((g|0)==-2147483648)Xa(360,4,1,f|0)|0;else{c[e>>2]=g;Za(f|0,368,e|0)|0}Xa(376,4,1,f|0)|0;g=c[a+24>>2]|0;if((g|0)==2147483647)Xa(384,4,1,f|0)|0;else{c[e>>2]=g;Za(f|0,368,e|0)|0}c[e>>2]=c[a+28>>2];Za(f|0,392,e|0)|0;if(!b){i=d;return}c[e>>2]=c[a+8>>2];Za(f|0,88,e|0)|0;Sa(10,f|0)|0;i=d;return}function Gb(b){b=b|0;var d=0,e=0,f=0,g=0,j=0;g=i;c[b>>2]=1816;f=b+4|0;e=b+32|0;j=b+48|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;h[j>>3]=+h[75];h[b+56>>3]=+h[89];h[b+64>>3]=+h[103];h[b+72>>3]=+h[123];a[b+80>>0]=a[1364]|0;c[b+84>>2]=c[269];c[b+88>>2]=c[297];a[b+92>>0]=0;a[b+93>>0]=a[1292]|0;h[b+96>>3]=+h[204];c[b+104>>2]=c[439];c[b+108>>2]=c[359];h[b+112>>3]=+h[191];h[b+120>>3]=.3333333333333333;h[b+128>>3]=1.1;c[b+136>>2]=100;h[b+144>>3]=1.5;j=b+316|0;c[b+332>>2]=0;c[b+336>>2]=0;c[b+340>>2]=0;c[b+348>>2]=0;c[b+352>>2]=0;c[b+356>>2]=0;c[b+364>>2]=0;c[b+368>>2]=0;c[b+372>>2]=0;c[b+380>>2]=0;c[b+384>>2]=0;c[b+388>>2]=0;c[b+396>>2]=0;c[b+400>>2]=0;c[b+404>>2]=0;e=b+544|0;c[b+412>>2]=0;c[b+416>>2]=0;c[b+420>>2]=0;c[b+428>>2]=0;c[b+432>>2]=0;c[b+436>>2]=0;c[b+444>>2]=0;c[b+448>>2]=0;c[b+452>>2]=0;ke(b+152|0,0,176)|0;c[b+456>>2]=e;f=b+460|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[b+488>>2]=j;a[b+492>>0]=1;h[b+496>>3]=1.0;h[b+504>>3]=1.0;c[b+512>>2]=0;c[b+516>>2]=-1;j=b+520|0;f=b+536|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;a[f>>0]=1;f=b+540|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;gc(e,1048576);a[b+560>>0]=0;e=b+604|0;f=b+664|0;j=b+564|0;d=j+36|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(d|0));j=e+0|0;d=j+36|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(d|0));j=b+680|0;c[f+0>>2]=-1;c[f+4>>2]=-1;c[f+8>>2]=-1;c[f+12>>2]=-1;a[j>>0]=0;i=g;return}function Hb(a){a=a|0;var b=0;b=i;Ib(a);pd(a);i=b;return}function Ib(a){a=a|0;var b=0,d=0,e=0;b=i;c[a>>2]=1816;d=a+628|0;e=c[d>>2]|0;if(e){c[a+632>>2]=0;Td(e);c[d>>2]=0;c[a+636>>2]=0}d=a+616|0;e=c[d>>2]|0;if(e){c[a+620>>2]=0;Td(e);c[d>>2]=0;c[a+624>>2]=0}d=a+604|0;e=c[d>>2]|0;if(e){c[a+608>>2]=0;Td(e);c[d>>2]=0;c[a+612>>2]=0}d=a+588|0;e=c[d>>2]|0;if(e){c[a+592>>2]=0;Td(e);c[d>>2]=0;c[a+596>>2]=0}d=a+576|0;e=c[d>>2]|0;if(e){c[a+580>>2]=0;Td(e);c[d>>2]=0;c[a+584>>2]=0}d=a+564|0;e=c[d>>2]|0;if(e){c[a+568>>2]=0;Td(e);c[d>>2]=0;c[a+572>>2]=0}d=c[a+544>>2]|0;if(d)Td(d);d=a+472|0;e=c[d>>2]|0;if(e){c[a+476>>2]=0;Td(e);c[d>>2]=0;c[a+480>>2]=0}d=a+460|0;e=c[d>>2]|0;if(e){c[a+464>>2]=0;Td(e);c[d>>2]=0;c[a+468>>2]=0}hc(a+412|0);d=a+396|0;e=c[d>>2]|0;if(e){c[a+400>>2]=0;Td(e);c[d>>2]=0;c[a+404>>2]=0}d=a+380|0;e=c[d>>2]|0;if(e){c[a+384>>2]=0;Td(e);c[d>>2]=0;c[a+388>>2]=0}e=a+364|0;d=c[e>>2]|0;if(d){c[a+368>>2]=0;Td(d);c[e>>2]=0;c[a+372>>2]=0}d=a+348|0;e=c[d>>2]|0;if(e){c[a+352>>2]=0;Td(e);c[d>>2]=0;c[a+356>>2]=0}d=a+332|0;e=c[d>>2]|0;if(e){c[a+336>>2]=0;Td(e);c[d>>2]=0;c[a+340>>2]=0}d=a+316|0;e=c[d>>2]|0;if(e){c[a+320>>2]=0;Td(e);c[d>>2]=0;c[a+324>>2]=0}d=a+304|0;e=c[d>>2]|0;if(e){c[a+308>>2]=0;Td(e);c[d>>2]=0;c[a+312>>2]=0}d=a+292|0;e=c[d>>2]|0;if(e){c[a+296>>2]=0;Td(e);c[d>>2]=0;c[a+300>>2]=0}d=a+280|0;e=c[d>>2]|0;if(e){c[a+284>>2]=0;Td(e);c[d>>2]=0;c[a+288>>2]=0}d=a+268|0;e=c[d>>2]|0;if(e){c[a+272>>2]=0;Td(e);c[d>>2]=0;c[a+276>>2]=0}d=a+256|0;e=c[d>>2]|0;if(e){c[a+260>>2]=0;Td(e);c[d>>2]=0;c[a+264>>2]=0}d=a+32|0;e=c[d>>2]|0;if(e){c[a+36>>2]=0;Td(e);c[d>>2]=0;c[a+40>>2]=0}d=a+16|0;e=c[d>>2]|0;if(e){c[a+20>>2]=0;Td(e);c[d>>2]=0;c[a+24>>2]=0}e=a+4|0;d=c[e>>2]|0;if(!d){i=b;return}c[a+8>>2]=0;Td(d);c[e>>2]=0;c[a+12>>2]=0;i=b;return}function Jb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+16|0;k=f+4|0;j=f;g=b+580|0;m=c[g>>2]|0;if((m|0)>0){o=m+ -1|0;p=c[(c[b+576>>2]|0)+(o<<2)>>2]|0;c[g>>2]=o;g=p}else{p=b+540|0;g=c[p>>2]|0;c[p>>2]=g+1}m=b+412|0;p=g<<1;c[k>>2]=p;ic(m,k);c[j>>2]=p|1;ic(m,j);k=b+332|0;m=a[544]|0;j=g+1|0;jc(k,j);a[(c[k>>2]|0)+g>>0]=m;k=b+396|0;m=b+400|0;if((c[m>>2]|0)<(j|0)){o=b+404|0;p=c[o>>2]|0;if((p|0)<(j|0)){q=g+2-p&-2;n=(p>>1)+2&-2;n=(q|0)>(n|0)?q:n;if((n|0)>(2147483647-p|0)){q=va(1)|0;Ta(q|0,48,0)}r=c[k>>2]|0;q=n+p|0;c[o>>2]=q;q=Ud(r,q<<3)|0;c[k>>2]=q;if((q|0)==0?(c[(Oa()|0)>>2]|0)==12:0){r=va(1)|0;Ta(r|0,48,0)}}o=c[m>>2]|0;if((o|0)<(j|0))do{n=(c[k>>2]|0)+(o<<3)|0;if(n){r=n;c[r>>2]=0;c[r+4>>2]=0}o=o+1|0}while((o|0)!=(j|0));c[m>>2]=j}m=(c[k>>2]|0)+(g<<3)|0;c[m>>2]=-1;c[m+4>>2]=0;m=b+316|0;if(!(a[b+93>>0]|0))l=0.0;else{r=b+72|0;l=+h[r>>3]*1389796.0;l=l- +(~~(l/2147483647.0)|0)*2147483647.0;h[r>>3]=l;l=l/2147483647.0*1.0e-5}k=b+320|0;if((c[k>>2]|0)<(j|0)){n=b+324|0;o=c[n>>2]|0;if((o|0)<(j|0)){r=g+2-o&-2;p=(o>>1)+2&-2;p=(r|0)>(p|0)?r:p;if((p|0)>(2147483647-o|0)){r=va(1)|0;Ta(r|0,48,0)}q=c[m>>2]|0;r=p+o|0;c[n>>2]=r;r=Ud(q,r<<3)|0;c[m>>2]=r;if((r|0)==0?(c[(Oa()|0)>>2]|0)==12:0){r=va(1)|0;Ta(r|0,48,0)}}p=c[k>>2]|0;if((p|0)<(j|0)){n=c[m>>2]|0;do{o=n+(p<<3)|0;if(o)h[o>>3]=0.0;p=p+1|0}while((p|0)!=(j|0))}c[k>>2]=j}h[(c[m>>2]|0)+(g<<3)>>3]=l;kc(b+588|0,g,0);kc(b+348|0,g,1);k=b+364|0;d=a[d>>0]|0;jc(k,j);a[(c[k>>2]|0)+g>>0]=d;k=b+380|0;d=b+384|0;if((c[d>>2]|0)<(j|0)){m=b+388|0;o=c[m>>2]|0;if((o|0)<(j|0)){r=g+2-o&-2;n=(o>>1)+2&-2;n=(r|0)>(n|0)?r:n;if((n|0)>(2147483647-o|0)){r=va(1)|0;Ta(r|0,48,0)}q=c[k>>2]|0;r=n+o|0;c[m>>2]=r;r=Ud(q,r)|0;c[k>>2]=r;if((r|0)==0?(c[(Oa()|0)>>2]|0)==12:0){r=va(1)|0;Ta(r|0,48,0)}}m=c[d>>2]|0;if((m|0)<(j|0))do{n=(c[k>>2]|0)+m|0;if(n)a[n>>0]=0;m=m+1|0}while((m|0)!=(j|0));c[d>>2]=j}d=b+288|0;k=c[d>>2]|0;if((k|0)<(j|0)){r=g+2-k&-2;j=(k>>1)+2&-2;j=(r|0)>(j|0)?r:j;if((j|0)>(2147483647-k|0)){r=va(1)|0;Ta(r|0,48,0)}q=b+280|0;p=c[q>>2]|0;r=j+k|0;c[d>>2]=r;r=Ud(p,r<<2)|0;c[q>>2]=r;if((r|0)==0?(c[(Oa()|0)>>2]|0)==12:0){r=va(1)|0;Ta(r|0,48,0)}}j=b+380|0;d=(c[j>>2]|0)+g|0;k=(a[d>>0]|0)==0;if(e){if(k){r=b+200|0;q=r;q=ne(c[q>>2]|0,c[q+4>>2]|0,1,0)|0;c[r>>2]=q;c[r+4>>2]=F}}else if(!k){r=b+200|0;q=r;q=ne(c[q>>2]|0,c[q+4>>2]|0,-1,-1)|0;c[r>>2]=q;c[r+4>>2]=F}a[d>>0]=e&1;e=b+460|0;if((c[b+476>>2]|0)>(g|0)?(c[(c[b+472>>2]|0)+(g<<2)>>2]|0)>-1:0){i=f;return g|0}if(!(a[(c[j>>2]|0)+g>>0]|0)){i=f;return g|0}lc(e,g);i=f;return g|0}function Kb(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;i=i+16|0;k=f+1|0;j=f;g=b+492|0;if(!(a[g>>0]|0)){s=0;i=f;return s|0}s=c[e>>2]|0;h=e+4|0;l=c[h>>2]|0;a[k+0>>0]=a[j+0>>0]|0;oc(s,l,k);l=c[h>>2]|0;a:do if((l|0)>0){k=b+332|0;j=a[528]|0;m=0;n=0;p=-2;while(1){s=c[e>>2]|0;o=c[s+(m<<2)>>2]|0;r=d[(c[k>>2]|0)+(o>>1)>>0]|0;t=r^o&1;q=t&255;u=j&255;if((o|0)==(p^1|0)?1:(q<<24>>24==j<<24>>24&(u>>>1^1)|u&2&t|0)!=0){b=1;break}t=a[536]|0;u=t&255;if((o|0)!=(p|0)?((u>>>1^1)&q<<24>>24==t<<24>>24|r&2&u|0)==0:0){c[s+(n<<2)>>2]=o;l=c[h>>2]|0;n=n+1|0}else o=p;m=m+1|0;if((m|0)<(l|0))p=o;else break a}i=f;return b|0}else{m=0;n=0}while(0);j=m-n|0;if((j|0)>0){l=l-j|0;c[h>>2]=l}if(!l){a[g>>0]=0;u=0;i=f;return u|0}else if((l|0)==1){t=c[c[e>>2]>>2]|0;s=t>>1;a[(c[b+332>>2]|0)+s>>0]=(t&1^1)&255^1;u=c[b+296>>2]|0;s=(c[b+396>>2]|0)+(s<<3)|0;c[s>>2]=-1;c[s+4>>2]=u;s=b+284|0;u=c[s>>2]|0;c[s>>2]=u+1;c[(c[b+280>>2]|0)+(u<<2)>>2]=t;u=(Mb(b)|0)==-1;a[g>>0]=u&1;i=f;return u|0}else{e=pc(b+544|0,e,0)|0;h=b+256|0;g=b+260|0;k=c[g>>2]|0;j=b+264|0;if((k|0)==(c[j>>2]|0)){l=(k>>1)+2&-2;l=(l|0)<2?2:l;if((l|0)>(2147483647-k|0)){u=va(1)|0;Ta(u|0,48,0)}t=c[h>>2]|0;u=l+k|0;c[j>>2]=u;u=Ud(t,u<<2)|0;c[h>>2]=u;if((u|0)==0?(c[(Oa()|0)>>2]|0)==12:0){u=va(1)|0;Ta(u|0,48,0)}k=c[g>>2]|0}c[g>>2]=k+1;g=(c[h>>2]|0)+(k<<2)|0;if(g)c[g>>2]=e;Nb(b,e);u=1;i=f;return u|0}return 0}function Lb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=c[d>>2]|0;d=f>>1;a[(c[b+332>>2]|0)+d>>0]=(f&1^1)&255^1;g=c[b+296>>2]|0;d=(c[b+396>>2]|0)+(d<<3)|0;c[d>>2]=e;c[d+4>>2]=g;e=b+284|0;d=c[e>>2]|0;c[e>>2]=d+1;c[(c[b+280>>2]|0)+(d<<2)>>2]=f;return}function Mb(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;k=i;i=i+16|0;r=k;h=b+512|0;t=c[h>>2]|0;q=b+284|0;if((t|0)>=(c[q>>2]|0)){M=0;K=0;O=-1;N=b+184|0;I=N;L=I;L=c[L>>2]|0;I=I+4|0;I=c[I>>2]|0;I=ne(L|0,I|0,M|0,K|0)|0;L=F;J=N;c[J>>2]=I;N=N+4|0;c[N>>2]=L;N=b+520|0;L=N;J=L;J=c[J>>2]|0;L=L+4|0;L=c[L>>2]|0;K=je(J|0,L|0,M|0,K|0)|0;M=F;L=N;c[L>>2]=K;N=N+4|0;c[N>>2]=M;i=k;return O|0}o=b+280|0;j=b+428|0;g=b+412|0;l=b+332|0;m=b+544|0;n=r+4|0;e=b+396|0;p=b+296|0;f=b+456|0;z=-1;s=0;do{c[h>>2]=t+1;w=c[(c[o>>2]|0)+(t<<2)>>2]|0;if(a[(c[j>>2]|0)+w>>0]|0){u=c[g>>2]|0;t=u+(w*12|0)+4|0;y=c[t>>2]|0;if((y|0)>0){u=u+(w*12|0)|0;v=0;x=0;do{B=c[u>>2]|0;A=B+(v<<3)|0;if((c[(c[c[f>>2]>>2]|0)+(c[A>>2]<<2)>>2]&3|0)!=1){N=A;O=c[N+4>>2]|0;y=B+(x<<3)|0;c[y>>2]=c[N>>2];c[y+4>>2]=O;y=c[t>>2]|0;x=x+1|0}v=v+1|0}while((v|0)<(y|0))}else{v=0;x=0}u=v-x|0;if((u|0)>0)c[t>>2]=y-u;a[(c[j>>2]|0)+w>>0]=0}t=c[g>>2]|0;s=s+1|0;u=c[t+(w*12|0)>>2]|0;t=t+(w*12|0)+4|0;x=c[t>>2]|0;v=u+(x<<3)|0;a:do if(!x){v=u;y=u}else{w=w^1;x=(x<<3)+ -1|0;B=u;y=u;while(1){while(1){b:while(1){H=c[B+4>>2]|0;O=d[(c[l>>2]|0)+(H>>1)>>0]^H&1;J=a[528]|0;I=J&255;K=I&2;I=I>>>1^1;if((O&255)<<24>>24==J<<24>>24&I|K&O){E=19;break}A=c[B>>2]|0;E=c[m>>2]|0;G=E+(A<<2)|0;C=E+(A+1<<2)|0;D=c[C>>2]|0;if((D|0)==(w|0)){O=E+(A+2<<2)|0;D=c[O>>2]|0;c[C>>2]=D;c[O>>2]=w}C=B+8|0;c[r>>2]=A;c[n>>2]=D;if((D|0)!=(H|0)?(O=d[(c[l>>2]|0)+(D>>1)>>0]^D&1,((O&255)<<24>>24==J<<24>>24&I|K&O|0)!=0):0){E=27;break}K=c[G>>2]|0;if(K>>>0<=95){E=31;break}I=c[l>>2]|0;J=a[536]|0;H=J&255;O=H&2;H=H>>>1^1;N=2;while(1){L=G+(N<<2)+4|0;M=c[L>>2]|0;P=d[I+(M>>1)>>0]^M&1;N=N+1|0;if(!((P&255)<<24>>24==J<<24>>24&H|O&P))break;if((N|0)>=(K>>>5|0)){E=32;break b}}P=E+(A+2<<2)|0;c[P>>2]=M;c[L>>2]=w;qc((c[g>>2]|0)+((c[P>>2]^1)*12|0)|0,r);if((C|0)==(v|0))break a;else B=C}if((E|0)==19){E=0;N=B;O=c[N+4>>2]|0;P=y;c[P>>2]=c[N>>2];c[P+4>>2]=O;B=B+8|0;y=y+8|0}else if((E|0)==27){E=0;O=r;P=c[O+4>>2]|0;B=y;c[B>>2]=c[O>>2];c[B+4>>2]=P;B=C;y=y+8|0}else if((E|0)==31){J=a[536]|0;E=32}if((E|0)==32){E=y+8|0;G=r;I=c[G+4>>2]|0;H=y;c[H>>2]=c[G>>2];c[H+4>>2]=I;H=D>>1;I=D&1;G=(c[l>>2]|0)+H|0;P=d[G>>0]^I;O=J&255;if((P&255)<<24>>24==J<<24>>24&(O>>>1^1)|O&2&P)break;a[G>>0]=(I^1)&255^1;y=c[p>>2]|0;B=(c[e>>2]|0)+(H<<3)|0;c[B>>2]=A;c[B+4>>2]=y;B=c[q>>2]|0;c[q>>2]=B+1;c[(c[o>>2]|0)+(B<<2)>>2]=D;B=C;y=E}if((B|0)==(v|0))break a}c[h>>2]=c[q>>2];if(C>>>0<v>>>0){z=(u+(x-C)|0)>>>3;while(1){N=C;C=C+8|0;O=c[N+4>>2]|0;P=E;c[P>>2]=c[N>>2];c[P+4>>2]=O;if(C>>>0>=v>>>0)break;else E=E+8|0}B=B+(z+2<<3)|0;y=y+(z+2<<3)|0}else{B=C;y=E}if((B|0)==(v|0)){z=A;break}else z=A}}while(0);u=v-y|0;if((u|0)>0)c[t>>2]=(c[t>>2]|0)-(u>>3);t=c[h>>2]|0}while((t|0)<(c[q>>2]|0));N=s;L=((s|0)<0)<<31>>31;P=z;O=b+184|0;J=O;M=J;M=c[M>>2]|0;J=J+4|0;J=c[J>>2]|0;J=ne(M|0,J|0,N|0,L|0)|0;M=F;K=O;c[K>>2]=J;O=O+4|0;c[O>>2]=M;O=b+520|0;M=O;K=M;K=c[K>>2]|0;M=M+4|0;M=c[M>>2]|0;L=je(K|0,M|0,N|0,L|0)|0;N=F;M=O;c[M>>2]=L;O=O+4|0;c[O>>2]=N;i=k;return P|0}function Nb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;i=i+16|0;k=d+8|0;f=d;g=c[a+544>>2]|0;e=g+(b<<2)|0;h=g+(b+1<<2)|0;j=a+412|0;l=(c[j>>2]|0)+((c[h>>2]^1)*12|0)|0;g=g+(b+2<<2)|0;m=c[g>>2]|0;c[k>>2]=b;c[k+4>>2]=m;qc(l,k);g=(c[j>>2]|0)+((c[g>>2]^1)*12|0)|0;h=c[h>>2]|0;c[f>>2]=b;c[f+4>>2]=h;qc(g,f);if(!(c[e>>2]&4)){m=a+208|0;l=m;l=ne(c[l>>2]|0,c[l+4>>2]|0,1,0)|0;c[m>>2]=l;c[m+4>>2]=F;m=a+224|0;l=m;l=ne((c[e>>2]|0)>>>5|0,0,c[l>>2]|0,c[l+4>>2]|0)|0;c[m>>2]=l;c[m+4>>2]=F;i=d;return}else{m=a+216|0;l=m;l=ne(c[l>>2]|0,c[l+4>>2]|0,1,0)|0;c[m>>2]=l;c[m+4>>2]=F;m=a+232|0;l=m;l=ne((c[e>>2]|0)>>>5|0,0,c[l>>2]|0,c[l+4>>2]|0)|0;c[m>>2]=l;c[m+4>>2]=F;i=d;return}}function Ob(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+16|0;l=g+4|0;j=g;h=c[b+544>>2]|0;f=h+(d<<2)|0;k=c[h+(d+1<<2)>>2]^1;if(!e){c[l>>2]=k;e=b+428|0;m=c[e>>2]|0;k=m+k|0;if(!(a[k>>0]|0)){a[k>>0]=1;mc(b+444|0,l);m=c[e>>2]|0}d=c[h+(d+2<<2)>>2]^1;c[j>>2]=d;d=m+d|0;if(!(a[d>>0]|0)){a[d>>0]=1;mc(b+444|0,j)}}else{j=b+412|0;e=c[j>>2]|0;l=e+(k*12|0)|0;h=h+(d+2<<2)|0;k=e+(k*12|0)+4|0;m=c[k>>2]|0;a:do if((m|0)>0){p=c[l>>2]|0;o=0;while(1){n=o+1|0;if((c[p+(o<<3)>>2]|0)==(d|0)){n=o;break a}if((n|0)<(m|0))o=n;else break}}else n=0;while(0);m=m+ -1|0;if((n|0)<(m|0)){do{e=c[l>>2]|0;m=n;n=n+1|0;o=e+(n<<3)|0;p=c[o+4>>2]|0;m=e+(m<<3)|0;c[m>>2]=c[o>>2];c[m+4>>2]=p;m=(c[k>>2]|0)+ -1|0}while((n|0)<(m|0));e=c[j>>2]|0}c[k>>2]=m;j=c[h>>2]^1;h=e+(j*12|0)|0;j=e+(j*12|0)+4|0;k=c[j>>2]|0;b:do if((k|0)>0){e=c[h>>2]|0;m=0;while(1){l=m+1|0;if((c[e+(m<<3)>>2]|0)==(d|0)){l=m;break b}if((l|0)<(k|0))m=l;else break}}else l=0;while(0);d=k+ -1|0;if((l|0)<(d|0))do{n=c[h>>2]|0;d=l;l=l+1|0;o=n+(l<<3)|0;p=c[o+4>>2]|0;d=n+(d<<3)|0;c[d>>2]=c[o>>2];c[d+4>>2]=p;d=(c[j>>2]|0)+ -1|0}while((l|0)<(d|0));c[j>>2]=d}if(!(c[f>>2]&4)){p=b+208|0;o=p;o=ne(c[o>>2]|0,c[o+4>>2]|0,-1,-1)|0;c[p>>2]=o;c[p+4>>2]=F;p=b+224|0;o=p;o=je(c[o>>2]|0,c[o+4>>2]|0,(c[f>>2]|0)>>>5|0,0)|0;c[p>>2]=o;c[p+4>>2]=F;i=g;return}else{p=b+216|0;o=p;o=ne(c[o>>2]|0,c[o+4>>2]|0,-1,-1)|0;c[p>>2]=o;c[p+4>>2]=F;p=b+232|0;o=p;o=je(c[o>>2]|0,c[o+4>>2]|0,(c[f>>2]|0)>>>5|0,0)|0;c[p>>2]=o;c[p+4>>2]=F;i=g;return}}function Pb(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;g=b+544|0;m=c[g>>2]|0;f=m+(e<<2)|0;Ob(b,e,0);m=c[m+(e+1<<2)>>2]|0;j=m>>1;m=(d[(c[b+332>>2]|0)+j>>0]|0)^m&1;o=a[528]|0;n=o&255;if((((m&255)<<24>>24==o<<24>>24&(n>>>1^1)|n&2&m|0)!=0?(k=(c[b+396>>2]|0)+(j<<3)|0,l=c[k>>2]|0,(l|0)!=-1):0)?((c[g>>2]|0)+(l<<2)|0)==(f|0):0)c[k>>2]=-1;c[f>>2]=c[f>>2]&-4|1;n=c[(c[g>>2]|0)+(e<<2)>>2]|0;o=b+556|0;c[o>>2]=((((n>>>3&1)+(n>>>5)<<2)+4|0)>>>2)+(c[o>>2]|0);i=h;return}function Qb(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=c[e>>2]|0;if(g>>>0<=31){l=0;i=f;return l|0}h=c[b+332>>2]|0;j=a[528]|0;k=j&255;l=k&2;k=k>>>1^1;b=0;while(1){m=c[e+(b<<2)+4>>2]|0;m=(d[h+(m>>1)>>0]|0)^m&1;b=b+1|0;if((m&255)<<24>>24==j<<24>>24&k|l&m){g=1;e=5;break}if((b|0)>=(g>>>5|0)){g=0;e=5;break}}if((e|0)==5){i=f;return g|0}return 0}function Rb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;e=b+296|0;if((c[e>>2]|0)<=(d|0)){i=g;return}f=b+284|0;s=c[f>>2]|0;j=b+292|0;t=c[j>>2]|0;u=c[t+(d<<2)>>2]|0;if((s|0)>(u|0)){r=b+280|0;m=b+332|0;l=b+88|0;k=b+348|0;n=b+460|0;p=b+476|0;q=b+472|0;o=b+380|0;do{s=s+ -1|0;u=c[(c[r>>2]|0)+(s<<2)>>2]>>1;a[(c[m>>2]|0)+u>>0]=a[544]|0;t=c[l>>2]|0;if((t|0)<=1){if((t|0)==1?(s|0)>(c[(c[j>>2]|0)+((c[e>>2]|0)+ -1<<2)>>2]|0):0)h=7}else h=7;if((h|0)==7){h=0;a[(c[k>>2]|0)+u>>0]=c[(c[r>>2]|0)+(s<<2)>>2]&1}if(!((c[p>>2]|0)>(u|0)?(c[(c[q>>2]|0)+(u<<2)>>2]|0)>-1:0))h=11;if((h|0)==11?(h=0,(a[(c[o>>2]|0)+u>>0]|0)!=0):0)lc(n,u);t=c[j>>2]|0;u=c[t+(d<<2)>>2]|0}while((s|0)>(u|0));s=c[f>>2]|0}c[b+512>>2]=u;b=c[t+(d<<2)>>2]|0;if((s-b|0)>0)c[f>>2]=b;if(((c[e>>2]|0)-d|0)<=0){i=g;return}c[e>>2]=d;i=g;return}function Sb(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0;d=i;f=b+72|0;q=+h[f>>3]*1389796.0;q=q- +(~~(q/2147483647.0)|0)*2147483647.0;h[f>>3]=q;l=b+464|0;if(q/2147483647.0<+h[b+64>>3]?(m=c[l>>2]|0,(m|0)!=0):0){q=q*1389796.0;q=q- +(~~(q/2147483647.0)|0)*2147483647.0;h[f>>3]=q;m=c[(c[b+460>>2]|0)+(~~(+(m|0)*(q/2147483647.0))<<2)>>2]|0;o=a[(c[b+332>>2]|0)+m>>0]|0;n=a[544]|0;p=n&255;if(((p>>>1^1)&o<<24>>24==n<<24>>24|o&2&p|0)!=0?(a[(c[b+380>>2]|0)+m>>0]|0)!=0:0){p=b+176|0;o=p;o=ne(c[o>>2]|0,c[o+4>>2]|0,1,0)|0;c[p>>2]=o;c[p+4>>2]=F}}else m=-1;n=b+460|0;p=b+332|0;o=b+380|0;while(1){if(((m|0)!=-1?(r=a[(c[p>>2]|0)+m>>0]|0,j=a[544]|0,e=j&255,g=e>>>1^1,(g&r<<24>>24==j<<24>>24|r&2&e|0)!=0):0)?(a[(c[o>>2]|0)+m>>0]|0)!=0:0)break;if(!(c[l>>2]|0)){e=-2;k=17;break}m=rc(n)|0}if((k|0)==17){i=d;return e|0}l=a[(c[b+364>>2]|0)+m>>0]|0;k=l&255;if(!(g&l<<24>>24==j<<24>>24|e&2&k)){p=a[528]|0;r=p&255;r=((r>>>1^1)&l<<24>>24==p<<24>>24|k&2&r|0)!=0|m<<1;i=d;return r|0}if(!(a[b+92>>0]|0)){r=(a[(c[b+348>>2]|0)+m>>0]|0)!=0|m<<1;i=d;return r|0}else{q=+h[f>>3]*1389796.0;q=q- +(~~(q/2147483647.0)|0)*2147483647.0;h[f>>3]=q;r=q/2147483647.0<.5|m<<1;i=d;return r|0}return 0}function Tb(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0.0,U=0;j=i;i=i+16|0;p=j+8|0;t=j+4|0;n=j;m=e+4|0;k=c[m>>2]|0;l=e+8|0;if((k|0)==(c[l>>2]|0)){q=(k>>1)+2&-2;q=(q|0)<2?2:q;if((q|0)>(2147483647-k|0)){S=va(1)|0;Ta(S|0,48,0)}R=c[e>>2]|0;S=q+k|0;c[l>>2]=S;S=Ud(R,S<<2)|0;c[e>>2]=S;if((S|0)==0?(c[(Oa()|0)>>2]|0)==12:0){S=va(1)|0;Ta(S|0,48,0)}k=c[m>>2]|0}l=(c[e>>2]|0)+(k<<2)|0;if(l){c[l>>2]=0;k=c[m>>2]|0}c[m>>2]=k+1;q=b+544|0;H=b+280|0;k=b+588|0;l=b+396|0;C=b+504|0;E=b+316|0;D=b+540|0;B=b+476|0;A=b+472|0;z=b+460|0;y=b+488|0;x=b+296|0;v=b+496|0;w=b+272|0;G=b+268|0;J=-2;I=(c[b+284>>2]|0)+ -1|0;K=0;do{L=c[q>>2]|0;d=L+(d<<2)|0;M=c[d>>2]|0;if((M&4|0)!=0?(r=+h[v>>3],S=d+(M>>>5<<2)+4|0,T=r+ +g[S>>2],g[S>>2]=T,T>1.0e20):0){O=c[w>>2]|0;if((O|0)>0){N=c[G>>2]|0;M=0;do{S=L+(c[N+(M<<2)>>2]<<2)|0;S=S+((c[S>>2]|0)>>>5<<2)+4|0;g[S>>2]=+g[S>>2]*1.0e-20;M=M+1|0}while((M|0)!=(O|0))}h[v>>3]=r*1.0e-20}J=(J|0)!=-2&1;if(J>>>0<(c[d>>2]|0)>>>5>>>0)do{M=c[d+(J<<2)+4>>2]|0;c[t>>2]=M;M=M>>1;L=(c[k>>2]|0)+M|0;do if((a[L>>0]|0)==0?(c[(c[l>>2]|0)+(M<<3)+4>>2]|0)>0:0){O=c[E>>2]|0;S=O+(M<<3)|0;T=+h[C>>3]+ +h[S>>3];h[S>>3]=T;if(T>1.0e+100){P=c[D>>2]|0;if((P|0)>0){N=0;do{S=O+(N<<3)|0;h[S>>3]=+h[S>>3]*1.0e-100;N=N+1|0}while((N|0)!=(P|0))}h[C>>3]=+h[C>>3]*1.0e-100}if((c[B>>2]|0)>(M|0)?(u=c[A>>2]|0,s=c[u+(M<<2)>>2]|0,(s|0)>-1):0){N=c[z>>2]|0;O=c[N+(s<<2)>>2]|0;a:do if(!s)R=0;else{S=s;while(1){R=S;S=S+ -1>>1;Q=N+(S<<2)|0;P=c[Q>>2]|0;U=c[c[y>>2]>>2]|0;if(!(+h[U+(O<<3)>>3]>+h[U+(P<<3)>>3]))break a;c[N+(R<<2)>>2]=P;c[u+(c[Q>>2]<<2)>>2]=R;if(!S){R=0;break}}}while(0);c[N+(R<<2)>>2]=O;c[u+(O<<2)>>2]=R}a[L>>0]=1;if((c[(c[l>>2]|0)+(M<<3)+4>>2]|0)<(c[x>>2]|0)){mc(e,t);break}else{K=K+1|0;break}}while(0);J=J+1|0}while((J|0)<((c[d>>2]|0)>>>5|0));d=c[H>>2]|0;L=c[k>>2]|0;do{J=I;I=I+ -1|0;J=c[d+(J<<2)>>2]|0;N=J>>1;M=L+N|0}while((a[M>>0]|0)==0);d=c[(c[l>>2]|0)+(N<<3)>>2]|0;a[M>>0]=0;K=K+ -1|0}while((K|0)>0);c[c[e>>2]>>2]=J^1;t=b+616|0;v=c[t>>2]|0;s=b+620|0;if(!v)w=c[s>>2]|0;else{c[s>>2]=0;w=0}u=c[m>>2]|0;if((w|0)<(u|0)){y=b+624|0;x=c[y>>2]|0;if((x|0)<(u|0)){U=u+1-x&-2;w=(x>>1)+2&-2;w=(U|0)>(w|0)?U:w;if((w|0)>(2147483647-x|0)){U=va(1)|0;Ta(U|0,48,0)}U=w+x|0;c[y>>2]=U;v=Ud(v,U<<2)|0;c[t>>2]=v;if((v|0)==0?(c[(Oa()|0)>>2]|0)==12:0){U=va(1)|0;Ta(U|0,48,0)}}w=c[s>>2]|0;b:do if((w|0)<(u|0))while(1){v=v+(w<<2)|0;if(v)c[v>>2]=0;w=w+1|0;if((w|0)==(u|0))break b;v=c[t>>2]|0}while(0);c[s>>2]=u;u=c[m>>2]|0}if((u|0)>0){w=c[t>>2]|0;v=c[e>>2]|0;x=0;do{c[w+(x<<2)>>2]=c[v+(x<<2)>>2];x=x+1|0;u=c[m>>2]|0}while((x|0)<(u|0))}v=c[b+84>>2]|0;if((v|0)==1)if((u|0)>1){n=c[e>>2]|0;o=1;v=1;while(1){u=c[n+(o<<2)>>2]|0;p=c[l>>2]|0;w=c[p+(u>>1<<3)>>2]|0;c:do if((w|0)!=-1){x=(c[q>>2]|0)+(w<<2)|0;y=c[x>>2]|0;if(y>>>0>63){w=c[k>>2]|0;z=1;while(1){U=c[x+(z<<2)+4>>2]>>1;if((a[w+U>>0]|0)==0?(c[p+(U<<3)+4>>2]|0)>0:0)break;z=z+1|0;if((z|0)>=(y>>>5|0))break c}c[n+(v<<2)>>2]=u;v=v+1|0}}else{c[n+(v<<2)>>2]=u;v=v+1|0}while(0);o=o+1|0;p=c[m>>2]|0;if((o|0)>=(p|0)){n=p;break}}}else{n=u;o=1;v=1}else if((v|0)==2)if((u|0)>1){q=1;v=1;do{w=c[e>>2]|0;u=c[w+(q<<2)>>2]|0;if((c[(c[l>>2]|0)+(u>>1<<3)>>2]|0)!=-1){c[n>>2]=u;c[p+0>>2]=c[n+0>>2];if(!(Ub(b,p)|0)){u=c[e>>2]|0;w=u;u=c[u+(q<<2)>>2]|0;o=62}}else o=62;if((o|0)==62){o=0;c[w+(v<<2)>>2]=u;v=v+1|0}q=q+1|0;u=c[m>>2]|0}while((q|0)<(u|0));n=u;o=q}else{n=u;o=1;v=1}else{n=u;o=u;v=u}U=b+240|0;S=U;S=ne(c[S>>2]|0,c[S+4>>2]|0,n|0,((n|0)<0)<<31>>31|0)|0;c[U>>2]=S;c[U+4>>2]=F;o=o-v|0;if((o|0)>0){n=n-o|0;c[m>>2]=n}U=b+248|0;S=U;S=ne(c[S>>2]|0,c[S+4>>2]|0,n|0,((n|0)<0)<<31>>31|0)|0;c[U>>2]=S;c[U+4>>2]=F;if((n|0)==1)e=0;else{e=c[e>>2]|0;if((n|0)>2){b=c[l>>2]|0;m=2;o=1;do{o=(c[b+(c[e+(m<<2)>>2]>>1<<3)+4>>2]|0)>(c[b+(c[e+(o<<2)>>2]>>1<<3)+4>>2]|0)?m:o;m=m+1|0}while((m|0)<(n|0))}else o=1;S=e+(o<<2)|0;U=c[S>>2]|0;e=e+4|0;c[S>>2]=c[e>>2];c[e>>2]=U;e=c[(c[l>>2]|0)+(U>>1<<3)+4>>2]|0}c[f>>2]=e;if((c[s>>2]|0)>0)f=0;else{i=j;return}do{a[(c[k>>2]|0)+(c[(c[t>>2]|0)+(f<<2)>>2]>>1)>>0]=0;f=f+1|0}while((f|0)<(c[s>>2]|0));i=j;return}function Ub(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;n=c[d>>2]|0;l=b+396|0;q=c[l>>2]|0;k=b+544|0;s=(c[k>>2]|0)+(c[q+(n>>1<<3)>>2]<<2)|0;h=b+604|0;f=b+608|0;if(c[h>>2]|0)c[f>>2]=0;g=b+588|0;j=b+612|0;b=b+616|0;o=1;while(1){if(o>>>0<(c[s>>2]|0)>>>5>>>0){r=c[s+(o<<2)+4>>2]|0;p=r>>1;if((c[q+(p<<3)+4>>2]|0)!=0?(m=a[(c[g>>2]|0)+p>>0]|0,(m+ -1<<24>>24&255)>=2):0){s=c[f>>2]|0;t=(s|0)==(c[j>>2]|0);if(m<<24>>24==3?1:(c[q+(p<<3)>>2]|0)==-1){k=8;break}if(t){q=(s>>1)+2&-2;q=(q|0)<2?2:q;if((q|0)>(2147483647-s|0)){k=24;break}u=c[h>>2]|0;t=q+s|0;c[j>>2]=t;t=Ud(u,t<<3)|0;c[h>>2]=t;if((t|0)==0?(c[(Oa()|0)>>2]|0)==12:0){k=24;break}s=c[f>>2]|0}c[f>>2]=s+1;q=(c[h>>2]|0)+(s<<3)|0;if(q){u=q;c[u>>2]=o;c[u+4>>2]=n}c[d>>2]=r;s=c[l>>2]|0;n=r;q=s;s=(c[k>>2]|0)+(c[s+(p<<3)>>2]<<2)|0;o=0}}else{n=(c[g>>2]|0)+(n>>1)|0;if(!(a[n>>0]|0)){a[n>>0]=2;mc(b,d)}n=c[f>>2]|0;if(!n){f=1;k=34;break}u=n+ -1|0;n=c[h>>2]|0;o=c[n+(u<<3)>>2]|0;n=c[n+(u<<3)+4>>2]|0;c[d>>2]=n;q=c[l>>2]|0;s=(c[k>>2]|0)+(c[q+(n>>1<<3)>>2]<<2)|0;c[f>>2]=u}o=o+1|0}if((k|0)==8){if(t){k=(s>>1)+2&-2;k=(k|0)<2?2:k;if((k|0)>(2147483647-s|0)){u=va(1)|0;Ta(u|0,48,0)}t=c[h>>2]|0;u=k+s|0;c[j>>2]=u;u=Ud(t,u<<3)|0;c[h>>2]=u;if((u|0)==0?(c[(Oa()|0)>>2]|0)==12:0){u=va(1)|0;Ta(u|0,48,0)}s=c[f>>2]|0}j=s+1|0;c[f>>2]=j;k=(c[h>>2]|0)+(s<<3)|0;if(k){j=k;c[j>>2]=0;c[j+4>>2]=n;j=c[f>>2]|0}if((j|0)>0)k=0;else{u=0;i=e;return u|0}do{l=(c[g>>2]|0)+(c[(c[h>>2]|0)+(k<<3)+4>>2]>>1)|0;if(!(a[l>>0]|0)){a[l>>0]=3;mc(b,(c[h>>2]|0)+(k<<3)+4|0);j=c[f>>2]|0}k=k+1|0}while((k|0)<(j|0));f=0;i=e;return f|0}else if((k|0)==24)Ta(va(1)|0,48,0);else if((k|0)==34){i=e;return f|0}return 0}function Vb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+32|0;h=j+16|0;g=j+12|0;k=j+8|0;f=j;n=e+20|0;l=e+16|0;if((c[n>>2]|0)>0){m=0;do{a[(c[e>>2]|0)+(c[(c[l>>2]|0)+(m<<2)>>2]|0)>>0]=0;m=m+1|0}while((m|0)<(c[n>>2]|0))}if(c[l>>2]|0)c[n>>2]=0;m=c[d>>2]|0;c[k>>2]=m;c[g>>2]=m;c[h+0>>2]=c[g+0>>2];sc(e,h,0);l=(c[e>>2]|0)+m|0;if(!(a[l>>0]|0)){a[l>>0]=1;mc(e+16|0,k)}if(!(c[b+296>>2]|0)){i=j;return}d=m>>1;o=b+588|0;a[(c[o>>2]|0)+d>>0]=1;p=c[b+284>>2]|0;n=b+292|0;s=c[c[n>>2]>>2]|0;if((p|0)>(s|0)){k=b+280|0;l=b+396|0;m=e+16|0;b=b+544|0;do{p=p+ -1|0;r=c[(c[k>>2]|0)+(p<<2)>>2]|0;q=r>>1;if(a[(c[o>>2]|0)+q>>0]|0){s=c[l>>2]|0;t=c[s+(q<<3)>>2]|0;a:do if((t|0)==-1){r=r^1;c[f>>2]=r;c[g>>2]=r;c[h+0>>2]=c[g+0>>2];sc(e,h,0);r=(c[e>>2]|0)+r|0;if(!(a[r>>0]|0)){a[r>>0]=1;mc(m,f)}}else{r=(c[b>>2]|0)+(t<<2)|0;t=c[r>>2]|0;if(t>>>0>63){u=1;while(1){v=c[r+(u<<2)+4>>2]>>1;if((c[s+(v<<3)+4>>2]|0)>0){a[(c[o>>2]|0)+v>>0]=1;t=c[r>>2]|0}u=u+1|0;if((u|0)>=(t>>>5|0))break a;s=c[l>>2]|0}}}while(0);a[(c[o>>2]|0)+q>>0]=0;s=c[c[n>>2]>>2]|0}}while((p|0)>(s|0))}a[(c[o>>2]|0)+d>>0]=0;i=j;return}function Wb(b){b=b|0;var e=0,f=0,j=0,k=0,l=0,m=0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;f=i;i=i+16|0;p=f+4|0;u=f;e=b+272|0;w=c[e>>2]|0;n=+h[b+496>>3]/+(w|0);k=b+544|0;l=b+268|0;v=c[l>>2]|0;c[u>>2]=k;c[p+0>>2]=c[u+0>>2];tc(v,w,p);p=c[e>>2]|0;if((p|0)>0){m=b+332|0;o=b+396|0;q=0;v=0;do{t=c[l>>2]|0;u=c[t+(q<<2)>>2]|0;w=c[k>>2]|0;r=w+(u<<2)|0;s=c[r>>2]|0;do if(s>>>0>95){x=c[w+(u+1<<2)>>2]|0;w=x>>1;x=(d[(c[m>>2]|0)+w>>0]|0)^x&1;z=a[528]|0;y=z&255;if(((x&255)<<24>>24==z<<24>>24&(y>>>1^1)|y&2&x|0)!=0?(z=c[(c[o>>2]|0)+(w<<3)>>2]|0,(z|0)!=-1&(z|0)==(u|0)):0){j=9;break}if((q|0)>=((p|0)/2|0|0)?!(+g[r+(s>>>5<<2)+4>>2]<n):0){j=9;break}Pb(b,u)}else j=9;while(0);if((j|0)==9){j=0;c[t+(v<<2)>>2]=u;v=v+1|0}q=q+1|0;p=c[e>>2]|0}while((q|0)<(p|0))}else{q=0;v=0}j=q-v|0;if((j|0)>0)c[e>>2]=p-j;if(!(+((c[b+556>>2]|0)>>>0)>+h[b+96>>3]*+((c[b+548>>2]|0)>>>0))){i=f;return}gb[c[(c[b>>2]|0)+8>>2]&31](b);i=f;return}function Xb(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;f=i;g=e+4|0;m=c[g>>2]|0;if((m|0)>0){j=b+544|0;h=b+332|0;k=0;l=0;do{u=c[e>>2]|0;p=c[u+(k<<2)>>2]|0;m=(c[j>>2]|0)+(p<<2)|0;o=c[m>>2]|0;do if(o>>>0>31){v=c[h>>2]|0;r=a[528]|0;q=r&255;w=q&2;q=q>>>1^1;s=o>>>5;t=0;do{x=c[m+(t<<2)+4>>2]|0;x=(d[v+(x>>1)>>0]|0)^x&1;t=t+1|0;if((x&255)<<24>>24==r<<24>>24&q|w&x){n=7;break}}while((t|0)<(s|0));if((n|0)==7){n=0;Pb(b,p);break}if(o>>>0>95){n=a[536]|0;q=o>>>5;p=2;do{r=m+(p<<2)+4|0;x=c[r>>2]|0;x=(d[(c[h>>2]|0)+(x>>1)>>0]|0)^x&1;w=n&255;if((x&255)<<24>>24==n<<24>>24&(w>>>1^1)|w&2&x){c[r>>2]=c[m+(q+ -1<<2)+4>>2];o=c[m>>2]|0;if(o&8){o=o>>>5;c[m+(o+ -1<<2)+4>>2]=c[m+(o<<2)+4>>2];o=c[m>>2]|0}o=o+ -32|0;c[m>>2]=o;p=p+ -1|0}p=p+1|0;q=o>>>5}while((p|0)<(q|0));p=c[e>>2]|0;u=p;p=c[p+(k<<2)>>2]|0;n=16}else n=16}else n=16;while(0);if((n|0)==16){n=0;c[u+(l<<2)>>2]=p;l=l+1|0}k=k+1|0;m=c[g>>2]|0}while((k|0)<(m|0))}else{k=0;l=0}e=k-l|0;if((e|0)<=0){i=f;return}c[g>>2]=m-e;i=f;return}function Yb(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;i=i+16|0;e=g+4|0;h=g;c[e>>2]=0;d=e+4|0;c[d>>2]=0;f=e+8|0;c[f>>2]=0;c[h>>2]=0;j=b+540|0;n=c[j>>2]|0;if((n|0)>0){l=b+380|0;k=b+332|0;m=0;do{if((a[(c[l>>2]|0)+m>>0]|0)!=0?(p=a[(c[k>>2]|0)+m>>0]|0,q=a[544]|0,o=q&255,((o>>>1^1)&p<<24>>24==q<<24>>24|p&2&o|0)!=0):0){nc(e,h);n=c[j>>2]|0}m=m+1|0;c[h>>2]=m}while((m|0)<(n|0))}uc(b+460|0,e);b=c[e>>2]|0;if(!b){i=g;return}c[d>>2]=0;Td(b);c[e>>2]=0;c[f>>2]=0;i=g;return}function Zb(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;f=b+492|0;if((a[f>>0]|0)!=0?(Mb(b)|0)==-1:0){f=b+284|0;g=b+516|0;if((c[f>>2]|0)==(c[g>>2]|0)){s=1;i=d;return s|0}j=b+520|0;s=j;r=c[s+4>>2]|0;if((r|0)>0|(r|0)==0&(c[s>>2]|0)>>>0>0){s=1;i=d;return s|0}Xb(b,b+268|0);if(a[b+536>>0]|0){Xb(b,b+256|0);l=b+564|0;k=b+568|0;if((c[k>>2]|0)>0){n=b+588|0;m=0;do{a[(c[n>>2]|0)+(c[(c[l>>2]|0)+(m<<2)>>2]|0)>>0]=1;m=m+1|0}while((m|0)<(c[k>>2]|0))}p=c[f>>2]|0;if((p|0)>0){m=c[b+280>>2]|0;n=c[b+588>>2]|0;q=0;o=0;do{r=c[m+(q<<2)>>2]|0;if(!(a[n+(r>>1)>>0]|0)){c[m+(o<<2)>>2]=r;p=c[f>>2]|0;o=o+1|0}q=q+1|0}while((q|0)<(p|0))}else{q=0;o=0}m=q-o|0;if((m|0)>0){p=p-m|0;c[f>>2]=p}c[b+512>>2]=p;a:do if((c[k>>2]|0)>0){o=b+588|0;m=0;do{a[(c[o>>2]|0)+(c[(c[l>>2]|0)+(m<<2)>>2]|0)>>0]=0;m=m+1|0;n=c[k>>2]|0}while((m|0)<(n|0));if((n|0)>0){n=b+580|0;o=b+584|0;m=b+576|0;p=0;while(1){r=c[n>>2]|0;if((r|0)==(c[o>>2]|0)){q=(r>>1)+2&-2;q=(q|0)<2?2:q;if((q|0)>(2147483647-r|0)){e=28;break}s=c[m>>2]|0;q=q+r|0;c[o>>2]=q;q=Ud(s,q<<2)|0;c[m>>2]=q;if((q|0)==0?(c[(Oa()|0)>>2]|0)==12:0){e=28;break}r=c[n>>2]|0}else q=c[m>>2]|0;s=q+(r<<2)|0;if(s){c[s>>2]=0;r=c[n>>2]|0}c[n>>2]=r+1;s=c[l>>2]|0;c[q+(r<<2)>>2]=c[s+(p<<2)>>2];p=p+1|0;if((p|0)>=(c[k>>2]|0))break a}if((e|0)==28)Ta(va(1)|0,48,0)}else e=21}else e=21;while(0);if((e|0)==21)s=c[l>>2]|0;if(s)c[k>>2]=0}if(+((c[b+556>>2]|0)>>>0)>+h[b+96>>3]*+((c[b+548>>2]|0)>>>0))gb[c[(c[b>>2]|0)+8>>2]&31](b);Yb(b);c[g>>2]=c[f>>2];r=b+224|0;s=b+232|0;r=ne(c[s>>2]|0,c[s+4>>2]|0,c[r>>2]|0,c[r+4>>2]|0)|0;s=j;c[s>>2]=r;c[s+4>>2]=F;s=1;i=d;return s|0}a[f>>0]=0;s=0;i=d;return s|0}function _b(b,e,f){b=b|0;e=e|0;f=f|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0.0,ga=0,ha=0,ia=0,ja=0.0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0.0,ra=0,sa=0,ta=0.0;n=i;i=i+64|0;_=n;G=n+60|0;B=n+56|0;j=n+44|0;$=n+40|0;c[j>>2]=0;m=j+4|0;c[m>>2]=0;l=j+8|0;c[l>>2]=0;N=e+160|0;M=N;M=ne(c[M>>2]|0,c[M+4>>2]|0,1,0)|0;c[N>>2]=M;c[N+4>>2]=F;N=(f|0)<0;M=e+680|0;L=e+664|0;K=e+672|0;q=e+296|0;w=e+272|0;o=e+284|0;I=e+640|0;E=e+308|0;D=e+304|0;r=e+332|0;H=e+292|0;ba=e+168|0;t=e+396|0;v=e+280|0;J=e+184|0;C=e+192|0;u=e+48|0;U=e+504|0;Y=e+56|0;aa=e+496|0;ca=e+656|0;O=e+144|0;P=e+648|0;Q=e+128|0;R=e+44|0;T=e+200|0;V=e+208|0;W=e+224|0;X=e+216|0;s=e+232|0;Z=e+540|0;p=e+292|0;x=e+544|0;z=e+276|0;y=e+268|0;A=e+268|0;da=0;a:while(1){ea=N|(da|0)<(f|0);while(1){ga=Mb(e)|0;if((ga|0)!=-1)break;if(!ea){ga=41;break a}if(a[M>>0]|0){ga=41;break a}ga=L;ha=c[ga+4>>2]|0;if((ha|0)>=0?(sa=C,ra=c[sa+4>>2]|0,!(ra>>>0<ha>>>0|((ra|0)==(ha|0)?(c[sa>>2]|0)>>>0<(c[ga>>2]|0)>>>0:0))):0){ga=41;break a}ga=K;ha=c[ga+4>>2]|0;if((ha|0)>=0?(sa=J,ra=c[sa+4>>2]|0,!(ra>>>0<ha>>>0|((ra|0)==(ha|0)?(c[sa>>2]|0)>>>0<(c[ga>>2]|0)>>>0:0))):0){ga=41;break a}if((c[q>>2]|0)==0?!(Zb(e)|0):0){ga=50;break a}if(+((c[w>>2]|0)-(c[o>>2]|0)|0)>=+h[I>>3])Wb(e);while(1){ga=c[q>>2]|0;if((ga|0)>=(c[E>>2]|0)){ga=59;break}ka=c[(c[D>>2]|0)+(ga<<2)>>2]|0;ha=d[(c[r>>2]|0)+(ka>>1)>>0]|0;sa=ha^ka&1;ia=sa&255;pa=a[528]|0;ra=pa&255;if(!(ia<<24>>24==pa<<24>>24&(ra>>>1^1)|ra&2&sa)){ga=56;break}c[G>>2]=c[o>>2];nc(H,G)}if((ga|0)==56){ga=0;ra=a[536]|0;sa=ra&255;if((sa>>>1^1)&ia<<24>>24==ra<<24>>24|ha&2&sa){ga=57;break a}if((ka|0)==-2)ga=59}if((ga|0)==59){sa=ba;sa=ne(c[sa>>2]|0,c[sa+4>>2]|0,1,0)|0;ka=ba;c[ka>>2]=sa;c[ka+4>>2]=F;ka=Sb(e)|0;if((ka|0)==-2){ga=60;break a}}c[_>>2]=c[o>>2];nc(H,_);sa=ka>>1;a[(c[r>>2]|0)+sa>>0]=(ka&1^1)&255^1;ra=c[q>>2]|0;sa=(c[t>>2]|0)+(sa<<3)|0;c[sa>>2]=-1;c[sa+4>>2]=ra;sa=c[o>>2]|0;c[o>>2]=sa+1;c[(c[v>>2]|0)+(sa<<2)>>2]=ka}ra=C;ra=ne(c[ra>>2]|0,c[ra+4>>2]|0,1,0)|0;sa=C;c[sa>>2]=ra;c[sa+4>>2]=F;da=da+1|0;if(!(c[q>>2]|0)){ga=5;break}if(c[j>>2]|0)c[m>>2]=0;Tb(e,ga,j,B);Rb(e,c[B>>2]|0);if((c[m>>2]|0)==1){ra=c[c[j>>2]>>2]|0;sa=ra>>1;a[(c[r>>2]|0)+sa>>0]=(ra&1^1)&255^1;pa=c[q>>2]|0;sa=(c[t>>2]|0)+(sa<<3)|0;c[sa>>2]=-1;c[sa+4>>2]=pa;sa=c[o>>2]|0;c[o>>2]=sa+1;c[(c[v>>2]|0)+(sa<<2)>>2]=ra}else{ea=pc(x,j,1)|0;ga=c[w>>2]|0;if((ga|0)==(c[z>>2]|0)){ha=(ga>>1)+2&-2;ha=(ha|0)<2?2:ha;if((ha|0)>(2147483647-ga|0)){ga=14;break}ra=c[y>>2]|0;sa=ha+ga|0;c[z>>2]=sa;sa=Ud(ra,sa<<2)|0;c[y>>2]=sa;if((sa|0)==0?(c[(Oa()|0)>>2]|0)==12:0){ga=14;break}ga=c[w>>2]|0}c[w>>2]=ga+1;ga=(c[y>>2]|0)+(ga<<2)|0;if(ga)c[ga>>2]=ea;Nb(e,ea);ia=c[x>>2]|0;sa=ia+(ea<<2)|0;fa=+h[aa>>3];sa=sa+((c[sa>>2]|0)>>>5<<2)+4|0;ta=fa+ +g[sa>>2];g[sa>>2]=ta;if(ta>1.0e20){ha=c[w>>2]|0;if((ha|0)>0){ga=c[A>>2]|0;ka=0;do{sa=ia+(c[ga+(ka<<2)>>2]<<2)|0;sa=sa+((c[sa>>2]|0)>>>5<<2)+4|0;g[sa>>2]=+g[sa>>2]*1.0e-20;ka=ka+1|0}while((ka|0)!=(ha|0))}h[aa>>3]=fa*1.0e-20}ra=c[c[j>>2]>>2]|0;sa=ra>>1;a[(c[r>>2]|0)+sa>>0]=(ra&1^1)&255^1;pa=c[q>>2]|0;sa=(c[t>>2]|0)+(sa<<3)|0;c[sa>>2]=ea;c[sa+4>>2]=pa;sa=c[o>>2]|0;c[o>>2]=sa+1;c[(c[v>>2]|0)+(sa<<2)>>2]=ra}h[U>>3]=1.0/+h[u>>3]*+h[U>>3];h[aa>>3]=1.0/+h[Y>>3]*+h[aa>>3];sa=(c[ca>>2]|0)+ -1|0;c[ca>>2]=sa;if(sa)continue;fa=+h[O>>3]*+h[P>>3];h[P>>3]=fa;c[ca>>2]=~~fa;fa=+h[Q>>3]*+h[I>>3];h[I>>3]=fa;if((c[R>>2]|0)<=0)continue;ga=c[C>>2]|0;ea=c[T>>2]|0;oa=c[q>>2]|0;if(!oa)ha=o;else ha=c[p>>2]|0;ha=c[ha>>2]|0;na=c[V>>2]|0;ma=c[W>>2]|0;la=c[X>>2]|0;ka=s;ia=c[ka>>2]|0;ka=c[ka+4>>2]|0;ja=+(c[Z>>2]|0);qa=1.0/ja;if((oa|0)<0)ta=0.0;else{pa=0;ta=0.0;while(1){if(!pa)ra=0;else ra=c[(c[p>>2]|0)+(pa+ -1<<2)>>2]|0;if((pa|0)==(oa|0))sa=o;else sa=(c[p>>2]|0)+(pa<<2)|0;ta=ta+ +S(+qa,+(+(pa|0)))*+((c[sa>>2]|0)-ra|0);if((pa|0)==(oa|0))break;else pa=pa+1|0}}c[_>>2]=ga;c[_+4>>2]=ea-ha;c[_+8>>2]=na;c[_+12>>2]=ma;c[_+16>>2]=~~fa;c[_+20>>2]=la;sa=_+24|0;h[k>>3]=(+(ia>>>0)+4294967296.0*+(ka>>>0))/+(la|0);c[sa>>2]=c[k>>2];c[sa+4>>2]=c[k+4>>2];sa=_+32|0;h[k>>3]=ta/ja*100.0;c[sa>>2]=c[k>>2];c[sa+4>>2]=c[k+4>>2];La(1832,_|0)|0}if((ga|0)==5)a[b>>0]=a[536]|0;else if((ga|0)==14)Ta(va(1)|0,48,0);else if((ga|0)==41){fa=+(c[Z>>2]|0);ja=1.0/fa;r=c[q>>2]|0;if((r|0)<0)qa=0.0;else{q=0;qa=0.0;while(1){if(!q)s=0;else s=c[(c[p>>2]|0)+(q+ -1<<2)>>2]|0;if((q|0)==(r|0))t=o;else t=(c[p>>2]|0)+(q<<2)|0;qa=qa+ +S(+ja,+(+(q|0)))*+((c[t>>2]|0)-s|0);if((q|0)==(r|0))break;else q=q+1|0}}h[e+528>>3]=qa/fa;Rb(e,0);a[b>>0]=a[544]|0}else if((ga|0)==50)a[b>>0]=a[536]|0;else if((ga|0)==57){c[$>>2]=ka^1;sa=e+16|0;c[_+0>>2]=c[$+0>>2];Vb(e,_,sa);a[b>>0]=a[536]|0}else if((ga|0)==60)a[b>>0]=a[528]|0;b=c[j>>2]|0;if(!b){i=n;return}c[m>>2]=0;Td(b);c[j>>2]=0;c[l>>2]=0;i=n;return}function $b(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0,z=0.0,A=0,B=0;f=i;i=i+16|0;j=f;e=d+4|0;if(c[e>>2]|0)c[d+8>>2]=0;g=d+36|0;k=d+32|0;if((c[g>>2]|0)>0){l=d+16|0;m=0;do{a[(c[l>>2]|0)+(c[(c[k>>2]|0)+(m<<2)>>2]|0)>>0]=0;m=m+1|0}while((m|0)<(c[g>>2]|0))}if(c[k>>2]|0)c[g>>2]=0;k=d+492|0;if(!(a[k>>0]|0)){a[b>>0]=a[536]|0;i=f;return}l=d+152|0;y=l;y=ne(c[y>>2]|0,c[y+4>>2]|0,1,0)|0;c[l>>2]=y;c[l+4>>2]=F;z=+h[d+120>>3]*+(c[d+208>>2]|0);l=d+640|0;h[l>>3]=z;v=+(c[d+104>>2]|0);if(z<v)h[l>>3]=v;w=c[d+136>>2]|0;h[d+648>>3]=+(w|0);c[d+656>>2]=w;w=a[544]|0;l=d+44|0;if((c[l>>2]|0)>0){Ka(2288)|0;Ka(2368)|0;Ka(2448)|0;Ka(2528)|0;o=a[544]|0}else o=w;n=d+192|0;m=d+184|0;y=o&255;a:do if((y>>>1^1)&w<<24>>24==o<<24>>24|w&2&y){q=d+80|0;t=d+112|0;p=d+108|0;o=d+680|0;r=d+664|0;s=d+672|0;u=0;while(1){v=+h[t>>3];if(!(a[q>>0]|0))v=+S(+v,+(+(u|0)));else{y=u+1|0;if((u|0)>0){x=0;w=1;do{x=x+1|0;w=w<<1|1}while((w|0)<(y|0));y=w+ -1|0}else{x=0;y=0}if((y|0)!=(u|0)){w=u;do{A=y>>1;x=x+ -1|0;w=(w|0)%(A|0)|0;y=A+ -1|0}while((y|0)!=(w|0))}v=+S(+v,+(+(x|0)))}_b(j,d,~~(v*+(c[p>>2]|0)));w=a[j>>0]|0;if(a[o>>0]|0)break a;y=r;x=c[y+4>>2]|0;if((x|0)>=0?(A=n,B=c[A+4>>2]|0,!(B>>>0<x>>>0|((B|0)==(x|0)?(c[A>>2]|0)>>>0<(c[y>>2]|0)>>>0:0))):0)break a;y=s;x=c[y+4>>2]|0;if((x|0)>=0?(B=m,A=c[B+4>>2]|0,!(A>>>0<x>>>0|((A|0)==(x|0)?(c[B>>2]|0)>>>0<(c[y>>2]|0)>>>0:0))):0)break a;A=a[544]|0;B=A&255;if(!((B>>>1^1)&w<<24>>24==A<<24>>24|w&2&B))break;else u=u+1|0}}while(0);if((c[l>>2]|0)>0)Ka(2528)|0;A=a[528]|0;B=A&255;j=w&2;if(!((B>>>1^1)&w<<24>>24==A<<24>>24|j&B)){A=a[536]|0;B=A&255;if(((B>>>1^1)&w<<24>>24==A<<24>>24|j&B|0)!=0?(c[g>>2]|0)==0:0)a[k>>0]=0}else{g=d+540|0;jc(e,c[g>>2]|0);if((c[g>>2]|0)>0){j=d+332|0;k=0;do{a[(c[e>>2]|0)+k>>0]=a[(c[j>>2]|0)+k>>0]|0;k=k+1|0}while((k|0)<(c[g>>2]|0))}}Rb(d,0);a[b>>0]=w;i=f;return}function ac(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;h=b+412|0;vc(h);k=b+540|0;if((c[k>>2]|0)>0){j=b+544|0;g=0;do{l=g<<1;n=c[h>>2]|0;m=n+(l*12|0)+4|0;if((c[m>>2]|0)>0){p=n+(l*12|0)|0;o=0;do{s=(c[p>>2]|0)+(o<<3)|0;n=c[s>>2]|0;q=c[j>>2]|0;r=q+(n<<2)|0;if(!(c[r>>2]&16)){t=wc(e,r)|0;c[s>>2]=t;c[r>>2]=c[r>>2]|16;c[q+(n+1<<2)>>2]=t}else c[s>>2]=c[q+(n+1<<2)>>2];o=o+1|0}while((o|0)<(c[m>>2]|0));m=c[h>>2]|0}else m=n;n=l|1;l=m+(n*12|0)+4|0;if((c[l>>2]|0)>0){r=m+(n*12|0)|0;q=0;do{m=(c[r>>2]|0)+(q<<3)|0;p=c[m>>2]|0;o=c[j>>2]|0;n=o+(p<<2)|0;if(!(c[n>>2]&16)){t=wc(e,n)|0;c[m>>2]=t;c[n>>2]=c[n>>2]|16;c[o+(p+1<<2)>>2]=t}else c[m>>2]=c[o+(p+1<<2)>>2];q=q+1|0}while((q|0)<(c[l>>2]|0))}g=g+1|0}while((g|0)<(c[k>>2]|0))}g=b+284|0;if((c[g>>2]|0)>0){l=b+280|0;k=b+396|0;j=b+544|0;h=b+332|0;m=0;do{r=c[k>>2]|0;p=r+(c[(c[l>>2]|0)+(m<<2)>>2]>>1<<3)|0;q=c[p>>2]|0;do if((q|0)!=-1){t=c[j>>2]|0;s=t+(q<<2)|0;o=(c[s>>2]&16|0)==0;if(o){u=c[t+(q+1<<2)>>2]|0;n=u>>1;u=(d[(c[h>>2]|0)+n>>0]|0)^u&1;w=a[528]|0;v=w&255;if(!((u&255)<<24>>24==w<<24>>24&(v>>>1^1)|v&2&u))break;w=c[r+(n<<3)>>2]|0;if(!((w|0)!=-1&(w|0)==(q|0)))break;if(o){w=wc(e,s)|0;c[p>>2]=w;c[s>>2]=c[s>>2]|16;c[t+(q+1<<2)>>2]=w;break}}c[p>>2]=c[t+(q+1<<2)>>2]}while(0);m=m+1|0}while((m|0)<(c[g>>2]|0))}g=b+272|0;n=c[g>>2]|0;if((n|0)>0){j=b+268|0;h=b+544|0;m=c[j>>2]|0;k=0;l=0;do{p=m+(k<<2)|0;o=c[p>>2]|0;r=c[h>>2]|0;q=r+(o<<2)|0;s=c[q>>2]|0;if((s&3|0)!=1){if(!(s&16)){n=wc(e,q)|0;c[p>>2]=n;c[q>>2]=c[q>>2]|16;c[r+(o+1<<2)>>2]=n;n=c[j>>2]|0;m=n;n=c[n+(k<<2)>>2]|0}else{n=c[r+(o+1<<2)>>2]|0;c[p>>2]=n}c[m+(l<<2)>>2]=n;n=c[g>>2]|0;l=l+1|0}k=k+1|0}while((k|0)<(n|0))}else{k=0;l=0}h=k-l|0;if((h|0)>0)c[g>>2]=n-h;g=b+260|0;m=c[g>>2]|0;if((m|0)>0){h=b+256|0;b=b+544|0;l=c[h>>2]|0;j=0;k=0;do{n=l+(j<<2)|0;p=c[n>>2]|0;o=c[b>>2]|0;r=o+(p<<2)|0;q=c[r>>2]|0;if((q&3|0)!=1){if(!(q&16)){m=wc(e,r)|0;c[n>>2]=m;c[r>>2]=c[r>>2]|16;c[o+(p+1<<2)>>2]=m;m=c[h>>2]|0;l=m;m=c[m+(j<<2)>>2]|0}else{m=c[o+(p+1<<2)>>2]|0;c[n>>2]=m}c[l+(k<<2)>>2]=m;m=c[g>>2]|0;k=k+1|0}j=j+1|0}while((j|0)<(m|0))}else{j=0;k=0}e=j-k|0;if((e|0)<=0){i=f;return}c[g>>2]=m-e;i=f;return}function bc(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;g=i;i=i+32|0;j=g;d=g+8|0;e=b+548|0;f=b+556|0;h=(c[e>>2]|0)-(c[f>>2]|0)|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;gc(d,h);h=d+16|0;a[h>>0]=0;ac(b,d);if((c[b+44>>2]|0)>1){k=c[d+4>>2]<<2;c[j>>2]=c[e>>2]<<2;c[j+4>>2]=k;La(1888,j|0)|0}a[b+560>>0]=a[h>>0]|0;h=b+544|0;j=c[h>>2]|0;if(j)Td(j);c[h>>2]=c[d>>2];c[e>>2]=c[d+4>>2];c[b+552>>2]=c[d+8>>2];c[f>>2]=c[d+12>>2];i=g;return}function cc(){var d=0,e=0,f=0;d=i;i=i+16|0;e=d;a[528]=0;a[536]=1;a[544]=2;xb(552,608,624,2136,2144);c[138]=2168;h[72]=0.0;h[73]=1.0;a[592]=0;a[593]=0;b[297]=b[e+0>>1]|0;b[298]=b[e+2>>1]|0;b[299]=b[e+4>>1]|0;h[75]=.95;xb(664,720,736,2136,2144);c[166]=2168;h[86]=0.0;h[87]=1.0;a[704]=0;a[705]=0;b[353]=b[e+0>>1]|0;b[354]=b[e+2>>1]|0;b[355]=b[e+4>>1]|0;h[89]=.999;xb(776,832,848,2136,2144);c[194]=2168;h[100]=0.0;h[101]=1.0;a[816]=1;a[817]=1;b[409]=b[e+0>>1]|0;b[410]=b[e+2>>1]|0;b[411]=b[e+4>>1]|0;h[103]=0.0;xb(936,992,1008,2136,2144);c[234]=2168;h[120]=0.0;h[121]=v;a[976]=0;a[977]=0;b[489]=b[e+0>>1]|0;b[490]=b[e+2>>1]|0;b[491]=b[e+4>>1]|0;h[123]=91648253.0;xb(1048,1080,1096,2136,2016);c[262]=280;f=1068|0;c[f>>2]=0;c[f+4>>2]=2;c[269]=2;xb(1160,1192,1208,2136,2016);c[290]=280;f=1180|0;c[f>>2]=0;c[f+4>>2]=2;c[297]=2;xb(1272,1296,1312,2136,1992);c[318]=160;a[1292]=0;xb(1344,1368,1376,2136,1992);c[336]=160;a[1364]=1;xb(1408,1440,1448,2136,2016);c[352]=280;f=1428|0;c[f>>2]=1;c[f+4>>2]=2147483647;c[359]=100;xb(1480,1536,1544,2136,2144);c[370]=2168;h[188]=1.0;h[189]=v;a[1520]=0;a[1521]=0;b[761]=b[e+0>>1]|0;b[762]=b[e+2>>1]|0;b[763]=b[e+4>>1]|0;h[191]=2.0;xb(1584,1640,1648,2136,2144);c[396]=2168;h[201]=0.0;h[202]=v;a[1624]=0;a[1625]=0;b[813]=b[e+0>>1]|0;b[814]=b[e+2>>1]|0;b[815]=b[e+4>>1]|0;h[204]=.2;xb(1728,1760,1776,2136,2016);c[432]=280;e=1748|0;c[e>>2]=0;c[e+4>>2]=2147483647;c[439]=0;i=d;return}function dc(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function ec(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,q=0.0,r=0.0;e=i;i=i+16|0;j=e;g=e+8|0;if((a[d>>0]|0)!=45){o=0;i=e;return o|0}m=d+1|0;f=b+4|0;k=c[f>>2]|0;l=a[k>>0]|0;a:do if(l<<24>>24){n=0;while(1){o=n;n=n+1|0;if((a[m>>0]|0)!=l<<24>>24){b=0;break}l=a[k+n>>0]|0;m=d+(o+2)|0;if(!(l<<24>>24))break a}i=e;return b|0}while(0);if((a[m>>0]|0)!=61){o=0;i=e;return o|0}k=m+1|0;q=+ce(k,g);if(!(c[g>>2]|0)){o=0;i=e;return o|0}r=+h[b+32>>3];if(q>=r?(a[b+41>>0]|0)==0|q!=r:0){o=c[p>>2]|0;n=c[f>>2]|0;c[j>>2]=k;c[j+4>>2]=n;Za(o|0,2024,j|0)|0;ab(1)}r=+h[b+24>>3];if(q<=r?(a[b+40>>0]|0)==0|q!=r:0){o=c[p>>2]|0;n=c[f>>2]|0;c[j>>2]=k;c[j+4>>2]=n;Za(o|0,2080,j|0)|0;ab(1)}h[b+48>>3]=q;o=1;i=e;return o|0}function fc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,l=0.0,m=0,n=0.0,o=0.0,q=0;e=i;i=i+48|0;f=e;g=c[p>>2]|0;q=c[b+16>>2]|0;m=(a[b+40>>0]|0)!=0?91:40;o=+h[b+24>>3];n=+h[b+32>>3];j=(a[b+41>>0]|0)!=0?93:41;l=+h[b+48>>3];c[f>>2]=c[b+4>>2];c[f+4>>2]=q;c[f+8>>2]=m;m=f+12|0;h[k>>3]=o;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];m=f+20|0;h[k>>3]=n;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];c[f+28>>2]=j;j=f+32|0;h[k>>3]=l;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Za(g|0,2232,f|0)|0;if(!d){i=e;return}c[f>>2]=c[b+8>>2];Za(g|0,2e3,f|0)|0;Sa(10,g|0)|0;i=e;return}function gc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+8|0;f=c[e>>2]|0;if(f>>>0<b>>>0)h=f;else{i=d;return}while(1){if(h>>>0>=b>>>0)break;h=((h>>>3)+2+(h>>>1)&-2)+h|0;c[e>>2]=h;if(h>>>0<=f>>>0){g=4;break}}if((g|0)==4)Ta(va(1)|0,48,0);e=Ud(c[a>>2]|0,h<<2)|0;if((e|0)==0?(c[(Oa()|0)>>2]|0)==12:0)Ta(va(1)|0,48,0);c[a>>2]=e;i=d;return}function hc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;e=a+32|0;d=c[e>>2]|0;if(d){c[a+36>>2]=0;Td(d);c[e>>2]=0;c[a+40>>2]=0}e=a+16|0;d=c[e>>2]|0;if(d){c[a+20>>2]=0;Td(d);c[e>>2]=0;c[a+24>>2]=0}e=c[a>>2]|0;if(!e){i=b;return}d=a+4|0;g=c[d>>2]|0;if((g|0)>0){f=0;do{j=e+(f*12|0)|0;h=c[j>>2]|0;if(h){c[e+(f*12|0)+4>>2]=0;Td(h);c[j>>2]=0;c[e+(f*12|0)+8>>2]=0;e=c[a>>2]|0;g=c[d>>2]|0}f=f+1|0}while((f|0)<(g|0))}c[d>>2]=0;Td(e);c[a>>2]=0;c[a+8>>2]=0;i=b;return}function ic(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;i=i+16|0;e=f+4|0;d=f;l=c[b>>2]|0;h=l+1|0;g=a+4|0;if((c[g>>2]|0)<(h|0)){k=a+8|0;j=c[k>>2]|0;if((j|0)<(h|0)){m=l+2-j&-2;l=(j>>1)+2&-2;l=(m|0)>(l|0)?m:l;if((l|0)>(2147483647-j|0)){m=va(1)|0;Ta(m|0,48,0)}n=c[a>>2]|0;m=l+j|0;c[k>>2]=m;m=Ud(n,m*12|0)|0;c[a>>2]=m;if((m|0)==0?(c[(Oa()|0)>>2]|0)==12:0){n=va(1)|0;Ta(n|0,48,0)}}k=c[g>>2]|0;if((k|0)<(h|0)){j=c[a>>2]|0;do{l=j+(k*12|0)|0;if(l){c[l>>2]=0;c[j+(k*12|0)+4>>2]=0;c[j+(k*12|0)+8>>2]=0}k=k+1|0}while((k|0)!=(h|0))}c[g>>2]=h;l=c[b>>2]|0}g=c[a>>2]|0;if(!(c[g+(l*12|0)>>2]|0)){m=l;n=a+16|0;c[d>>2]=m;c[e+0>>2]=c[d+0>>2];sc(n,e,0);i=f;return}c[g+(l*12|0)+4>>2]=0;m=c[b>>2]|0;n=a+16|0;c[d>>2]=m;c[e+0>>2]=c[d+0>>2];sc(n,e,0);i=f;return}function jc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;f=i;e=b+4|0;if((c[e>>2]|0)>=(d|0)){i=f;return}h=b+8|0;g=c[h>>2]|0;if((g|0)<(d|0)){k=d+1-g&-2;j=(g>>1)+2&-2;j=(k|0)>(j|0)?k:j;if((j|0)>(2147483647-g|0)){k=va(1)|0;Ta(k|0,48,0)}l=c[b>>2]|0;k=j+g|0;c[h>>2]=k;k=Ud(l,k)|0;c[b>>2]=k;if((k|0)==0?(c[(Oa()|0)>>2]|0)==12:0){l=va(1)|0;Ta(l|0,48,0)}}g=c[e>>2]|0;if((g|0)<(d|0)){b=c[b>>2]|0;do{h=b+g|0;if(h)a[h>>0]=0;g=g+1|0}while((g|0)!=(d|0))}c[e>>2]=d;i=f;return}function kc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;h=i;g=d+1|0;f=b+4|0;if((c[f>>2]|0)>=(g|0)){l=c[b>>2]|0;l=l+d|0;a[l>>0]=e;i=h;return}k=b+8|0;j=c[k>>2]|0;if((j|0)<(g|0)){m=d+2-j&-2;l=(j>>1)+2&-2;l=(m|0)>(l|0)?m:l;if((l|0)>(2147483647-j|0)){m=va(1)|0;Ta(m|0,48,0)}n=c[b>>2]|0;m=l+j|0;c[k>>2]=m;m=Ud(n,m)|0;c[b>>2]=m;if((m|0)==0?(c[(Oa()|0)>>2]|0)==12:0){n=va(1)|0;Ta(n|0,48,0)}}j=c[f>>2]|0;if((j|0)<(g|0))do{k=(c[b>>2]|0)+j|0;if(k)a[k>>0]=0;j=j+1|0}while((j|0)!=(g|0));c[f>>2]=g;n=c[b>>2]|0;n=n+d|0;a[n>>0]=e;i=h;return}function lc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+16|0;g=d;c[g>>2]=b;j=a+12|0;f=b+1|0;e=a+16|0;if((c[e>>2]|0)<(f|0)){l=a+20|0;k=c[l>>2]|0;if((k|0)<(f|0)){n=b+2-k&-2;m=(k>>1)+2&-2;m=(n|0)>(m|0)?n:m;if((m|0)>(2147483647-k|0)){n=va(1)|0;Ta(n|0,48,0)}o=c[j>>2]|0;n=m+k|0;c[l>>2]=n;n=Ud(o,n<<2)|0;c[j>>2]=n;if((n|0)==0?(c[(Oa()|0)>>2]|0)==12:0){o=va(1)|0;Ta(o|0,48,0)}}k=c[e>>2]|0;if((f|0)>(k|0))ke((c[j>>2]|0)+(k<<2)|0,-1,f-k<<2|0)|0;c[e>>2]=f}c[(c[j>>2]|0)+(b<<2)>>2]=c[a+4>>2];nc(a,g);e=c[j>>2]|0;g=c[e+(b<<2)>>2]|0;b=c[a>>2]|0;f=c[b+(g<<2)>>2]|0;if(!g){n=0;o=b+(n<<2)|0;c[o>>2]=f;o=e+(f<<2)|0;c[o>>2]=n;i=d;return}a=a+28|0;while(1){j=g;g=g+ -1>>1;k=b+(g<<2)|0;l=c[k>>2]|0;o=c[c[a>>2]>>2]|0;if(!(+h[o+(f<<3)>>3]>+h[o+(l<<3)>>3])){a=14;break}c[b+(j<<2)>>2]=l;c[e+(c[k>>2]<<2)>>2]=j;if(!g){j=0;a=14;break}}if((a|0)==14){o=b+(j<<2)|0;c[o>>2]=f;o=e+(f<<2)|0;c[o>>2]=j;i=d;return}}function mc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+4|0;f=c[e>>2]|0;g=a+8|0;h=c[g>>2]|0;if((f|0)==(h|0)&(h|0)<(f+1|0)){h=(f>>1)+2&-2;h=(h|0)<2?2:h;if((h|0)>(2147483647-f|0)){h=va(1)|0;Ta(h|0,48,0)}j=c[a>>2]|0;f=h+f|0;c[g>>2]=f;f=Ud(j,f<<2)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0){j=va(1)|0;Ta(j|0,48,0)}}else f=c[a>>2]|0;j=c[e>>2]|0;c[e>>2]=j+1;e=f+(j<<2)|0;if(!e){i=d;return}c[e>>2]=c[b>>2];i=d;return}function nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+4|0;f=c[e>>2]|0;g=a+8|0;h=c[g>>2]|0;if((f|0)==(h|0)&(h|0)<(f+1|0)){h=(f>>1)+2&-2;h=(h|0)<2?2:h;if((h|0)>(2147483647-f|0)){h=va(1)|0;Ta(h|0,48,0)}j=c[a>>2]|0;f=h+f|0;c[g>>2]=f;f=Ud(j,f<<2)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0){j=va(1)|0;Ta(j|0,48,0)}}else f=c[a>>2]|0;j=c[e>>2]|0;c[e>>2]=j+1;e=f+(j<<2)|0;if(!e){i=d;return}c[e>>2]=c[b>>2];i=d;return}function oc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;i=i+16|0;f=e+2|0;h=e+1|0;g=e;if((d|0)<16){g=d+ -1|0;if((g|0)>0)h=0;else{i=e;return}do{f=h;h=h+1|0;if((h|0)<(d|0)){k=f;j=h;do{k=(c[b+(j<<2)>>2]|0)<(c[b+(k<<2)>>2]|0)?j:k;j=j+1|0}while((j|0)!=(d|0))}else k=f;n=b+(f<<2)|0;o=c[n>>2]|0;p=b+(k<<2)|0;c[n>>2]=c[p>>2];c[p>>2]=o}while((h|0)!=(g|0));i=e;return}j=c[b+(((d|0)/2|0)<<2)>>2]|0;m=-1;n=d;while(1){do{m=m+1|0;l=b+(m<<2)|0;k=c[l>>2]|0}while((k|0)<(j|0));do{n=n+ -1|0;o=b+(n<<2)|0;p=c[o>>2]|0}while((j|0)<(p|0));if((m|0)>=(n|0))break;c[l>>2]=p;c[o>>2]=k}a[f+0>>0]=a[h+0>>0]|0;oc(b,m,f);p=d-m|0;a[f+0>>0]=a[g+0>>0]|0;oc(l,p,f);i=e;return}function pc(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0;f=i;k=e&1;j=d[a+16>>0]|0|k;h=b+4|0;l=((j+(c[h>>2]|0)<<2)+4|0)>>>2;m=a+4|0;gc(a,l+(c[m>>2]|0)|0);e=c[m>>2]|0;l=l+e|0;c[m>>2]=l;if(l>>>0<e>>>0)Ta(va(1)|0,48,0);a=(c[a>>2]|0)+(e<<2)|0;if(!a){i=f;return e|0}j=j<<3|k<<2;c[a>>2]=c[a>>2]&-32|j;j=c[h>>2]<<5|j;c[a>>2]=j;if((c[h>>2]|0)>0){j=c[b>>2]|0;b=0;do{c[a+(b<<2)+4>>2]=c[j+(b<<2)>>2];b=b+1|0}while((b|0)<(c[h>>2]|0));j=c[a>>2]|0}if(!(j&8)){i=f;return e|0}h=j>>>5;if(j&4){g[a+(h<<2)+4>>2]=0.0;i=f;return e|0}if(!h){h=0;j=0}else{j=0;b=0;do{j=1<<((c[a+(b<<2)+4>>2]|0)>>>1&31)|j;b=b+1|0}while((b|0)<(h|0))}c[a+(h<<2)+4>>2]=j;i=f;return e|0}function qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+4|0;f=c[e>>2]|0;g=a+8|0;h=c[g>>2]|0;if((f|0)==(h|0)&(h|0)<(f+1|0)){h=(f>>1)+2&-2;h=(h|0)<2?2:h;if((h|0)>(2147483647-f|0)){h=va(1)|0;Ta(h|0,48,0)}j=c[a>>2]|0;f=h+f|0;c[g>>2]=f;f=Ud(j,f<<3)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0){j=va(1)|0;Ta(j|0,48,0)}}else f=c[a>>2]|0;j=c[e>>2]|0;c[e>>2]=j+1;e=f+(j<<3)|0;if(!e){i=d;return}g=b;h=c[g+4>>2]|0;j=e;c[j>>2]=c[g>>2];c[j+4>>2]=h;i=d;return}function rc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0;b=i;d=c[a>>2]|0;f=c[d>>2]|0;k=a+4|0;o=c[d+((c[k>>2]|0)+ -1<<2)>>2]|0;c[d>>2]=o;e=c[a+12>>2]|0;c[e+(o<<2)>>2]=0;c[e+(f<<2)>>2]=-1;o=(c[k>>2]|0)+ -1|0;c[k>>2]=o;if((o|0)<=1){i=b;return f|0}g=c[d>>2]|0;l=a+28|0;a=0;m=1;while(1){n=(a<<1)+2|0;if((n|0)<(o|0)){p=c[d+(n<<2)>>2]|0;s=c[d+(m<<2)>>2]|0;o=c[c[l>>2]>>2]|0;q=+h[o+(p<<3)>>3];r=+h[o+(s<<3)>>3];if(!(q>r)){p=s;q=r;j=6}}else{o=c[c[l>>2]>>2]|0;j=c[d+(m<<2)>>2]|0;p=j;q=+h[o+(j<<3)>>3];j=6}if((j|0)==6){j=0;n=m}if(!(q>+h[o+(g<<3)>>3]))break;c[d+(a<<2)>>2]=p;c[e+(p<<2)>>2]=a;m=n<<1|1;o=c[k>>2]|0;if((m|0)>=(o|0)){a=n;break}else a=n}c[d+(a<<2)>>2]=g;c[e+(g<<2)>>2]=a;i=b;return f|0}function sc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;k=c[d>>2]|0;d=k+1|0;g=b+4|0;if((c[g>>2]|0)>=(d|0)){i=f;return}j=b+8|0;h=c[j>>2]|0;if((h|0)<(d|0)){l=k+2-h&-2;k=(h>>1)+2&-2;k=(l|0)>(k|0)?l:k;if((k|0)>(2147483647-h|0)){l=va(1)|0;Ta(l|0,48,0)}m=c[b>>2]|0;l=k+h|0;c[j>>2]=l;l=Ud(m,l)|0;c[b>>2]=l;if((l|0)==0?(c[(Oa()|0)>>2]|0)==12:0){m=va(1)|0;Ta(m|0,48,0)}}h=c[g>>2]|0;if((h|0)<(d|0))do{a[(c[b>>2]|0)+h>>0]=e;h=h+1|0}while((h|0)!=(d|0));c[g>>2]=d;i=f;return}function tc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+16|0;h=e+8|0;f=e+4|0;j=e;if((b|0)<16){f=b+ -1|0;if((f|0)<=0){i=e;return}h=c[d>>2]|0;d=0;do{j=d;d=d+1|0;if((d|0)<(b|0)){k=c[h>>2]|0;m=j;l=d;do{n=k+(c[a+(l<<2)>>2]<<2)|0;u=c[n>>2]|0;q=u>>>5;if(u>>>0>95){o=k+(c[a+(m<<2)>>2]<<2)|0;p=(c[o>>2]|0)>>>5;if((p|0)==2)m=l;else m=+g[n+(q<<2)+4>>2]<+g[o+(p<<2)+4>>2]?l:m}l=l+1|0}while((l|0)!=(b|0))}else m=j;s=a+(j<<2)|0;t=c[s>>2]|0;u=a+(m<<2)|0;c[s>>2]=c[u>>2];c[u>>2]=t}while((d|0)!=(f|0));i=e;return}k=c[a+(((b|0)/2|0)<<2)>>2]|0;q=-1;o=b;while(1){t=q+1|0;p=a+(t<<2)|0;u=c[p>>2]|0;l=c[d>>2]|0;m=c[l>>2]|0;s=m+(u<<2)|0;r=c[s>>2]|0;q=m+(k<<2)|0;n=c[q>>2]|0;a:do if(r>>>0>95)while(1){v=n>>>5;if((v|0)!=2?!(+g[s+(r>>>5<<2)+4>>2]<+g[q+(v<<2)+4>>2]):0){q=t;break a}t=t+1|0;p=a+(t<<2)|0;u=c[p>>2]|0;s=m+(u<<2)|0;r=c[s>>2]|0;if(r>>>0<=95){q=t;break}}else q=t;while(0);o=o+ -1|0;s=a+(o<<2)|0;r=m+(k<<2)|0;b:do if(n>>>0>95)while(1){t=m+(c[s>>2]<<2)|0;v=(c[t>>2]|0)>>>5;if((v|0)!=2?!(+g[r+(n>>>5<<2)+4>>2]<+g[t+(v<<2)+4>>2]):0)break b;v=o+ -1|0;s=a+(v<<2)|0;o=v}while(0);if((q|0)>=(o|0))break;c[p>>2]=c[s>>2];c[s>>2]=u}c[f>>2]=l;c[h+0>>2]=c[f+0>>2];tc(a,q,h);v=b-q|0;c[j>>2]=l;c[h+0>>2]=c[j+0>>2];tc(p,v,h);i=e;return}function uc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0;e=i;f=a+4|0;j=c[f>>2]|0;g=c[a>>2]|0;if((j|0)>0){l=c[a+12>>2]|0;k=0;do{c[l+(c[g+(k<<2)>>2]<<2)>>2]=-1;k=k+1|0;j=c[f>>2]|0}while((k|0)<(j|0))}if(g){c[f>>2]=0;j=0}g=b+4|0;if((c[g>>2]|0)>0){k=a+12|0;j=0;do{s=(c[b>>2]|0)+(j<<2)|0;c[(c[k>>2]|0)+(c[s>>2]<<2)>>2]=j;nc(a,s);j=j+1|0}while((j|0)<(c[g>>2]|0));j=c[f>>2]|0}if((j|0)<=1){i=e;return}g=c[a>>2]|0;b=a+28|0;a=a+12|0;o=j;k=(j|0)/2|0;while(1){k=k+ -1|0;j=c[g+(k<<2)>>2]|0;m=k<<1|1;a:do if((m|0)<(o|0)){l=k;while(1){n=(l<<1)+2|0;if((n|0)<(o|0)){p=c[g+(n<<2)>>2]|0;s=c[g+(m<<2)>>2]|0;o=c[c[b>>2]>>2]|0;q=+h[o+(p<<3)>>3];r=+h[o+(s<<3)>>3];if(!(q>r)){p=s;q=r;d=16}}else{o=c[c[b>>2]>>2]|0;d=c[g+(m<<2)>>2]|0;p=d;q=+h[o+(d<<3)>>3];d=16}if((d|0)==16){d=0;n=m}if(!(q>+h[o+(j<<3)>>3]))break a;c[g+(l<<2)>>2]=p;c[(c[a>>2]|0)+(p<<2)>>2]=l;m=n<<1|1;o=c[f>>2]|0;if((m|0)>=(o|0)){l=n;break}else l=n}}else l=k;while(0);c[g+(l<<2)>>2]=j;c[(c[a>>2]|0)+(j<<2)>>2]=l;if((k|0)<=0)break;o=c[f>>2]|0}i=e;return}function vc(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;d=b+36|0;l=c[d>>2]|0;f=b+32|0;n=c[f>>2]|0;if((l|0)>0){h=b+16|0;g=b+44|0;j=0;do{k=n+(j<<2)|0;m=c[k>>2]|0;if(a[(c[h>>2]|0)+m>>0]|0){n=c[b>>2]|0;l=n+(m*12|0)+4|0;p=c[l>>2]|0;if((p|0)>0){m=n+(m*12|0)|0;n=0;o=0;do{q=c[m>>2]|0;r=q+(n<<3)|0;if((c[(c[c[g>>2]>>2]|0)+(c[r>>2]<<2)>>2]&3|0)!=1){s=r;r=c[s+4>>2]|0;p=q+(o<<3)|0;c[p>>2]=c[s>>2];c[p+4>>2]=r;p=c[l>>2]|0;o=o+1|0}n=n+1|0}while((n|0)<(p|0))}else{n=0;o=0}m=n-o|0;if((m|0)>0)c[l>>2]=p-m;a[(c[h>>2]|0)+(c[k>>2]|0)>>0]=0;l=c[d>>2]|0;n=c[f>>2]|0}j=j+1|0}while((j|0)<(l|0))}if(!n){i=e;return}c[d>>2]=0;i=e;return}function wc(a,b){a=a|0;b=b|0;var e=0,f=0,h=0,j=0,k=0;f=i;j=c[b>>2]|0;h=j>>>2&1|(d[a+16>>0]|0);j=((h+(j>>>5)<<2)+4|0)>>>2;k=a+4|0;gc(a,j+(c[k>>2]|0)|0);e=c[k>>2]|0;j=j+e|0;c[k>>2]=j;if(j>>>0<e>>>0)Ta(va(1)|0,48,0);a=(c[a>>2]|0)+(e<<2)|0;if(!a){i=f;return e|0}h=c[b>>2]&-9|h<<3;c[a>>2]=h;if((c[b>>2]|0)>>>0>31){h=0;do{c[a+(h<<2)+4>>2]=c[b+(h<<2)+4>>2];h=h+1|0}while((h|0)<((c[b>>2]|0)>>>5|0));h=c[a>>2]|0}if(!(h&8)){i=f;return e|0}j=h>>>5;b=b+(j<<2)+4|0;if(!(h&4)){c[a+(j<<2)+4>>2]=c[b>>2];i=f;return e|0}else{g[a+(j<<2)+4>>2]=+g[b>>2];i=f;return e|0}return 0}function xc(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0;d=i;i=i+16|0;g=d;Gb(b);c[b>>2]=3424;c[b+684>>2]=c[719];c[b+688>>2]=c[747];c[b+692>>2]=c[785];h[b+696>>3]=+h[411];a[b+704>>0]=a[2652]|0;a[b+705>>0]=a[2724]|0;a[b+706>>0]=a[2804]|0;a[b+707>>0]=1;c[b+708>>2]=0;c[b+712>>2]=0;c[b+716>>2]=0;c[b+720>>2]=1;a[b+724>>0]=1;e=b+732|0;k=b+544|0;c[b+760>>2]=0;c[b+764>>2]=0;c[b+768>>2]=0;c[b+776>>2]=0;c[b+780>>2]=0;c[b+784>>2]=0;c[b+792>>2]=0;c[b+796>>2]=0;c[b+800>>2]=0;j=b+804|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[j>>2]=k;j=b+808|0;c[j>>2]=0;c[b+812>>2]=0;c[b+816>>2]=0;e=b+824|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[b+852>>2]=j;Qc(b+856|0,1);j=b+868|0;e=b+892|0;c[b+920>>2]=0;c[b+924>>2]=0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;e=g+4|0;c[e>>2]=0;j=g+8|0;c[j>>2]=2;f=Ud(0,8)|0;c[g>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0)Ta(va(1)|0,48,0);c[f>>2]=-2;c[e>>2]=1;a[b+560>>0]=1;c[b+928>>2]=pc(k,g,0)|0;a[b+536>>0]=0;if(!f){i=d;return}c[e>>2]=0;Td(f);c[g>>2]=0;c[j>>2]=0;i=d;return}function yc(a){a=a|0;var b=0;b=i;zc(a);pd(a);i=b;return}function zc(a){a=a|0;var b=0,d=0,e=0;b=i;c[a>>2]=3424;d=a+904|0;e=c[d>>2]|0;if(e){c[a+908>>2]=0;Td(e);c[d>>2]=0;c[a+912>>2]=0}d=a+892|0;e=c[d>>2]|0;if(e){c[a+896>>2]=0;Td(e);c[d>>2]=0;c[a+900>>2]=0}d=a+876|0;e=c[d>>2]|0;if(e){c[a+880>>2]=0;Td(e);c[d>>2]=0;c[a+884>>2]=0}d=a+856|0;e=c[d>>2]|0;if(e){c[a+860>>2]=0;Td(e);c[d>>2]=0;c[a+864>>2]=0}e=a+836|0;d=c[e>>2]|0;if(d){c[a+840>>2]=0;Td(d);c[e>>2]=0;c[a+844>>2]=0}d=a+824|0;e=c[d>>2]|0;if(e){c[a+828>>2]=0;Td(e);c[d>>2]=0;c[a+832>>2]=0}d=a+808|0;e=c[d>>2]|0;if(e){c[a+812>>2]=0;Td(e);c[d>>2]=0;c[a+816>>2]=0}Rc(a+760|0);d=a+744|0;e=c[d>>2]|0;if(e){c[a+748>>2]=0;Td(e);c[d>>2]=0;c[a+752>>2]=0}d=a+732|0;e=c[d>>2]|0;if(!e){Ib(a);i=b;return}c[a+736>>2]=0;Td(e);c[d>>2]=0;c[a+740>>2]=0;Ib(a);i=b;return}function Ac(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+32|0;h=f+12|0;k=f+8|0;l=f+16|0;g=f+4|0;j=f;a[l>>0]=a[d>>0]|0;a[h+0>>0]=a[l+0>>0]|0;e=Jb(b,h,e)|0;c[k>>2]=e;kc(b+876|0,e,0);kc(b+904|0,e,0);if(!(a[b+724>>0]|0)){i=f;return e|0}l=b+808|0;d=e<<1;c[g>>2]=d;c[h+0>>2]=c[g+0>>2];Sc(l,h,0);c[j>>2]=d|1;c[h+0>>2]=c[j+0>>2];Sc(l,h,0);Tc(b+760|0,k);kc(b+744|0,e,0);Uc(b+824|0,e);i=f;return e|0}function Bc(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;k=i;i=i+32|0;h=k+4|0;r=k;p=k+16|0;c[h>>2]=0;j=h+4|0;c[j>>2]=0;l=h+8|0;c[l>>2]=0;s=a[2608]|0;a[b>>0]=s;m=e+724|0;f=(d[m>>0]&(f&1)|0)!=0;if(f){u=e+308|0;x=c[u>>2]|0;if((x|0)>0){t=e+304|0;s=e+876|0;v=0;do{w=c[(c[t>>2]|0)+(v<<2)>>2]>>1;c[r>>2]=w;w=(c[s>>2]|0)+w|0;if(!(a[w>>0]|0)){a[w>>0]=1;nc(h,r);x=c[u>>2]|0}v=v+1|0}while((v|0)<(x|0))}r=(Cc(e,g)|0)&1^1;a[b>>0]=r;g=a[2608]|0}else{g=s;r=s}x=g&255;if(!((x>>>1^1)&r<<24>>24==g<<24>>24|x&2&(r&255))){if((c[e+44>>2]|0)>0)Ka(3760)|0}else{$b(p,e);r=a[p>>0]|0;a[b>>0]=r}w=a[2608]|0;x=w&255;if((((x>>>1^1)&r<<24>>24==w<<24>>24|x&2&(r&255)|0)!=0?(a[e+707>>0]|0)!=0:0)?(q=(c[e+736>>2]|0)+ -1|0,(q|0)>0):0){b=e+732|0;p=e+4|0;do{g=c[b>>2]|0;u=c[g+(q<<2)>>2]|0;v=q+ -1|0;w=c[g+(v<<2)>>2]|0;q=c[p>>2]|0;a:do if((u|0)>1){s=a[2616]|0;r=s&255;t=r&2;r=r>>>1^1;x=v;while(1){w=d[q+(w>>1)>>0]^w&1;v=u+ -1|0;if(!((w&255)<<24>>24==s<<24>>24&r|t&w))break a;u=x+ -1|0;w=c[g+(u<<2)>>2]|0;if((v|0)>1){x=u;u=v}else{x=u;u=v;o=20;break}}}else{x=v;o=20}while(0);if((o|0)==20){o=0;a[q+(w>>1)>>0]=(w&1^1)&255^1}q=x-u|0}while((q|0)>0)}if(f?(n=c[j>>2]|0,(n|0)>0):0){o=c[h>>2]|0;f=e+876|0;p=0;do{b=c[o+(p<<2)>>2]|0;a[(c[f>>2]|0)+b>>0]=0;if(a[m>>0]|0)Vc(e,b);p=p+1|0}while((p|0)<(n|0))}e=c[h>>2]|0;if(!e){i=k;return}c[j>>2]=0;Td(e);c[h>>2]=0;c[l>>2]=0;i=k;return}function Cc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;m=i;i=i+16|0;j=m;if(!(Zb(b)|0)){H=0;i=m;return H|0}l=b+724|0;if(!(a[l>>0]|0)){H=1;i=m;return H|0}x=b+924|0;v=b+872|0;w=b+868|0;u=b+860|0;r=b+680|0;y=b+824|0;g=b+828|0;o=b+836|0;z=b+904|0;A=b+332|0;e=b+44|0;B=b+704|0;D=b+706|0;E=b+696|0;p=b+556|0;q=b+548|0;C=b+876|0;s=b+920|0;t=b+284|0;a:while(1){if(((c[x>>2]|0)<=0?(c[s>>2]|0)>=(c[t>>2]|0):0)?(c[g>>2]|0)<=0:0)break;Ic(b);G=c[v>>2]|0;H=c[w>>2]|0;F=G-H|0;if((G|0)<(H|0))F=(c[u>>2]|0)+F|0;if(!((F|0)<=0?(c[s>>2]|0)>=(c[t>>2]|0):0))n=11;if((n|0)==11?(n=0,!(Jc(b,1)|0)):0){n=12;break}H=c[g>>2]|0;if(a[r>>0]|0){n=15;break}if(!H)continue;else F=0;while(1){J=c[y>>2]|0;G=c[J>>2]|0;I=c[J+(H+ -1<<2)>>2]|0;c[J>>2]=I;H=c[o>>2]|0;c[H+(I<<2)>>2]=0;c[H+(G<<2)>>2]=-1;H=(c[g>>2]|0)+ -1|0;c[g>>2]=H;if((H|0)>1)Wc(y,0);if(a[r>>0]|0)continue a;if((a[(c[z>>2]|0)+G>>0]|0)==0?(I=a[(c[A>>2]|0)+G>>0]|0,H=a[2624]|0,J=H&255,((J>>>1^1)&I<<24>>24==H<<24>>24|I&2&J|0)!=0):0){if((c[e>>2]|0)>1&((F|0)%100|0|0)==0){c[j>>2]=c[g>>2];La(3504,j|0)|0}if(a[B>>0]|0){J=(c[C>>2]|0)+G|0;H=a[J>>0]|0;a[J>>0]=1;if(!(Lc(b,G)|0)){n=29;break a}a[(c[C>>2]|0)+G>>0]=H<<24>>24!=0&1}if((((a[D>>0]|0)!=0?(I=a[(c[A>>2]|0)+G>>0]|0,H=a[2624]|0,J=H&255,((J>>>1^1)&I<<24>>24==H<<24>>24|I&2&J|0)!=0):0)?(a[(c[C>>2]|0)+G>>0]|0)==0:0)?!(Mc(b,G)|0):0){n=35;break a}if(+((c[p>>2]|0)>>>0)>+h[E>>3]*+((c[q>>2]|0)>>>0))gb[c[(c[b>>2]|0)+8>>2]&31](b)}H=c[g>>2]|0;if(!H)continue a;else F=F+1|0}}do if((n|0)==12)a[b+492>>0]=0;else if((n|0)==15){r=c[b+824>>2]|0;if((H|0)<=0){if(!r)break}else{t=c[o>>2]|0;s=0;do{c[t+(c[r+(s<<2)>>2]<<2)>>2]=-1;s=s+1|0}while((s|0)<(c[g>>2]|0))}c[g>>2]=0}else if((n|0)==29)a[b+492>>0]=0;else if((n|0)==35)a[b+492>>0]=0;while(0);if(!d){if(+((c[p>>2]|0)>>>0)>+h[b+96>>3]*+((c[q>>2]|0)>>>0))gb[c[(c[b>>2]|0)+8>>2]&31](b)}else{d=b+744|0;p=c[d>>2]|0;if(p){c[b+748>>2]=0;Td(p);c[d>>2]=0;c[b+752>>2]=0}Xc(b+760|0,1);d=b+808|0;p=c[d>>2]|0;if(p){c[b+812>>2]=0;Td(p);c[d>>2]=0;c[b+816>>2]=0}p=b+824|0;d=c[p>>2]|0;if((c[g>>2]|0)<=0){if(d)n=48}else{n=c[o>>2]|0;o=0;do{c[n+(c[d+(o<<2)>>2]<<2)>>2]=-1;o=o+1|0}while((o|0)<(c[g>>2]|0));n=48}if((n|0)==48){c[g>>2]=0;Td(d);c[p>>2]=0;c[b+832>>2]=0}Yc(b+856|0,1);a[l>>0]=0;a[b+536>>0]=1;a[b+560>>0]=0;c[b+728>>2]=c[b+540>>2];Yb(b);gb[c[(c[b>>2]|0)+8>>2]&31](b)}if((c[e>>2]|0)>0?(f=c[b+736>>2]|0,(f|0)>0):0){h[k>>3]=+(f<<2>>>0)*9.5367431640625e-7;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];La(3528,j|0)|0}J=(a[b+492>>0]|0)!=0;i=m;return J|0}function Dc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;g=e;j=b+256|0;k=b+260|0;h=c[k>>2]|0;if((a[b+705>>0]|0)!=0?Ec(b,d)|0:0){p=1;i=e;return p|0}if(!(Kb(b,d)|0)){p=0;i=e;return p|0}if(!(a[b+724>>0]|0)){p=1;i=e;return p|0}d=c[k>>2]|0;if((d|0)!=(h+1|0)){p=1;i=e;return p|0}p=c[(c[j>>2]|0)+(d+ -1<<2)>>2]|0;c[g>>2]=p;m=(c[b+544>>2]|0)+(p<<2)|0;Zc(b+856|0,p);if((c[m>>2]|0)>>>0<=31){p=1;i=e;return p|0}l=b+760|0;k=b+808|0;j=b+744|0;h=b+924|0;d=b+824|0;n=b+840|0;b=b+836|0;o=0;do{p=m+(o<<2)+4|0;_c((c[l>>2]|0)+((c[p>>2]>>1)*12|0)|0,g);q=(c[k>>2]|0)+(c[p>>2]<<2)|0;c[q>>2]=(c[q>>2]|0)+1;a[(c[j>>2]|0)+(c[p>>2]>>1)>>0]=1;c[h>>2]=(c[h>>2]|0)+1;p=c[p>>2]>>1;if((c[n>>2]|0)>(p|0)?(f=c[(c[b>>2]|0)+(p<<2)>>2]|0,(f|0)>-1):0)Wc(d,f);o=o+1|0}while((o|0)<((c[m>>2]|0)>>>5|0));f=1;i=e;return f|0}function Ec(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;k=i;i=i+16|0;h=k+8|0;j=k+4|0;g=k;c[j>>2]=c[b+284>>2];nc(b+292|0,j);j=e+4|0;m=c[j>>2]|0;a:do if((m|0)>0){f=b+332|0;l=0;while(1){n=c[(c[e>>2]|0)+(l<<2)>>2]|0;p=d[(c[f>>2]|0)+(n>>1)>>0]|0;q=p^n&1;o=q&255;s=a[2608]|0;r=s&255;if(o<<24>>24==s<<24>>24&(r>>>1^1)|r&2&q)break;r=a[2616]|0;s=r&255;if(!((s>>>1^1)&o<<24>>24==r<<24>>24|p&2&s)){c[g>>2]=n^1;c[h+0>>2]=c[g+0>>2];Lb(b,h,-1);m=c[j>>2]|0}l=l+1|0;if((l|0)>=(m|0))break a}Rb(b,0);s=1;i=k;return s|0}while(0);s=(Mb(b)|0)!=-1;Rb(b,0);i=k;return s|0}function Fc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+16|0;g=e;f=(c[b+544>>2]|0)+(d<<2)|0;if(!(a[b+724>>0]|0)){Pb(b,d);i=e;return}if((c[f>>2]|0)>>>0<=31){Pb(b,d);i=e;return}j=b+808|0;k=b+776|0;h=b+792|0;l=0;do{m=f+(l<<2)+4|0;n=(c[j>>2]|0)+(c[m>>2]<<2)|0;c[n>>2]=(c[n>>2]|0)+ -1;Vc(b,c[m>>2]>>1);m=c[m>>2]>>1;c[g>>2]=m;m=(c[k>>2]|0)+m|0;if(!(a[m>>0]|0)){a[m>>0]=1;nc(h,g)}l=l+1|0}while((l|0)<((c[f>>2]|0)>>>5|0));Pb(b,d);i=e;return}function Gc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;i=i+16|0;j=g+4|0;h=g;l=c[b+544>>2]|0;k=l+(e<<2)|0;Zc(b+856|0,e);if((c[k>>2]&-32|0)==64){Fc(b,e);p=c[f>>2]|0;f=c[k>>2]|0;a:do if(f>>>0>31){m=f>>>5;n=0;while(1){o=n+1|0;if((c[k+(n<<2)+4>>2]|0)==(p|0)){o=n;break a}if((o|0)<(m|0))n=o;else break}}else{m=0;o=0}while(0);n=m+ -1|0;if((o|0)<(n|0))do{f=o;o=o+1|0;c[k+(f<<2)+4>>2]=c[k+(o<<2)+4>>2];f=c[k>>2]|0;m=f>>>5;n=m+ -1|0}while((o|0)<(n|0));if(f&8){c[k+(n<<2)+4>>2]=c[k+(m<<2)+4>>2];f=c[k>>2]|0}m=f+ -32|0;c[k>>2]=m;m=m>>>5;if(!m){m=0;f=0}else{f=0;n=0;do{f=1<<((c[k+(n<<2)+4>>2]|0)>>>1&31)|f;n=n+1|0}while((n|0)<(m|0))}c[k+(m<<2)+4>>2]=f}else{Ob(b,e,1);f=c[f>>2]|0;n=c[k>>2]|0;b:do if(n>>>0>31){m=n>>>5;o=0;while(1){p=o+1|0;if((c[k+(o<<2)+4>>2]|0)==(f|0)){p=o;break b}if((p|0)<(m|0))o=p;else break}}else{m=0;p=0}while(0);o=m+ -1|0;if((p|0)<(o|0))do{n=p;p=p+1|0;c[k+(n<<2)+4>>2]=c[k+(p<<2)+4>>2];n=c[k>>2]|0;m=n>>>5;o=m+ -1|0}while((p|0)<(o|0));if(n&8){c[k+(o<<2)+4>>2]=c[k+(m<<2)+4>>2];n=c[k>>2]|0}o=n+ -32|0;c[k>>2]=o;o=o>>>5;if(!o){o=0;m=0}else{m=0;n=0;do{m=1<<((c[k+(n<<2)+4>>2]|0)>>>1&31)|m;n=n+1|0}while((n|0)<(o|0))}c[k+(o<<2)+4>>2]=m;Nb(b,e);m=f>>1;n=c[b+760>>2]|0;o=n+(m*12|0)|0;n=n+(m*12|0)+4|0;p=c[n>>2]|0;c:do if((p|0)>0){s=c[o>>2]|0;q=0;while(1){r=q+1|0;if((c[s+(q<<2)>>2]|0)==(e|0))break c;if((r|0)<(p|0))q=r;else{q=r;break}}}else q=0;while(0);p=p+ -1|0;if((q|0)<(p|0)){o=c[o>>2]|0;do{p=q;q=q+1|0;c[o+(p<<2)>>2]=c[o+(q<<2)>>2];p=(c[n>>2]|0)+ -1|0}while((q|0)<(p|0))}c[n>>2]=p;s=(c[b+808>>2]|0)+(f<<2)|0;c[s>>2]=(c[s>>2]|0)+ -1;Vc(b,m)}if((c[k>>2]&-32|0)!=32){s=1;i=g;return s|0}l=c[l+(e+1<<2)>>2]|0;k=d[(c[b+332>>2]|0)+(l>>1)>>0]|0;s=k^l&1;e=s&255;q=a[2624]|0;r=q&255;if(!(e<<24>>24==q<<24>>24&(r>>>1^1)|r&2&s)){r=a[2616]|0;s=r&255;if((s>>>1^1)&e<<24>>24==r<<24>>24|k&2&s){s=0;i=g;return s|0}}else{c[h>>2]=l;c[j+0>>2]=c[h+0>>2];Lb(b,j,-1)}s=(Mb(b)|0)==-1;i=g;return s|0}function Hc(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;i=i+16|0;j=g+4|0;h=g;o=a+708|0;c[o>>2]=(c[o>>2]|0)+1;if(c[f>>2]|0)c[f+4>>2]=0;k=(c[b>>2]|0)>>>5>>>0<(c[d>>2]|0)>>>5>>>0;a=k?d:b;b=k?b:d;k=c[b>>2]|0;a:do if(k>>>0>31){d=0;b:while(1){l=c[b+(d<<2)+4>>2]|0;c:do if((l>>1|0)!=(e|0)){m=c[a>>2]|0;d:do if(m>>>0>31){n=0;while(1){o=c[a+(n<<2)+4>>2]|0;n=n+1|0;if((l^o)>>>0<2)break;if((n|0)>=(m>>>5|0))break d}if((o|0)==(l^1|0)){f=0;break b}else break c}while(0);c[j>>2]=l;mc(f,j);k=c[b>>2]|0}while(0);d=d+1|0;if((d|0)>=(k>>>5|0))break a}i=g;return f|0}while(0);d=c[a>>2]|0;if(d>>>0<=31){o=1;i=g;return o|0}j=0;do{b=c[a+(j<<2)+4>>2]|0;if((b>>1|0)!=(e|0)){c[h>>2]=b;mc(f,h);d=c[a>>2]|0}j=j+1|0}while((j|0)<(d>>>5|0));f=1;i=g;return f|0}function Ic(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;d=i;k=b+924|0;if(!(c[k>>2]|0)){i=d;return}h=b+856|0;e=b+872|0;f=b+868|0;j=b+860|0;g=b+544|0;l=0;while(1){w=c[e>>2]|0;m=c[f>>2]|0;n=w-m|0;if((w|0)<(m|0))n=(c[j>>2]|0)+n|0;if((l|0)>=(n|0))break;n=(c[g>>2]|0)+(c[(c[h>>2]|0)+(((m+l|0)%(c[j>>2]|0)|0)<<2)>>2]<<2)|0;m=c[n>>2]|0;if(!(m&3))c[n>>2]=m&-4|2;l=l+1|0}l=b+540|0;q=c[l>>2]|0;if((q|0)>0){n=b+744|0;o=b+776|0;m=b+760|0;b=b+804|0;p=0;do{if(a[(c[n>>2]|0)+p>>0]|0){r=(c[o>>2]|0)+p|0;if(a[r>>0]|0){s=c[m>>2]|0;q=s+(p*12|0)+4|0;u=c[q>>2]|0;if((u|0)>0){s=c[s+(p*12|0)>>2]|0;v=0;t=0;do{w=c[s+(v<<2)>>2]|0;if((c[(c[c[b>>2]>>2]|0)+(w<<2)>>2]&3|0)!=1){c[s+(t<<2)>>2]=w;u=c[q>>2]|0;t=t+1|0}v=v+1|0}while((v|0)<(u|0))}else{v=0;t=0}s=v-t|0;if((s|0)>0)c[q>>2]=u-s;a[r>>0]=0}r=c[m>>2]|0;q=r+(p*12|0)+4|0;t=c[q>>2]|0;if((t|0)>0){r=r+(p*12|0)|0;s=0;do{u=c[(c[r>>2]|0)+(s<<2)>>2]|0;if(!(c[(c[g>>2]|0)+(u<<2)>>2]&3)){Zc(h,u);t=(c[g>>2]|0)+(c[(c[r>>2]|0)+(s<<2)>>2]<<2)|0;c[t>>2]=c[t>>2]&-4|2;t=c[q>>2]|0}s=s+1|0}while((s|0)<(t|0))}a[(c[n>>2]|0)+p>>0]=0;q=c[l>>2]|0}p=p+1|0}while((p|0)<(q|0));l=0}else l=0;while(1){w=c[e>>2]|0;m=c[f>>2]|0;n=w-m|0;if((w|0)<(m|0))n=(c[j>>2]|0)+n|0;if((l|0)>=(n|0))break;m=(c[g>>2]|0)+(c[(c[h>>2]|0)+(((m+l|0)%(c[j>>2]|0)|0)<<2)>>2]<<2)|0;n=c[m>>2]|0;if((n&3|0)==2)c[m>>2]=n&-4;l=l+1|0}c[k>>2]=0;i=d;return}function Jc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;e=i;i=i+16|0;m=e;x=e+12|0;g=b+856|0;l=b+872|0;q=b+868|0;j=b+860|0;u=b+680|0;f=b+920|0;h=b+284|0;t=b+280|0;r=b+544|0;s=b+928|0;o=b+44|0;n=b+776|0;v=b+692|0;p=b+804|0;k=b+760|0;C=0;F=0;D=0;a:while(1){E=c[q>>2]|0;do{A=c[l>>2]|0;B=(A|0)<(E|0);A=A-E|0;if(B)G=(c[j>>2]|0)+A|0;else G=A;if((G|0)<=0?(c[f>>2]|0)>=(c[h>>2]|0):0){f=1;j=53;break a}if(a[u>>0]|0){j=8;break a}if(B)A=(c[j>>2]|0)+A|0;if((A|0)==0?(z=c[f>>2]|0,(z|0)<(c[h>>2]|0)):0){c[f>>2]=z+1;c[(c[r>>2]|0)+((c[s>>2]|0)+1<<2)>>2]=c[(c[t>>2]|0)+(z<<2)>>2];A=(c[r>>2]|0)+(c[s>>2]<<2)|0;B=(c[A>>2]|0)>>>5;if(!B){B=0;G=0}else{G=0;E=0;do{G=1<<((c[A+(E<<2)+4>>2]|0)>>>1&31)|G;E=E+1|0}while((E|0)<(B|0))}c[A+(B<<2)+4>>2]=G;Zc(g,c[s>>2]|0);E=c[q>>2]|0}A=c[(c[g>>2]|0)+(E<<2)>>2]|0;E=E+1|0;J=c[j>>2]|0;E=(E|0)==(J|0)?0:E;c[q>>2]=E;G=c[r>>2]|0;B=G+(A<<2)|0;I=c[B>>2]|0}while((I&3|0)!=0);if(d?(c[o>>2]|0)>1:0){H=C+1|0;if(!((C|0)%1e3|0)){I=c[l>>2]|0;c[m>>2]=I-E+((I|0)<(E|0)?J:0);c[m+4>>2]=D;c[m+8>>2]=F;La(3440,m|0)|0;I=c[B>>2]|0;C=H}else C=H}E=G+(A+1<<2)|0;G=c[E>>2]>>1;if(I>>>0>63){H=c[k>>2]|0;I=I>>>5;J=1;do{P=c[B+(J<<2)+4>>2]>>1;G=(c[H+(P*12|0)+4>>2]|0)<(c[H+(G*12|0)+4>>2]|0)?P:G;J=J+1|0}while((J|0)<(I|0))}I=(c[n>>2]|0)+G|0;if(a[I>>0]|0){J=c[k>>2]|0;H=J+(G*12|0)+4|0;M=c[H>>2]|0;if((M|0)>0){J=c[J+(G*12|0)>>2]|0;L=0;K=0;do{N=c[J+(L<<2)>>2]|0;if((c[(c[c[p>>2]>>2]|0)+(N<<2)>>2]&3|0)!=1){c[J+(K<<2)>>2]=N;M=c[H>>2]|0;K=K+1|0}L=L+1|0}while((L|0)<(M|0))}else{L=0;K=0}J=L-K|0;if((J|0)>0)c[H>>2]=M-J;a[I>>0]=0}I=c[k>>2]|0;H=c[I+(G*12|0)>>2]|0;I=I+(G*12|0)+4|0;if((c[I>>2]|0)>0)J=0;else continue;while(1){N=c[B>>2]|0;if(N&3)continue a;K=c[H+(J<<2)>>2]|0;L=c[r>>2]|0;O=L+(K<<2)|0;M=c[O>>2]|0;b:do if(((!((M&3|0)!=0|(K|0)==(A|0))?(P=c[v>>2]|0,y=M>>>5,(P|0)==-1|(y|0)<(P|0)):0)?(w=N>>>5,y>>>0>=w>>>0):0)?(c[B+(w<<2)+4>>2]&~c[O+(y<<2)+4>>2]|0)==0:0){L=L+(K+1<<2)|0;do if(N>>>0>31){if(M>>>0>31){O=-2;M=0}else break b;while(1){N=c[E+(M<<2)>>2]|0;c:do if((O|0)==-2){P=0;while(1){O=c[L+(P<<2)>>2]|0;if((N|0)==(O|0)){N=-2;break c}P=P+1|0;if((N|0)==(O^1|0))break c;if(P>>>0>=y>>>0)break b}}else{P=0;while(1){if((N|0)==(c[L+(P<<2)>>2]|0)){N=O;break c}P=P+1|0;if(P>>>0>=y>>>0)break b}}while(0);M=M+1|0;if(M>>>0>=w>>>0)break;else O=N}if((N|0)==-2)break;else if((N|0)==-1)break b;c[x>>2]=N^1;c[m+0>>2]=c[x+0>>2];if(!(Gc(b,K,m)|0)){f=0;j=53;break a}F=F+1|0;J=(((N>>1|0)==(G|0))<<31>>31)+J|0;break b}while(0);Fc(b,K);D=D+1|0}while(0);J=J+1|0;if((J|0)>=(c[I>>2]|0))continue a}}if((j|0)==8){Yc(g,0);c[f>>2]=c[h>>2];P=1;i=e;return P|0}else if((j|0)==53){i=e;return f|0}return 0}function Kc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;h=i;i=i+16|0;g=h+12|0;m=h+8|0;k=h+4|0;j=h;l=(c[b+544>>2]|0)+(f<<2)|0;if(c[l>>2]&3){r=1;i=h;return r|0}if(Qb(b,l)|0){r=1;i=h;return r|0}c[m>>2]=c[b+284>>2];nc(b+292|0,m);p=c[l>>2]|0;if(p>>>0>31){m=b+332|0;n=0;o=-2;do{q=c[l+(n<<2)+4>>2]|0;r=q>>1;if((r|0)!=(e|0)?(r=(d[(c[m>>2]|0)+r>>0]|0)^q&1,t=a[2616]|0,s=t&255,((r&255)<<24>>24==t<<24>>24&(s>>>1^1)|s&2&r|0)==0):0){c[k>>2]=q^1;c[g+0>>2]=c[k+0>>2];Lb(b,g,-1);p=c[l>>2]|0}else o=q;n=n+1|0}while((n|0)<(p>>>5|0))}else o=-2;t=(Mb(b)|0)==-1;Rb(b,0);if(!t){t=b+712|0;c[t>>2]=(c[t>>2]|0)+1;c[j>>2]=o;c[g+0>>2]=c[j+0>>2];if(!(Gc(b,f,g)|0)){t=0;i=h;return t|0}}t=1;i=h;return t|0}function Lc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;h=(c[b+776>>2]|0)+d|0;f=b+760|0;if(a[h>>0]|0){k=c[f>>2]|0;g=k+(d*12|0)+4|0;n=c[g>>2]|0;if((n|0)>0){j=b+804|0;k=c[k+(d*12|0)>>2]|0;m=0;l=0;do{o=c[k+(m<<2)>>2]|0;if((c[(c[c[j>>2]>>2]|0)+(o<<2)>>2]&3|0)!=1){c[k+(l<<2)>>2]=o;n=c[g>>2]|0;l=l+1|0}m=m+1|0}while((m|0)<(n|0))}else{m=0;l=0}j=m-l|0;if((j|0)>0)c[g>>2]=n-j;a[h>>0]=0}g=c[f>>2]|0;n=a[(c[b+332>>2]|0)+d>>0]|0;m=a[2624]|0;o=m&255;if(!((o>>>1^1)&n<<24>>24==m<<24>>24|n&2&o)){o=1;i=e;return o|0}f=g+(d*12|0)+4|0;h=c[f>>2]|0;if(!h){o=1;i=e;return o|0}a:do if((h|0)>0){g=g+(d*12|0)|0;h=0;while(1){if(!(Kc(b,d,c[(c[g>>2]|0)+(h<<2)>>2]|0)|0)){b=0;break}h=h+1|0;if((h|0)>=(c[f>>2]|0))break a}i=e;return b|0}while(0);o=Jc(b,0)|0;i=e;return o|0}function Mc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;e=i;i=i+48|0;s=e+36|0;r=e+32|0;t=e+28|0;u=e+24|0;f=e+12|0;g=e;n=(c[b+776>>2]|0)+d|0;m=b+760|0;if(a[n>>0]|0){q=c[m>>2]|0;o=q+(d*12|0)+4|0;y=c[o>>2]|0;if((y|0)>0){p=b+804|0;q=c[q+(d*12|0)>>2]|0;w=0;v=0;do{z=c[q+(w<<2)>>2]|0;if((c[(c[c[p>>2]>>2]|0)+(z<<2)>>2]&3|0)!=1){c[q+(v<<2)>>2]=z;y=c[o>>2]|0;v=v+1|0}w=w+1|0}while((w|0)<(y|0))}else{w=0;v=0}p=w-v|0;if((p|0)>0)c[o>>2]=y-p;a[n>>0]=0}v=c[m>>2]|0;w=v+(d*12|0)|0;c[f>>2]=0;n=f+4|0;c[n>>2]=0;o=f+8|0;c[o>>2]=0;c[g>>2]=0;q=g+4|0;c[q>>2]=0;p=g+8|0;c[p>>2]=0;v=v+(d*12|0)+4|0;a:do if((c[v>>2]|0)>0){y=b+544|0;B=d<<1;A=0;do{C=(c[w>>2]|0)+(A<<2)|0;E=(c[y>>2]|0)+(c[C>>2]<<2)|0;Z=c[E>>2]|0;z=Z>>>5;b:do if(Z>>>0>31){G=0;while(1){D=G+1|0;if((c[E+(G<<2)+4>>2]|0)==(B|0)){D=G;break b}if((D|0)<(z|0))G=D;else break}}else D=0;while(0);_c((D|0)<(z|0)?f:g,C);A=A+1|0;z=c[v>>2]|0}while((A|0)<(z|0));y=c[n>>2]|0;B=(y|0)>0;if(B){C=c[q>>2]|0;K=(C|0)>0;J=b+544|0;D=c[f>>2]|0;A=c[g>>2]|0;E=b+708|0;I=b+684|0;H=b+688|0;P=0;G=0;while(1){if(K){M=D+(G<<2)|0;L=c[J>>2]|0;N=c[E>>2]|0;O=0;do{S=L+(c[M>>2]<<2)|0;U=L+(c[A+(O<<2)>>2]<<2)|0;N=N+1|0;c[E>>2]=N;Q=(c[S>>2]|0)>>>5>>>0<(c[U>>2]|0)>>>5>>>0;R=Q?U:S;U=Q?S:U;S=R+4|0;Q=U+4|0;R=c[R>>2]|0;T=R>>>5;W=T+ -1|0;U=c[U>>2]|0;c:do if(U>>>0>31){V=0;while(1){Z=c[Q+(V<<2)>>2]|0;d:do if((Z>>1|0)!=(d|0)){e:do if(R>>>0>31){Y=0;while(1){X=c[S+(Y<<2)>>2]|0;Y=Y+1|0;if((X^Z)>>>0<2)break;if((Y|0)>=(T|0))break e}if((X|0)==(Z^1|0))break c;else break d}while(0);W=W+1|0}while(0);V=V+1|0;if((V|0)>=(U>>>5|0)){x=28;break}}}else x=28;while(0);if((x|0)==28){x=0;if((P|0)>=((c[I>>2]|0)+z|0)){b=1;break a}Z=c[H>>2]|0;if((Z|0)!=-1&(W|0)>(Z|0)){b=1;break a}else P=P+1|0}O=O+1|0}while((O|0)<(C|0))}G=G+1|0;if((G|0)>=(y|0)){x=32;break}}}else{B=0;x=32}}else{y=0;B=0;x=32}while(0);f:do if((x|0)==32){a[(c[b+904>>2]|0)+d>>0]=1;z=b+380|0;A=(c[z>>2]|0)+d|0;if(a[A>>0]|0){Z=b+200|0;Y=Z;Y=ne(c[Y>>2]|0,c[Y+4>>2]|0,-1,-1)|0;c[Z>>2]=Y;c[Z+4>>2]=F}a[A>>0]=0;A=b+460|0;if(!((c[b+476>>2]|0)>(d|0)?(c[(c[b+472>>2]|0)+(d<<2)>>2]|0)>-1:0))x=36;if((x|0)==36?(a[(c[z>>2]|0)+d>>0]|0)!=0:0)lc(A,d);x=b+716|0;c[x>>2]=(c[x>>2]|0)+1;x=c[q>>2]|0;if((y|0)>(x|0)){A=b+732|0;if((x|0)>0){u=b+544|0;t=c[g>>2]|0;E=b+736|0;D=0;do{C=(c[u>>2]|0)+(c[t+(D<<2)>>2]<<2)|0;z=c[E>>2]|0;if((c[C>>2]|0)>>>0>31){G=0;H=-1;do{Z=C+(G<<2)+4|0;c[s>>2]=c[Z>>2];_c(A,s);H=(c[Z>>2]>>1|0)==(d|0)?G+z|0:H;G=G+1|0}while((G|0)<((c[C>>2]|0)>>>5|0))}else H=-1;Z=c[A>>2]|0;X=Z+(H<<2)|0;Y=c[X>>2]|0;Z=Z+(z<<2)|0;c[X>>2]=c[Z>>2];c[Z>>2]=Y;c[r>>2]=(c[C>>2]|0)>>>5;_c(A,r);D=D+1|0}while((D|0)<(x|0))}c[s>>2]=d<<1;_c(A,s);c[r>>2]=1;_c(A,r)}else{D=b+732|0;if(B){G=b+544|0;E=c[f>>2]|0;z=b+736|0;H=0;do{C=(c[G>>2]|0)+(c[E+(H<<2)>>2]<<2)|0;A=c[z>>2]|0;if((c[C>>2]|0)>>>0>31){I=0;J=-1;do{Z=C+(I<<2)+4|0;c[s>>2]=c[Z>>2];_c(D,s);J=(c[Z>>2]>>1|0)==(d|0)?I+A|0:J;I=I+1|0}while((I|0)<((c[C>>2]|0)>>>5|0))}else J=-1;Z=c[D>>2]|0;X=Z+(J<<2)|0;Y=c[X>>2]|0;Z=Z+(A<<2)|0;c[X>>2]=c[Z>>2];c[Z>>2]=Y;c[r>>2]=(c[C>>2]|0)>>>5;_c(D,r);H=H+1|0}while((H|0)<(y|0))}c[t>>2]=d<<1|1;_c(D,t);c[u>>2]=1;_c(D,u)}if((c[v>>2]|0)>0){r=0;do{Fc(b,c[(c[w>>2]|0)+(r<<2)>>2]|0);r=r+1|0}while((r|0)<(c[v>>2]|0))}r=b+628|0;g:do if(B){s=b+544|0;w=c[f>>2]|0;A=c[g>>2]|0;if((x|0)>0)v=0;else{r=0;while(1){r=r+1|0;if((r|0)>=(y|0))break g}}do{u=w+(v<<2)|0;t=0;do{Z=c[s>>2]|0;if(Hc(b,Z+(c[u>>2]<<2)|0,Z+(c[A+(t<<2)>>2]<<2)|0,d,r)|0?!(Dc(b,r)|0):0){b=0;break f}t=t+1|0}while((t|0)<(x|0));v=v+1|0}while((v|0)<(y|0))}while(0);r=c[m>>2]|0;m=r+(d*12|0)|0;s=c[m>>2]|0;if(s){c[r+(d*12|0)+4>>2]=0;Td(s);c[m>>2]=0;c[r+(d*12|0)+8>>2]=0}m=b+412|0;d=d<<1;s=c[m>>2]|0;r=s+(d*12|0)+4|0;if((c[r>>2]|0)==0?(l=s+(d*12|0)|0,k=c[l>>2]|0,(k|0)!=0):0){c[r>>2]=0;Td(k);c[l>>2]=0;c[s+(d*12|0)+8>>2]=0;s=c[m>>2]|0}k=d|1;l=s+(k*12|0)+4|0;if((c[l>>2]|0)==0?(j=s+(k*12|0)|0,h=c[j>>2]|0,(h|0)!=0):0){c[l>>2]=0;Td(h);c[j>>2]=0;c[s+(k*12|0)+8>>2]=0}b=Jc(b,0)|0;A=c[g>>2]|0}while(0);if(A){c[q>>2]=0;Td(A);c[g>>2]=0;c[p>>2]=0}g=c[f>>2]|0;if(!g){i=e;return b|0}c[n>>2]=0;Td(g);c[f>>2]=0;c[o>>2]=0;i=e;return b|0}function Nc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;e=i;if(!(a[b+724>>0]|0)){i=e;return}l=b+540|0;if((c[l>>2]|0)>0){j=b+760|0;f=b+804|0;g=b+776|0;k=b+544|0;h=0;do{n=c[j>>2]|0;m=n+(h*12|0)+4|0;p=c[m>>2]|0;if((p|0)>0){n=c[n+(h*12|0)>>2]|0;q=0;o=0;do{r=c[n+(q<<2)>>2]|0;if((c[(c[c[f>>2]>>2]|0)+(r<<2)>>2]&3|0)!=1){c[n+(o<<2)>>2]=r;p=c[m>>2]|0;o=o+1|0}q=q+1|0}while((q|0)<(p|0))}else{q=0;o=0}n=q-o|0;if((n|0)>0)c[m>>2]=p-n;a[(c[g>>2]|0)+h>>0]=0;n=c[j>>2]|0;m=n+(h*12|0)+4|0;if((c[m>>2]|0)>0){r=n+(h*12|0)|0;p=0;do{n=(c[r>>2]|0)+(p<<2)|0;o=c[n>>2]|0;q=c[k>>2]|0;s=q+(o<<2)|0;if(!(c[s>>2]&16)){t=wc(d,s)|0;c[n>>2]=t;c[s>>2]=c[s>>2]|16;c[q+(o+1<<2)>>2]=t}else c[n>>2]=c[q+(o+1<<2)>>2];p=p+1|0}while((p|0)<(c[m>>2]|0))}h=h+1|0}while((h|0)<(c[l>>2]|0))}f=b+856|0;t=c[b+872>>2]|0;g=b+868|0;m=c[g>>2]|0;k=t-m|0;if((t|0)<(m|0))k=(c[b+860>>2]|0)+k|0;a:do if((k|0)>0){h=b+860|0;j=b+544|0;while(1){l=c[(c[f>>2]|0)+(m<<2)>>2]|0;n=m+1|0;c[g>>2]=(n|0)==(c[h>>2]|0)?0:n;n=c[j>>2]|0;o=n+(l<<2)|0;m=c[o>>2]|0;if(!(m&3)){if(!(m&16)){t=wc(d,o)|0;c[o>>2]=c[o>>2]|16;c[n+(l+1<<2)>>2]=t;l=t}else l=c[n+(l+1<<2)>>2]|0;Zc(f,l)}k=k+ -1|0;if((k|0)<=0)break a;m=c[g>>2]|0}}else j=b+544|0;while(0);b=b+928|0;f=c[b>>2]|0;h=c[j>>2]|0;g=h+(f<<2)|0;if(!(c[g>>2]&16)){t=wc(d,g)|0;c[b>>2]=t;c[g>>2]=c[g>>2]|16;c[h+(f+1<<2)>>2]=t;i=e;return}else{c[b>>2]=c[h+(f+1<<2)>>2];i=e;return}}function Oc(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;h=i;i=i+32|0;l=h;d=h+8|0;e=b+544|0;f=b+548|0;g=b+556|0;j=(c[f>>2]|0)-(c[g>>2]|0)|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;gc(d,j);j=d+16|0;k=b+560|0;a[j>>0]=a[k>>0]|0;Nc(b,d);ac(b,d);if((c[b+44>>2]|0)>1){m=c[d+4>>2]<<2;c[l>>2]=c[f>>2]<<2;c[l+4>>2]=m;La(3608,l|0)|0}a[k>>0]=a[j>>0]|0;j=c[e>>2]|0;if(j)Td(j);c[e>>2]=c[d>>2];c[f>>2]=c[d+4>>2];c[b+552>>2]=c[d+8>>2];c[g>>2]=c[d+12>>2];i=h;return}function Pc(){var d=0,e=0,f=0;d=i;i=i+16|0;e=d;a[2608]=0;a[2616]=1;a[2624]=2;xb(2632,2656,2664,3744,3752);c[658]=160;a[2652]=0;xb(2704,2728,2736,3744,3752);c[676]=160;a[2724]=0;xb(2784,2808,2816,3744,3752);c[696]=160;a[2804]=1;xb(2848,2880,2888,3744,3736);c[712]=280;f=2868|0;c[f>>2]=-2147483648;c[f+4>>2]=2147483647;c[719]=0;xb(2960,2992,3e3,3744,3736);c[740]=280;f=2980|0;c[f>>2]=-1;c[f+4>>2]=2147483647;c[747]=20;xb(3112,3144,3152,3744,3736);c[778]=280;f=3132|0;c[f>>2]=-1;c[f+4>>2]=2147483647;c[785]=1e3;xb(3240,3296,3312,3744,3720);c[810]=2168;h[408]=0.0;h[409]=v;a[3280]=0;a[3281]=0;b[1641]=b[e+0>>1]|0;b[1642]=b[e+2>>1]|0;b[1643]=b[e+4>>1]|0;h[411]=.5;i=d;return}function Qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a>>2]=0;e=a+4|0;c[e>>2]=0;f=a+8|0;c[f>>2]=0;if((b|0)<=0){i=d;return}g=b+1&-2;g=(g|0)>2?g:2;c[f>>2]=g;f=Ud(0,g<<2)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0)Ta(va(1)|0,48,0);a=c[e>>2]|0;if((a|0)<(b|0))do{g=f+(a<<2)|0;if(g)c[g>>2]=0;a=a+1|0}while((a|0)!=(b|0));c[e>>2]=b;i=d;return}function Rc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;e=a+32|0;d=c[e>>2]|0;if(d){c[a+36>>2]=0;Td(d);c[e>>2]=0;c[a+40>>2]=0}e=a+16|0;d=c[e>>2]|0;if(d){c[a+20>>2]=0;Td(d);c[e>>2]=0;c[a+24>>2]=0}e=c[a>>2]|0;if(!e){i=b;return}d=a+4|0;g=c[d>>2]|0;if((g|0)>0){f=0;do{j=e+(f*12|0)|0;h=c[j>>2]|0;if(h){c[e+(f*12|0)+4>>2]=0;Td(h);c[j>>2]=0;c[e+(f*12|0)+8>>2]=0;e=c[a>>2]|0;g=c[d>>2]|0}f=f+1|0}while((f|0)<(g|0))}c[d>>2]=0;Td(e);c[a>>2]=0;c[a+8>>2]=0;i=b;return}function Sc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;b=c[b>>2]|0;g=b+1|0;f=a+4|0;if((c[f>>2]|0)>=(g|0)){k=c[a>>2]|0;k=k+(b<<2)|0;c[k>>2]=d;i=e;return}h=a+8|0;k=c[h>>2]|0;if((k|0)<(g|0)){l=b+2-k&-2;j=(k>>1)+2&-2;j=(l|0)>(j|0)?l:j;if((j|0)>(2147483647-k|0)){l=va(1)|0;Ta(l|0,48,0)}m=c[a>>2]|0;l=j+k|0;c[h>>2]=l;l=Ud(m,l<<2)|0;c[a>>2]=l;if((l|0)==0?(c[(Oa()|0)>>2]|0)==12:0){m=va(1)|0;Ta(m|0,48,0)}}k=c[f>>2]|0;if((k|0)<(g|0)){h=c[a>>2]|0;do{j=h+(k<<2)|0;if(j)c[j>>2]=0;k=k+1|0}while((k|0)!=(g|0))}c[f>>2]=g;m=c[a>>2]|0;m=m+(b<<2)|0;c[m>>2]=d;i=e;return}function Tc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;k=c[d>>2]|0;g=k+1|0;f=b+4|0;if((c[f>>2]|0)<(g|0)){j=b+8|0;h=c[j>>2]|0;if((h|0)<(g|0)){l=k+2-h&-2;k=(h>>1)+2&-2;k=(l|0)>(k|0)?l:k;if((k|0)>(2147483647-h|0)){l=va(1)|0;Ta(l|0,48,0)}m=c[b>>2]|0;l=k+h|0;c[j>>2]=l;l=Ud(m,l*12|0)|0;c[b>>2]=l;if((l|0)==0?(c[(Oa()|0)>>2]|0)==12:0){m=va(1)|0;Ta(m|0,48,0)}}j=c[f>>2]|0;if((j|0)<(g|0)){h=c[b>>2]|0;do{k=h+(j*12|0)|0;if(k){c[k>>2]=0;c[h+(j*12|0)+4>>2]=0;c[h+(j*12|0)+8>>2]=0}j=j+1|0}while((j|0)!=(g|0))}c[f>>2]=g;h=c[d>>2]|0}else h=k;f=c[b>>2]|0;if(c[f+(h*12|0)>>2]|0){c[f+(h*12|0)+4>>2]=0;h=c[d>>2]|0}d=b+16|0;f=h+1|0;g=b+20|0;if((c[g>>2]|0)>=(f|0)){i=e;return}j=b+24|0;b=c[j>>2]|0;if((b|0)<(f|0)){m=h+2-b&-2;h=(b>>1)+2&-2;h=(m|0)>(h|0)?m:h;if((h|0)>(2147483647-b|0)){m=va(1)|0;Ta(m|0,48,0)}l=c[d>>2]|0;m=h+b|0;c[j>>2]=m;m=Ud(l,m)|0;c[d>>2]=m;if((m|0)==0?(c[(Oa()|0)>>2]|0)==12:0){m=va(1)|0;Ta(m|0,48,0)}}b=c[g>>2]|0;if((b|0)<(f|0))do{a[(c[d>>2]|0)+b>>0]=0;b=b+1|0}while((b|0)!=(f|0));c[g>>2]=f;i=e;return}function Uc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;i=i+16|0;g=d;c[g>>2]=b;f=a+12|0;e=b+1|0;h=a+16|0;if((c[h>>2]|0)<(e|0)){k=a+20|0;j=c[k>>2]|0;if((j|0)<(e|0)){m=b+2-j&-2;l=(j>>1)+2&-2;l=(m|0)>(l|0)?m:l;if((l|0)>(2147483647-j|0)){m=va(1)|0;Ta(m|0,48,0)}n=c[f>>2]|0;m=l+j|0;c[k>>2]=m;m=Ud(n,m<<2)|0;c[f>>2]=m;if((m|0)==0?(c[(Oa()|0)>>2]|0)==12:0){n=va(1)|0;Ta(n|0,48,0)}}j=c[h>>2]|0;if((e|0)>(j|0))ke((c[f>>2]|0)+(j<<2)|0,-1,e-j<<2|0)|0;c[h>>2]=e}c[(c[f>>2]|0)+(b<<2)>>2]=c[a+4>>2];nc(a,g);e=c[f>>2]|0;j=c[e+(b<<2)>>2]|0;b=c[a>>2]|0;f=c[b+(j<<2)>>2]|0;if(!j){m=0;n=b+(m<<2)|0;c[n>>2]=f;n=e+(f<<2)|0;c[n>>2]=m;i=d;return}a=a+28|0;g=f<<1;h=g|1;while(1){m=j;j=j+ -1>>1;l=b+(j<<2)|0;k=c[l>>2]|0;r=c[c[a>>2]>>2]|0;o=c[r+(g<<2)>>2]|0;q=c[r+(h<<2)>>2]|0;o=we(q|0,((q|0)<0)<<31>>31|0,o|0,((o|0)<0)<<31>>31|0)|0;q=F;p=k<<1;n=c[r+(p<<2)>>2]|0;p=c[r+((p|1)<<2)>>2]|0;n=we(p|0,((p|0)<0)<<31>>31|0,n|0,((n|0)<0)<<31>>31|0)|0;p=F;if(!(q>>>0<p>>>0|(q|0)==(p|0)&o>>>0<n>>>0)){a=14;break}c[b+(m<<2)>>2]=k;c[e+(c[l>>2]<<2)>>2]=m;if(!j){m=0;a=14;break}}if((a|0)==14){r=b+(m<<2)|0;c[r>>2]=f;r=e+(f<<2)|0;c[r>>2]=m;i=d;return}}function Vc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;h=b+824|0;l=(c[b+840>>2]|0)>(d|0);if(l?(c[(c[b+836>>2]|0)+(d<<2)>>2]|0)>-1:0)j=7;else j=3;do if((j|0)==3){if(a[(c[b+876>>2]|0)+d>>0]|0){i=e;return}if(a[(c[b+904>>2]|0)+d>>0]|0){i=e;return}o=a[(c[b+332>>2]|0)+d>>0]|0;n=a[2624]|0;p=n&255;if((p>>>1^1)&o<<24>>24==n<<24>>24|o&2&p)if(l){j=7;break}else break;else{i=e;return}}while(0);if((j|0)==7?(f=c[b+836>>2]|0,g=f+(d<<2)|0,k=c[g>>2]|0,(k|0)>-1):0){d=c[h>>2]|0;j=c[d+(k<<2)>>2]|0;a:do if(!k)o=0;else{l=b+852|0;m=j<<1;b=m|1;while(1){o=k;k=k+ -1>>1;p=d+(k<<2)|0;n=c[p>>2]|0;u=c[c[l>>2]>>2]|0;r=c[u+(m<<2)>>2]|0;t=c[u+(b<<2)>>2]|0;r=we(t|0,((t|0)<0)<<31>>31|0,r|0,((r|0)<0)<<31>>31|0)|0;t=F;s=n<<1;q=c[u+(s<<2)>>2]|0;s=c[u+((s|1)<<2)>>2]|0;q=we(s|0,((s|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;s=F;if(!(t>>>0<s>>>0|(t|0)==(s|0)&r>>>0<q>>>0))break a;c[d+(o<<2)>>2]=n;c[f+(c[p>>2]<<2)>>2]=o;if(!k){o=0;break}}}while(0);c[d+(o<<2)>>2]=j;c[f+(j<<2)>>2]=o;Wc(h,c[g>>2]|0);i=e;return}Uc(h,d);i=e;return}function Wc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;e=c[a>>2]|0;f=c[e+(b<<2)>>2]|0;m=b<<1|1;l=a+4|0;o=c[l>>2]|0;if((m|0)>=(o|0)){p=b;q=a+12|0;o=e+(p<<2)|0;c[o>>2]=f;q=c[q>>2]|0;q=q+(f<<2)|0;c[q>>2]=p;i=d;return}h=a+28|0;k=f<<1;j=k|1;a=a+12|0;while(1){n=(b<<1)+2|0;if((n|0)<(o|0)){p=c[e+(n<<2)>>2]|0;q=c[e+(m<<2)>>2]|0;u=p<<1;o=c[c[h>>2]>>2]|0;s=c[o+(u<<2)>>2]|0;u=c[o+((u|1)<<2)>>2]|0;s=we(u|0,((u|0)<0)<<31>>31|0,s|0,((s|0)<0)<<31>>31|0)|0;u=F;t=q<<1;r=c[o+(t<<2)>>2]|0;t=c[o+((t|1)<<2)>>2]|0;r=we(t|0,((t|0)<0)<<31>>31|0,r|0,((r|0)<0)<<31>>31|0)|0;t=F;if(!(u>>>0<t>>>0|(u|0)==(t|0)&s>>>0<r>>>0)){p=q;g=7}}else{p=c[e+(m<<2)>>2]|0;o=c[c[h>>2]>>2]|0;g=7}if((g|0)==7){g=0;n=m}r=p<<1;t=c[o+(r<<2)>>2]|0;r=c[o+((r|1)<<2)>>2]|0;t=we(r|0,((r|0)<0)<<31>>31|0,t|0,((t|0)<0)<<31>>31|0)|0;r=F;u=c[o+(k<<2)>>2]|0;s=c[o+(j<<2)>>2]|0;u=we(s|0,((s|0)<0)<<31>>31|0,u|0,((u|0)<0)<<31>>31|0)|0;s=F;if(!(r>>>0<s>>>0|(r|0)==(s|0)&t>>>0<u>>>0)){g=10;break}c[e+(b<<2)>>2]=p;c[(c[a>>2]|0)+(p<<2)>>2]=b;m=n<<1|1;o=c[l>>2]|0;if((m|0)>=(o|0)){b=n;g=10;break}else b=n}if((g|0)==10){u=e+(b<<2)|0;c[u>>2]=f;u=c[a>>2]|0;u=u+(f<<2)|0;c[u>>2]=b;i=d;return}}function Xc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;h=c[a>>2]|0;if(h){e=a+4|0;f=c[e>>2]|0;a:do if((f|0)>0){g=0;while(1){j=h+(g*12|0)|0;k=c[j>>2]|0;if(k){c[h+(g*12|0)+4>>2]=0;Td(k);c[j>>2]=0;c[h+(g*12|0)+8>>2]=0;f=c[e>>2]|0}g=g+1|0;if((g|0)>=(f|0))break a;h=c[a>>2]|0}}while(0);c[e>>2]=0;if(b){Td(c[a>>2]|0);c[a>>2]=0;c[a+8>>2]=0}}e=a+16|0;f=c[e>>2]|0;if((f|0)!=0?(c[a+20>>2]=0,b):0){Td(f);c[e>>2]=0;c[a+24>>2]=0}f=a+32|0;e=c[f>>2]|0;if(!e){i=d;return}c[a+36>>2]=0;if(!b){i=d;return}Td(e);c[f>>2]=0;c[a+40>>2]=0;i=d;return}function Yc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;e=i;f=c[a>>2]|0;d=a+4|0;if(f){c[d>>2]=0;if(b){Td(f);c[a>>2]=0;c[a+8>>2]=0;f=0}}else f=0;if((c[d>>2]|0)>=1){h=a+16|0;c[h>>2]=0;h=a+12|0;c[h>>2]=0;i=e;return}h=a+8|0;g=c[h>>2]|0;if((g|0)<1){j=2-g&-2;b=(g>>1)+2&-2;b=(j|0)>(b|0)?j:b;if((b|0)>(2147483647-g|0)){j=va(1)|0;Ta(j|0,48,0)}j=b+g|0;c[h>>2]=j;f=Ud(f,j<<2)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0){j=va(1)|0;Ta(j|0,48,0)}}b=c[d>>2]|0;if((b|0)<1)while(1){g=f+(b<<2)|0;if(g)c[g>>2]=0;if(!b)break;else b=b+1|0}c[d>>2]=1;j=a+16|0;c[j>>2]=0;j=a+12|0;c[j>>2]=0;i=e;return}function Zc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;i=i+16|0;d=e;f=a+16|0;j=c[f>>2]|0;c[f>>2]=j+1;c[(c[a>>2]|0)+(j<<2)>>2]=b;j=c[f>>2]|0;b=a+4|0;h=c[b>>2]|0;if((j|0)==(h|0)){c[f>>2]=0;j=0}g=a+12|0;if((c[g>>2]|0)!=(j|0)){i=e;return}Qc(d,(h*3|0)+1>>1);l=c[g>>2]|0;m=c[b>>2]|0;if((l|0)<(m|0)){j=c[a>>2]|0;k=c[d>>2]|0;m=0;while(1){h=m+1|0;c[k+(m<<2)>>2]=c[j+(l<<2)>>2];l=l+1|0;m=c[b>>2]|0;if((l|0)>=(m|0)){k=h;break}else m=h}}else k=0;h=c[a>>2]|0;if((c[f>>2]|0)>0){j=c[d>>2]|0;l=0;while(1){c[j+(k<<2)>>2]=c[h+(l<<2)>>2];l=l+1|0;if((l|0)>=(c[f>>2]|0))break;else k=k+1|0}m=c[b>>2]|0}c[g>>2]=0;c[f>>2]=m;if(!h)f=a+8|0;else{c[b>>2]=0;Td(h);c[a>>2]=0;f=a+8|0;c[f>>2]=0}c[a>>2]=c[d>>2];l=d+4|0;c[b>>2]=c[l>>2];m=d+8|0;c[f>>2]=c[m>>2];c[d>>2]=0;c[l>>2]=0;c[m>>2]=0;i=e;return}function _c(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+4|0;f=c[e>>2]|0;g=a+8|0;h=c[g>>2]|0;if((f|0)==(h|0)&(h|0)<(f+1|0)){h=(f>>1)+2&-2;h=(h|0)<2?2:h;if((h|0)>(2147483647-f|0)){h=va(1)|0;Ta(h|0,48,0)}j=c[a>>2]|0;f=h+f|0;c[g>>2]=f;f=Ud(j,f<<2)|0;c[a>>2]=f;if((f|0)==0?(c[(Oa()|0)>>2]|0)==12:0){j=va(1)|0;Ta(j|0,48,0)}}else f=c[a>>2]|0;j=c[e>>2]|0;c[e>>2]=j+1;e=f+(j<<2)|0;if(!e){i=d;return}c[e>>2]=c[b>>2];i=d;return}function $c(){var a=0,b=0;b=i;Ka(3864)|0;a=od(936)|0;xc(a);i=b;return a|0}function ad(a){a=a|0;var b=0;b=i;if(!a){i=b;return}gb[c[(c[a>>2]|0)+4>>2]&31](a);i=b;return}function bd(){var b=0,d=0,e=0;b=i;i=i+16|0;d=b;e=od(936)|0;xc(e);c[964]=e;Cc(e,1)|0;e=c[964]|0;a[d+0>>0]=a[3840]|0;Ac(e,d,1)|0;i=b;return}function cd(b){b=b|0;var d=0,e=0,f=0;d=i;i=i+16|0;e=d;if((c[962]|0)>=(b|0)){i=d;return}do{f=c[964]|0;a[e+0>>0]=a[3840]|0;Ac(f,e,1)|0;f=(c[962]|0)+1|0;c[962]=f}while((f|0)<(b|0));i=d;return}function dd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+32|0;h=g+16|0;e=g+4|0;j=g;c[e>>2]=0;f=e+4|0;c[f>>2]=0;d=e+8|0;c[d>>2]=0;k=c[b>>2]|0;if(k)do{l=(k|0)<0?0-k|0:k;if((c[962]|0)<(l|0))do{m=c[964]|0;a[h+0>>0]=a[3840]|0;Ac(m,h,1)|0;m=(c[962]|0)+1|0;c[962]=m}while((m|0)<(l|0));c[j>>2]=l<<1|k>>>31;mc(e,j);b=b+4|0;k=c[b>>2]|0}while((k|0)!=0);j=c[964]|0;h=j+628|0;ld(e,h);h=Dc(j,h)|0;j=c[e>>2]|0;if(!j){i=g;return h|0}c[f>>2]=0;Td(j);c[e>>2]=0;c[d>>2]=0;i=g;return h|0}function ed(){var b=0,d=0,e=0,f=0;d=i;i=i+16|0;b=d;e=c[964]|0;f=e+664|0;c[f+0>>2]=-1;c[f+4>>2]=-1;c[f+8>>2]=-1;c[f+12>>2]=-1;if(c[e+304>>2]|0)c[e+308>>2]=0;Bc(b,e,1,0);i=d;return(a[b>>0]|0)==0|0}function fd(){return(c[(c[964]|0)+4>>2]|0)+1|0}function gd(){return c[962]|0}function hd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+32|0;h=d+16|0;f=d+4|0;j=d;c[f>>2]=0;e=f+4|0;c[e>>2]=0;g=f+8|0;c[g>>2]=0;c[j>>2]=b<<1;mc(f,j);b=c[964]|0;j=b+664|0;c[j+0>>2]=-1;c[j+4>>2]=-1;c[j+8>>2]=-1;c[j+12>>2]=-1;ld(f,b+304|0);Bc(h,b,1,0);b=(a[h>>0]|0)==0;h=c[f>>2]|0;if(!h){i=d;return b|0}c[e>>2]=0;Td(h);c[f>>2]=0;c[g>>2]=0;i=d;return b|0}function id(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;e=b;d=c[964]|0;c[e>>2]=a<<1|1;a=d+628|0;if(c[a>>2]|0)c[d+632>>2]=0;mc(a,e);Dc(d,a)|0;i=b;return}function jd(){return c[(c[964]|0)+36>>2]|0}function kd(){return c[(c[964]|0)+32>>2]|0}function ld(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;h=c[b>>2]|0;e=b+4|0;if(!h)j=c[e>>2]|0;else{c[e>>2]=0;j=0}e=a+4|0;f=c[e>>2]|0;g=b+4|0;if((j|0)<(f|0)){k=b+8|0;j=c[k>>2]|0;if((j|0)<(f|0)){m=f+1-j&-2;l=(j>>1)+2&-2;l=(m|0)>(l|0)?m:l;if((l|0)>(2147483647-j|0)){m=va(1)|0;Ta(m|0,48,0)}m=l+j|0;c[k>>2]=m;h=Ud(h,m<<2)|0;c[b>>2]=h;if((h|0)==0?(c[(Oa()|0)>>2]|0)==12:0){m=va(1)|0;Ta(m|0,48,0)}}j=c[g>>2]|0;a:do if((j|0)<(f|0))while(1){h=h+(j<<2)|0;if(h)c[h>>2]=0;j=j+1|0;if((j|0)==(f|0))break a;h=c[b>>2]|0}while(0);c[g>>2]=f;f=c[e>>2]|0}if((f|0)<=0){i=d;return}b=c[b>>2]|0;a=c[a>>2]|0;f=0;do{c[b+(f<<2)>>2]=c[a+(f<<2)>>2];f=f+1|0}while((f|0)<(c[e>>2]|0));i=d;return}function md(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=b;b=c[p>>2]|0;ua(b|0,a|0,d|0)|0;Sa(10,b|0)|0;Wa()}function nd(){var a=0,b=0;a=i;i=i+16|0;if(!(Ja(4064,3)|0)){b=Ha(c[1014]|0)|0;i=a;return b|0}else md(4072,a);return 0}function od(a){a=a|0;var b=0,d=0;b=i;a=(a|0)==0?1:a;d=Sd(a)|0;if(d){i=b;return d|0}while(1){d=vd()|0;if(!d){a=4;break}jb[d&3]();d=Sd(a)|0;if(d){a=5;break}}if((a|0)==4){d=va(4)|0;c[d>>2]=4248;Ta(d|0,4296,12)}else if((a|0)==5){i=b;return d|0}return 0}function pd(a){a=a|0;var b=0;b=i;Td(a);i=b;return}function qd(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function rd(a){a=a|0;return}function sd(a){a=a|0;return 4264}function td(a){a=a|0;var b=0;b=i;i=i+16|0;jb[a&3]();md(4312,b)}function ud(){var a=0,b=0;b=nd()|0;if(((b|0)!=0?(a=c[b>>2]|0,(a|0)!=0):0)?(b=a+48|0,(c[b>>2]&-256|0)==1126902528?(c[b+4>>2]|0)==1129074247:0):0)td(c[a+12>>2]|0);b=c[968]|0;c[968]=b+0;td(b)}function vd(){var a=0;a=c[1102]|0;c[1102]=a+0;return a|0}function wd(a){a=a|0;return}function xd(a){a=a|0;return}function yd(a){a=a|0;return}function zd(a){a=a|0;return}function Ad(a){a=a|0;return}function Bd(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function Cd(a){a=a|0;var b=0;b=i;pd(a);i=b;return}function Dd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){h=1;i=e;return h|0}if(!b){h=0;i=e;return h|0}b=Hd(b,4504,4560,0)|0;if(!b){h=0;i=e;return h|0}h=f+0|0;g=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));c[f>>2]=b;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;mb[c[(c[b>>2]|0)+28>>2]&3](b,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){h=0;i=e;return h|0}c[d>>2]=c[f+16>>2];h=1;i=e;return h|0}function Ed(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;b=i;g=d+16|0;h=c[g>>2]|0;if(!h){c[g>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=b;return}if((h|0)!=(e|0)){h=d+36|0;c[h>>2]=(c[h>>2]|0)+1;c[d+24>>2]=2;a[d+54>>0]=1;i=b;return}e=d+24|0;if((c[e>>2]|0)!=2){i=b;return}c[e>>2]=f;i=b;return}function Fd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((c[b+8>>2]|0)!=(a|0)){i=f;return}Ed(0,b,d,e);i=f;return}function Gd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==(c[b+8>>2]|0)){Ed(0,b,d,e);i=f;return}else{a=c[a+8>>2]|0;mb[c[(c[a>>2]|0)+28>>2]&3](a,b,d,e);i=f;return}}function Hd(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;i=i+64|0;j=h;k=c[d>>2]|0;l=d+(c[k+ -8>>2]|0)|0;k=c[k+ -4>>2]|0;c[j>>2]=f;c[j+4>>2]=d;c[j+8>>2]=e;c[j+12>>2]=g;n=j+16|0;o=j+20|0;e=j+24|0;m=j+28|0;g=j+32|0;d=j+40|0;p=(k|0)==(f|0);q=n+0|0;f=q+36|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(f|0));b[n+36>>1]=0;a[n+38>>0]=0;if(p){c[j+48>>2]=1;kb[c[(c[k>>2]|0)+20>>2]&3](k,j,l,l,1,0);q=(c[e>>2]|0)==1?l:0;i=h;return q|0}fb[c[(c[k>>2]|0)+24>>2]&3](k,j,l,1,0);j=c[j+36>>2]|0;if(!j){q=(c[d>>2]|0)==1&(c[m>>2]|0)==1&(c[g>>2]|0)==1?c[o>>2]|0:0;i=h;return q|0}else if((j|0)==1){if((c[e>>2]|0)!=1?!((c[d>>2]|0)==0&(c[m>>2]|0)==1&(c[g>>2]|0)==1):0){q=0;i=h;return q|0}q=c[n>>2]|0;i=h;return q|0}else{q=0;i=h;return q|0}return 0}function Id(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;b=i;a[d+53>>0]=1;if((c[d+4>>2]|0)!=(f|0)){i=b;return}a[d+52>>0]=1;f=d+16|0;h=c[f>>2]|0;if(!h){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((g|0)==1?(c[d+48>>2]|0)==1:0)){i=b;return}a[d+54>>0]=1;i=b;return}if((h|0)!=(e|0)){h=d+36|0;c[h>>2]=(c[h>>2]|0)+1;a[d+54>>0]=1;i=b;return}e=d+24|0;f=c[e>>2]|0;if((f|0)==2)c[e>>2]=g;else g=f;if(!((g|0)==1?(c[d+48>>2]|0)==1:0)){i=b;return}a[d+54>>0]=1;i=b;return}function Jd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){l=c[b+8>>2]|0;fb[c[(c[l>>2]|0)+24>>2]&3](l,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(k=d+20|0,(c[k>>2]|0)!=(e|0)):0){c[d+32>>2]=f;f=d+44|0;if((c[f>>2]|0)==4){i=h;return}l=d+52|0;a[l>>0]=0;m=d+53|0;a[m>>0]=0;b=c[b+8>>2]|0;kb[c[(c[b>>2]|0)+20>>2]&3](b,d,e,e,1,g);if(a[m>>0]|0){if(!(a[l>>0]|0)){b=1;j=13}}else{b=0;j=13}do if((j|0)==13){c[k>>2]=e;m=d+40|0;c[m>>2]=(c[m>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(b)break}else j=16;if((j|0)==16?b:0)break;c[f>>2]=4;i=h;return}while(0);c[f>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function Kd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}d=d+28|0;if((c[d>>2]|0)==1){i=g;return}c[d>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(h=d+20|0,(c[h>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[h>>2]=e;b=d+40|0;c[b>>2]=(c[b>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function Ld(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((a|0)==(c[b+8>>2]|0)){Id(0,b,d,e,f);i=h;return}else{a=c[a+8>>2]|0;kb[c[(c[a>>2]|0)+20>>2]&3](a,b,d,e,f,g);i=h;return}}function Md(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[b+8>>2]|0)!=(a|0)){i=g;return}Id(0,b,d,e,f);i=g;return}function Nd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=c[d>>2];a=eb[c[(c[a>>2]|0)+16>>2]&1](a,b,f)|0;b=a&1;if(!a){i=e;return b|0}c[d>>2]=c[f>>2];i=e;return b|0}function Od(a){a=a|0;var b=0;b=i;if(!a)a=0;else a=(Hd(a,4504,4672,0)|0)!=0;i=b;return a&1|0}function Pd(){var a=0,b=0,d=0,e=0,f=0;a=i;i=i+16|0;b=a;a=a+12|0;d=nd()|0;if(!d)md(4040,b);d=c[d>>2]|0;if(!d)md(4040,b);f=d+48|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if(!((e&-256|0)==1126902528&(f|0)==1129074247)){c[b>>2]=c[970];md(4e3,b)}if((e|0)==1126902529&(f|0)==1129074247)e=c[d+44>>2]|0;else e=d+80|0;c[a>>2]=e;f=c[d>>2]|0;d=c[f+4>>2]|0;if(eb[c[(c[4432>>2]|0)+16>>2]&1](4432,f,a)|0){f=c[a>>2]|0;e=c[970]|0;f=ib[c[(c[f>>2]|0)+8>>2]&1](f)|0;c[b>>2]=e;c[b+4>>2]=d;c[b+8>>2]=f;md(3904,b)}else{c[b>>2]=c[970];c[b+4>>2]=d;md(3952,b)}}function Qd(){var a=0;a=i;i=i+16|0;if(!(Ma(4056,20)|0)){i=a;return}else md(4128,a)}function Rd(a){a=a|0;var b=0;b=i;i=i+16|0;Td(a);if(!(Pa(c[1014]|0,0)|0)){i=b;return}else md(4184,b)}function Sd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;b=i;do if(a>>>0<245){if(a>>>0<11)a=16;else a=a+11&-8;x=a>>>3;p=c[1206]|0;w=p>>>x;if(w&3){g=(w&1^1)+x|0;f=g<<1;d=4864+(f<<2)|0;f=4864+(f+2<<2)|0;h=c[f>>2]|0;j=h+8|0;e=c[j>>2]|0;do if((d|0)!=(e|0)){if(e>>>0<(c[1210]|0)>>>0)Wa();k=e+12|0;if((c[k>>2]|0)==(h|0)){c[k>>2]=d;c[f>>2]=e;break}else Wa()}else c[1206]=p&~(1<<g);while(0);H=g<<3;c[h+4>>2]=H|3;H=h+(H|4)|0;c[H>>2]=c[H>>2]|1;H=j;i=b;return H|0}v=c[1208]|0;if(a>>>0>v>>>0){if(w){h=2<<x;h=w<<x&(h|0-h);h=(h&0-h)+ -1|0;d=h>>>12&16;h=h>>>d;j=h>>>5&8;h=h>>>j;f=h>>>2&4;h=h>>>f;g=h>>>1&2;h=h>>>g;e=h>>>1&1;e=(j|d|f|g|e)+(h>>>e)|0;h=e<<1;g=4864+(h<<2)|0;h=4864+(h+2<<2)|0;f=c[h>>2]|0;d=f+8|0;j=c[d>>2]|0;do if((g|0)!=(j|0)){if(j>>>0<(c[1210]|0)>>>0)Wa();k=j+12|0;if((c[k>>2]|0)==(f|0)){c[k>>2]=g;c[h>>2]=j;E=c[1208]|0;break}else Wa()}else{c[1206]=p&~(1<<e);E=v}while(0);H=e<<3;e=H-a|0;c[f+4>>2]=a|3;g=f+a|0;c[f+(a|4)>>2]=e|1;c[f+H>>2]=e;if(E){f=c[1211]|0;l=E>>>3;j=l<<1;h=4864+(j<<2)|0;k=c[1206]|0;l=1<<l;if(k&l){j=4864+(j+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[1210]|0)>>>0)Wa();else{D=j;C=k}}else{c[1206]=k|l;D=4864+(j+2<<2)|0;C=h}c[D>>2]=f;c[C+12>>2]=f;c[f+8>>2]=C;c[f+12>>2]=h}c[1208]=e;c[1211]=g;H=d;i=b;return H|0}p=c[1207]|0;if(p){d=(p&0-p)+ -1|0;G=d>>>12&16;d=d>>>G;F=d>>>5&8;d=d>>>F;H=d>>>2&4;d=d>>>H;f=d>>>1&2;d=d>>>f;e=d>>>1&1;e=c[5128+((F|G|H|f|e)+(d>>>e)<<2)>>2]|0;d=(c[e+4>>2]&-8)-a|0;f=e;while(1){g=c[f+16>>2]|0;if(!g){g=c[f+20>>2]|0;if(!g)break}f=(c[g+4>>2]&-8)-a|0;H=f>>>0<d>>>0;d=H?f:d;f=g;e=H?g:e}h=c[1210]|0;if(e>>>0<h>>>0)Wa();f=e+a|0;if(e>>>0>=f>>>0)Wa();g=c[e+24>>2]|0;k=c[e+12>>2]|0;do if((k|0)==(e|0)){k=e+20|0;j=c[k>>2]|0;if(!j){k=e+16|0;j=c[k>>2]|0;if(!j){B=0;break}}while(1){l=j+20|0;m=c[l>>2]|0;if(m){j=m;k=l;continue}l=j+16|0;m=c[l>>2]|0;if(!m)break;else{j=m;k=l}}if(k>>>0<h>>>0)Wa();else{c[k>>2]=0;B=j;break}}else{j=c[e+8>>2]|0;if(j>>>0<h>>>0)Wa();h=j+12|0;if((c[h>>2]|0)!=(e|0))Wa();l=k+8|0;if((c[l>>2]|0)==(e|0)){c[h>>2]=k;c[l>>2]=j;B=k;break}else Wa()}while(0);do if(g){j=c[e+28>>2]|0;h=5128+(j<<2)|0;if((e|0)==(c[h>>2]|0)){c[h>>2]=B;if(!B){c[1207]=c[1207]&~(1<<j);break}}else{if(g>>>0<(c[1210]|0)>>>0)Wa();h=g+16|0;if((c[h>>2]|0)==(e|0))c[h>>2]=B;else c[g+20>>2]=B;if(!B)break}h=c[1210]|0;if(B>>>0<h>>>0)Wa();c[B+24>>2]=g;g=c[e+16>>2]|0;do if(g)if(g>>>0<h>>>0)Wa();else{c[B+16>>2]=g;c[g+24>>2]=B;break}while(0);g=c[e+20>>2]|0;if(g)if(g>>>0<(c[1210]|0)>>>0)Wa();else{c[B+20>>2]=g;c[g+24>>2]=B;break}}while(0);if(d>>>0<16){H=d+a|0;c[e+4>>2]=H|3;H=e+(H+4)|0;c[H>>2]=c[H>>2]|1}else{c[e+4>>2]=a|3;c[e+(a|4)>>2]=d|1;c[e+(d+a)>>2]=d;h=c[1208]|0;if(h){g=c[1211]|0;k=h>>>3;l=k<<1;h=4864+(l<<2)|0;j=c[1206]|0;k=1<<k;if(j&k){j=4864+(l+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[1210]|0)>>>0)Wa();else{A=j;z=k}}else{c[1206]=j|k;A=4864+(l+2<<2)|0;z=h}c[A>>2]=g;c[z+12>>2]=g;c[g+8>>2]=z;c[g+12>>2]=h}c[1208]=d;c[1211]=f}H=e+8|0;i=b;return H|0}}}else if(a>>>0<=4294967231){z=a+11|0;a=z&-8;B=c[1207]|0;if(B){A=0-a|0;z=z>>>8;if(z)if(a>>>0>16777215)C=31;else{G=(z+1048320|0)>>>16&8;H=z<<G;F=(H+520192|0)>>>16&4;H=H<<F;C=(H+245760|0)>>>16&2;C=14-(F|G|C)+(H<<C>>>15)|0;C=a>>>(C+7|0)&1|C<<1}else C=0;D=c[5128+(C<<2)>>2]|0;a:do if(!D){F=0;z=0}else{if((C|0)==31)z=0;else z=25-(C>>>1)|0;F=0;E=a<<z;z=0;while(1){G=c[D+4>>2]&-8;H=G-a|0;if(H>>>0<A>>>0)if((G|0)==(a|0)){A=H;F=D;z=D;break a}else{A=H;z=D}H=c[D+20>>2]|0;D=c[D+(E>>>31<<2)+16>>2]|0;F=(H|0)==0|(H|0)==(D|0)?F:H;if(!D)break;else E=E<<1}}while(0);if((F|0)==0&(z|0)==0){H=2<<C;B=B&(H|0-H);if(!B)break;H=(B&0-B)+ -1|0;D=H>>>12&16;H=H>>>D;C=H>>>5&8;H=H>>>C;E=H>>>2&4;H=H>>>E;G=H>>>1&2;H=H>>>G;F=H>>>1&1;F=c[5128+((C|D|E|G|F)+(H>>>F)<<2)>>2]|0}if(F)while(1){H=(c[F+4>>2]&-8)-a|0;B=H>>>0<A>>>0;A=B?H:A;z=B?F:z;B=c[F+16>>2]|0;if(B){F=B;continue}F=c[F+20>>2]|0;if(!F)break}if((z|0)!=0?A>>>0<((c[1208]|0)-a|0)>>>0:0){f=c[1210]|0;if(z>>>0<f>>>0)Wa();d=z+a|0;if(z>>>0>=d>>>0)Wa();e=c[z+24>>2]|0;g=c[z+12>>2]|0;do if((g|0)==(z|0)){h=z+20|0;g=c[h>>2]|0;if(!g){h=z+16|0;g=c[h>>2]|0;if(!g){x=0;break}}while(1){j=g+20|0;k=c[j>>2]|0;if(k){g=k;h=j;continue}j=g+16|0;k=c[j>>2]|0;if(!k)break;else{g=k;h=j}}if(h>>>0<f>>>0)Wa();else{c[h>>2]=0;x=g;break}}else{h=c[z+8>>2]|0;if(h>>>0<f>>>0)Wa();j=h+12|0;if((c[j>>2]|0)!=(z|0))Wa();f=g+8|0;if((c[f>>2]|0)==(z|0)){c[j>>2]=g;c[f>>2]=h;x=g;break}else Wa()}while(0);do if(e){f=c[z+28>>2]|0;g=5128+(f<<2)|0;if((z|0)==(c[g>>2]|0)){c[g>>2]=x;if(!x){c[1207]=c[1207]&~(1<<f);break}}else{if(e>>>0<(c[1210]|0)>>>0)Wa();f=e+16|0;if((c[f>>2]|0)==(z|0))c[f>>2]=x;else c[e+20>>2]=x;if(!x)break}f=c[1210]|0;if(x>>>0<f>>>0)Wa();c[x+24>>2]=e;e=c[z+16>>2]|0;do if(e)if(e>>>0<f>>>0)Wa();else{c[x+16>>2]=e;c[e+24>>2]=x;break}while(0);e=c[z+20>>2]|0;if(e)if(e>>>0<(c[1210]|0)>>>0)Wa();else{c[x+20>>2]=e;c[e+24>>2]=x;break}}while(0);b:do if(A>>>0>=16){c[z+4>>2]=a|3;c[z+(a|4)>>2]=A|1;c[z+(A+a)>>2]=A;f=A>>>3;if(A>>>0<256){h=f<<1;e=4864+(h<<2)|0;g=c[1206]|0;f=1<<f;do if(!(g&f)){c[1206]=g|f;w=4864+(h+2<<2)|0;v=e}else{f=4864+(h+2<<2)|0;g=c[f>>2]|0;if(g>>>0>=(c[1210]|0)>>>0){w=f;v=g;break}Wa()}while(0);c[w>>2]=d;c[v+12>>2]=d;c[z+(a+8)>>2]=v;c[z+(a+12)>>2]=e;break}e=A>>>8;if(e)if(A>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=A>>>(e+7|0)&1|e<<1}else e=0;f=5128+(e<<2)|0;c[z+(a+28)>>2]=e;c[z+(a+20)>>2]=0;c[z+(a+16)>>2]=0;g=c[1207]|0;h=1<<e;if(!(g&h)){c[1207]=g|h;c[f>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break}h=c[f>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;c:do if((c[h+4>>2]&-8|0)!=(A|0)){e=A<<e;while(1){g=h+(e>>>31<<2)+16|0;f=c[g>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(A|0)){p=f;break c}else{e=e<<1;h=f}}if(g>>>0<(c[1210]|0)>>>0)Wa();else{c[g>>2]=d;c[z+(a+24)>>2]=h;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break b}}else p=h;while(0);f=p+8|0;e=c[f>>2]|0;H=c[1210]|0;if(p>>>0>=H>>>0&e>>>0>=H>>>0){c[e+12>>2]=d;c[f>>2]=d;c[z+(a+8)>>2]=e;c[z+(a+12)>>2]=p;c[z+(a+24)>>2]=0;break}else Wa()}else{H=A+a|0;c[z+4>>2]=H|3;H=z+(H+4)|0;c[H>>2]=c[H>>2]|1}while(0);H=z+8|0;i=b;return H|0}}}else a=-1;while(0);p=c[1208]|0;if(p>>>0>=a>>>0){e=p-a|0;d=c[1211]|0;if(e>>>0>15){c[1211]=d+a;c[1208]=e;c[d+(a+4)>>2]=e|1;c[d+p>>2]=e;c[d+4>>2]=a|3}else{c[1208]=0;c[1211]=0;c[d+4>>2]=p|3;H=d+(p+4)|0;c[H>>2]=c[H>>2]|1}H=d+8|0;i=b;return H|0}p=c[1209]|0;if(p>>>0>a>>>0){G=p-a|0;c[1209]=G;H=c[1212]|0;c[1212]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}do if(!(c[1324]|0)){p=Ga(30)|0;if(!(p+ -1&p)){c[1326]=p;c[1325]=p;c[1327]=-1;c[1328]=-1;c[1329]=0;c[1317]=0;c[1324]=(Ya(0)|0)&-16^1431655768;break}else Wa()}while(0);x=a+48|0;p=c[1326]|0;w=a+47|0;A=p+w|0;p=0-p|0;v=A&p;if(v>>>0<=a>>>0){H=0;i=b;return H|0}z=c[1316]|0;if((z|0)!=0?(G=c[1314]|0,H=G+v|0,H>>>0<=G>>>0|H>>>0>z>>>0):0){H=0;i=b;return H|0}d:do if(!(c[1317]&4)){B=c[1212]|0;e:do if(B){z=5272|0;while(1){C=c[z>>2]|0;if(C>>>0<=B>>>0?(y=z+4|0,(C+(c[y>>2]|0)|0)>>>0>B>>>0):0)break;z=c[z+8>>2]|0;if(!z){o=181;break e}}if(z){A=A-(c[1209]|0)&p;if(A>>>0<2147483647){p=Aa(A|0)|0;if((p|0)==((c[z>>2]|0)+(c[y>>2]|0)|0)){z=A;o=190}else{z=A;o=191}}else z=0}else o=181}else o=181;while(0);do if((o|0)==181){y=Aa(0)|0;if((y|0)!=(-1|0)){A=y;z=c[1325]|0;p=z+ -1|0;if(!(p&A))z=v;else z=v-A+(p+A&0-z)|0;p=c[1314]|0;A=p+z|0;if(z>>>0>a>>>0&z>>>0<2147483647){H=c[1316]|0;if((H|0)!=0?A>>>0<=p>>>0|A>>>0>H>>>0:0){z=0;break}p=Aa(z|0)|0;if((p|0)==(y|0)){p=y;o=190}else o=191}else z=0}else z=0}while(0);f:do if((o|0)==190){if((p|0)!=(-1|0)){q=z;o=201;break d}}else if((o|0)==191){o=0-z|0;do if((p|0)!=(-1|0)&z>>>0<2147483647&x>>>0>z>>>0?(u=c[1326]|0,u=w-z+u&0-u,u>>>0<2147483647):0)if((Aa(u|0)|0)==(-1|0)){Aa(o|0)|0;z=0;break f}else{z=u+z|0;break}while(0);if((p|0)==(-1|0))z=0;else{q=z;o=201;break d}}while(0);c[1317]=c[1317]|4;o=198}else{z=0;o=198}while(0);if((((o|0)==198?v>>>0<2147483647:0)?(t=Aa(v|0)|0,s=Aa(0)|0,(t|0)!=(-1|0)&(s|0)!=(-1|0)&t>>>0<s>>>0):0)?(r=s-t|0,q=r>>>0>(a+40|0)>>>0,q):0){p=t;q=q?r:z;o=201}if((o|0)==201){r=(c[1314]|0)+q|0;c[1314]=r;if(r>>>0>(c[1315]|0)>>>0)c[1315]=r;r=c[1212]|0;g:do if(r){t=5272|0;while(1){s=c[t>>2]|0;v=t+4|0;w=c[v>>2]|0;if((p|0)==(s+w|0)){o=213;break}u=c[t+8>>2]|0;if(!u)break;else t=u}if(((o|0)==213?(c[t+12>>2]&8|0)==0:0)?r>>>0>=s>>>0&r>>>0<p>>>0:0){c[v>>2]=w+q;d=(c[1209]|0)+q|0;e=r+8|0;if(!(e&7))e=0;else e=0-e&7;H=d-e|0;c[1212]=r+e;c[1209]=H;c[r+(e+4)>>2]=H|1;c[r+(d+4)>>2]=40;c[1213]=c[1328];break}s=c[1210]|0;if(p>>>0<s>>>0){c[1210]=p;s=p}v=p+q|0;t=5272|0;while(1){if((c[t>>2]|0)==(v|0)){o=223;break}u=c[t+8>>2]|0;if(!u)break;else t=u}if((o|0)==223?(c[t+12>>2]&8|0)==0:0){c[t>>2]=p;h=t+4|0;c[h>>2]=(c[h>>2]|0)+q;h=p+8|0;if(!(h&7))h=0;else h=0-h&7;j=p+(q+8)|0;if(!(j&7))n=0;else n=0-j&7;o=p+(n+q)|0;k=h+a|0;j=p+k|0;m=o-(p+h)-a|0;c[p+(h+4)>>2]=a|3;h:do if((o|0)!=(r|0)){if((o|0)==(c[1211]|0)){H=(c[1208]|0)+m|0;c[1208]=H;c[1211]=j;c[p+(k+4)>>2]=H|1;c[p+(H+k)>>2]=H;break}r=q+4|0;u=c[p+(r+n)>>2]|0;if((u&3|0)==1){a=u&-8;t=u>>>3;i:do if(u>>>0>=256){l=c[p+((n|24)+q)>>2]|0;t=c[p+(q+12+n)>>2]|0;do if((t|0)==(o|0)){v=n|16;u=p+(r+v)|0;t=c[u>>2]|0;if(!t){u=p+(v+q)|0;t=c[u>>2]|0;if(!t){g=0;break}}while(1){w=t+20|0;v=c[w>>2]|0;if(v){t=v;u=w;continue}w=t+16|0;v=c[w>>2]|0;if(!v)break;else{t=v;u=w}}if(u>>>0<s>>>0)Wa();else{c[u>>2]=0;g=t;break}}else{u=c[p+((n|8)+q)>>2]|0;if(u>>>0<s>>>0)Wa();v=u+12|0;if((c[v>>2]|0)!=(o|0))Wa();s=t+8|0;if((c[s>>2]|0)==(o|0)){c[v>>2]=t;c[s>>2]=u;g=t;break}else Wa()}while(0);if(!l)break;s=c[p+(q+28+n)>>2]|0;t=5128+(s<<2)|0;do if((o|0)!=(c[t>>2]|0)){if(l>>>0<(c[1210]|0)>>>0)Wa();s=l+16|0;if((c[s>>2]|0)==(o|0))c[s>>2]=g;else c[l+20>>2]=g;if(!g)break i}else{c[t>>2]=g;if(g)break;c[1207]=c[1207]&~(1<<s);break i}while(0);o=c[1210]|0;if(g>>>0<o>>>0)Wa();c[g+24>>2]=l;s=n|16;l=c[p+(s+q)>>2]|0;do if(l)if(l>>>0<o>>>0)Wa();else{c[g+16>>2]=l;c[l+24>>2]=g;break}while(0);l=c[p+(r+s)>>2]|0;if(!l)break;if(l>>>0<(c[1210]|0)>>>0)Wa();else{c[g+20>>2]=l;c[l+24>>2]=g;break}}else{g=c[p+((n|8)+q)>>2]|0;r=c[p+(q+12+n)>>2]|0;u=4864+(t<<1<<2)|0;do if((g|0)!=(u|0)){if(g>>>0<s>>>0)Wa();if((c[g+12>>2]|0)==(o|0))break;Wa()}while(0);if((r|0)==(g|0)){c[1206]=c[1206]&~(1<<t);break}do if((r|0)==(u|0))l=r+8|0;else{if(r>>>0<s>>>0)Wa();s=r+8|0;if((c[s>>2]|0)==(o|0)){l=s;break}Wa()}while(0);c[g+12>>2]=r;c[l>>2]=g}while(0);o=p+((a|n)+q)|0;m=a+m|0}g=o+4|0;c[g>>2]=c[g>>2]&-2;c[p+(k+4)>>2]=m|1;c[p+(m+k)>>2]=m;g=m>>>3;if(m>>>0<256){l=g<<1;d=4864+(l<<2)|0;m=c[1206]|0;g=1<<g;do if(!(m&g)){c[1206]=m|g;f=4864+(l+2<<2)|0;e=d}else{l=4864+(l+2<<2)|0;g=c[l>>2]|0;if(g>>>0>=(c[1210]|0)>>>0){f=l;e=g;break}Wa()}while(0);c[f>>2]=j;c[e+12>>2]=j;c[p+(k+8)>>2]=e;c[p+(k+12)>>2]=d;break}e=m>>>8;do if(!e)e=0;else{if(m>>>0>16777215){e=31;break}G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=m>>>(e+7|0)&1|e<<1}while(0);l=5128+(e<<2)|0;c[p+(k+28)>>2]=e;c[p+(k+20)>>2]=0;c[p+(k+16)>>2]=0;g=c[1207]|0;f=1<<e;if(!(g&f)){c[1207]=g|f;c[l>>2]=j;c[p+(k+24)>>2]=l;c[p+(k+12)>>2]=j;c[p+(k+8)>>2]=j;break}f=c[l>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;j:do if((c[f+4>>2]&-8|0)!=(m|0)){e=m<<e;while(1){g=f+(e>>>31<<2)+16|0;l=c[g>>2]|0;if(!l)break;if((c[l+4>>2]&-8|0)==(m|0)){d=l;break j}else{e=e<<1;f=l}}if(g>>>0<(c[1210]|0)>>>0)Wa();else{c[g>>2]=j;c[p+(k+24)>>2]=f;c[p+(k+12)>>2]=j;c[p+(k+8)>>2]=j;break h}}else d=f;while(0);e=d+8|0;f=c[e>>2]|0;H=c[1210]|0;if(d>>>0>=H>>>0&f>>>0>=H>>>0){c[f+12>>2]=j;c[e>>2]=j;c[p+(k+8)>>2]=f;c[p+(k+12)>>2]=d;c[p+(k+24)>>2]=0;break}else Wa()}else{H=(c[1209]|0)+m|0;c[1209]=H;c[1212]=j;c[p+(k+4)>>2]=H|1}while(0);H=p+(h|8)|0;i=b;return H|0}e=5272|0;while(1){d=c[e>>2]|0;if(d>>>0<=r>>>0?(n=c[e+4>>2]|0,m=d+n|0,m>>>0>r>>>0):0)break;e=c[e+8>>2]|0}e=d+(n+ -39)|0;if(!(e&7))e=0;else e=0-e&7;d=d+(n+ -47+e)|0;d=d>>>0<(r+16|0)>>>0?r:d;e=d+8|0;f=p+8|0;if(!(f&7))f=0;else f=0-f&7;H=q+ -40-f|0;c[1212]=p+f;c[1209]=H;c[p+(f+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[1213]=c[1328];c[d+4>>2]=27;c[e+0>>2]=c[1318];c[e+4>>2]=c[1319];c[e+8>>2]=c[1320];c[e+12>>2]=c[1321];c[1318]=p;c[1319]=q;c[1321]=0;c[1320]=e;e=d+28|0;c[e>>2]=7;if((d+32|0)>>>0<m>>>0)do{H=e;e=e+4|0;c[e>>2]=7}while((H+8|0)>>>0<m>>>0);if((d|0)!=(r|0)){d=d-r|0;e=r+(d+4)|0;c[e>>2]=c[e>>2]&-2;c[r+4>>2]=d|1;c[r+d>>2]=d;e=d>>>3;if(d>>>0<256){f=e<<1;d=4864+(f<<2)|0;g=c[1206]|0;e=1<<e;do if(!(g&e)){c[1206]=g|e;k=4864+(f+2<<2)|0;j=d}else{f=4864+(f+2<<2)|0;e=c[f>>2]|0;if(e>>>0>=(c[1210]|0)>>>0){k=f;j=e;break}Wa()}while(0);c[k>>2]=r;c[j+12>>2]=r;c[r+8>>2]=j;c[r+12>>2]=d;break}e=d>>>8;if(e)if(d>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=d>>>(e+7|0)&1|e<<1}else e=0;j=5128+(e<<2)|0;c[r+28>>2]=e;c[r+20>>2]=0;c[r+16>>2]=0;f=c[1207]|0;g=1<<e;if(!(f&g)){c[1207]=f|g;c[j>>2]=r;c[r+24>>2]=j;c[r+12>>2]=r;c[r+8>>2]=r;break}f=c[j>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;k:do if((c[f+4>>2]&-8|0)!=(d|0)){e=d<<e;j=f;while(1){f=j+(e>>>31<<2)+16|0;g=c[f>>2]|0;if(!g)break;if((c[g+4>>2]&-8|0)==(d|0)){h=g;break k}else{e=e<<1;j=g}}if(f>>>0<(c[1210]|0)>>>0)Wa();else{c[f>>2]=r;c[r+24>>2]=j;c[r+12>>2]=r;c[r+8>>2]=r;break g}}else h=f;while(0);e=h+8|0;d=c[e>>2]|0;H=c[1210]|0;if(h>>>0>=H>>>0&d>>>0>=H>>>0){c[d+12>>2]=r;c[e>>2]=r;c[r+8>>2]=d;c[r+12>>2]=h;c[r+24>>2]=0;break}else Wa()}}else{H=c[1210]|0;if((H|0)==0|p>>>0<H>>>0)c[1210]=p;c[1318]=p;c[1319]=q;c[1321]=0;c[1215]=c[1324];c[1214]=-1;d=0;do{H=d<<1;G=4864+(H<<2)|0;c[4864+(H+3<<2)>>2]=G;c[4864+(H+2<<2)>>2]=G;d=d+1|0}while((d|0)!=32);d=p+8|0;if(!(d&7))d=0;else d=0-d&7;H=q+ -40-d|0;c[1212]=p+d;c[1209]=H;c[p+(d+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[1213]=c[1328]}while(0);d=c[1209]|0;if(d>>>0>a>>>0){G=d-a|0;c[1209]=G;H=c[1212]|0;c[1212]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}}c[(Oa()|0)>>2]=12;H=0;i=b;return H|0}function Td(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;b=i;if(!a){i=b;return}q=a+ -8|0;r=c[1210]|0;if(q>>>0<r>>>0)Wa();n=c[a+ -4>>2]|0;m=n&3;if((m|0)==1)Wa();j=n&-8;h=a+(j+ -8)|0;do if(!(n&1)){u=c[q>>2]|0;if(!m){i=b;return}q=-8-u|0;n=a+q|0;m=u+j|0;if(n>>>0<r>>>0)Wa();if((n|0)==(c[1211]|0)){e=a+(j+ -4)|0;o=c[e>>2]|0;if((o&3|0)!=3){e=n;o=m;break}c[1208]=m;c[e>>2]=o&-2;c[a+(q+4)>>2]=m|1;c[h>>2]=m;i=b;return}t=u>>>3;if(u>>>0<256){e=c[a+(q+8)>>2]|0;o=c[a+(q+12)>>2]|0;p=4864+(t<<1<<2)|0;if((e|0)!=(p|0)){if(e>>>0<r>>>0)Wa();if((c[e+12>>2]|0)!=(n|0))Wa()}if((o|0)==(e|0)){c[1206]=c[1206]&~(1<<t);e=n;o=m;break}if((o|0)!=(p|0)){if(o>>>0<r>>>0)Wa();p=o+8|0;if((c[p>>2]|0)==(n|0))s=p;else Wa()}else s=o+8|0;c[e+12>>2]=o;c[s>>2]=e;e=n;o=m;break}s=c[a+(q+24)>>2]|0;t=c[a+(q+12)>>2]|0;do if((t|0)==(n|0)){u=a+(q+20)|0;t=c[u>>2]|0;if(!t){u=a+(q+16)|0;t=c[u>>2]|0;if(!t){p=0;break}}while(1){v=t+20|0;w=c[v>>2]|0;if(w){t=w;u=v;continue}v=t+16|0;w=c[v>>2]|0;if(!w)break;else{t=w;u=v}}if(u>>>0<r>>>0)Wa();else{c[u>>2]=0;p=t;break}}else{u=c[a+(q+8)>>2]|0;if(u>>>0<r>>>0)Wa();r=u+12|0;if((c[r>>2]|0)!=(n|0))Wa();v=t+8|0;if((c[v>>2]|0)==(n|0)){c[r>>2]=t;c[v>>2]=u;p=t;break}else Wa()}while(0);if(s){r=c[a+(q+28)>>2]|0;t=5128+(r<<2)|0;if((n|0)==(c[t>>2]|0)){c[t>>2]=p;if(!p){c[1207]=c[1207]&~(1<<r);e=n;o=m;break}}else{if(s>>>0<(c[1210]|0)>>>0)Wa();r=s+16|0;if((c[r>>2]|0)==(n|0))c[r>>2]=p;else c[s+20>>2]=p;if(!p){e=n;o=m;break}}r=c[1210]|0;if(p>>>0<r>>>0)Wa();c[p+24>>2]=s;s=c[a+(q+16)>>2]|0;do if(s)if(s>>>0<r>>>0)Wa();else{c[p+16>>2]=s;c[s+24>>2]=p;break}while(0);q=c[a+(q+20)>>2]|0;if(q)if(q>>>0<(c[1210]|0)>>>0)Wa();else{c[p+20>>2]=q;c[q+24>>2]=p;e=n;o=m;break}else{e=n;o=m}}else{e=n;o=m}}else{e=q;o=j}while(0);if(e>>>0>=h>>>0)Wa();m=a+(j+ -4)|0;n=c[m>>2]|0;if(!(n&1))Wa();if(!(n&2)){if((h|0)==(c[1212]|0)){w=(c[1209]|0)+o|0;c[1209]=w;c[1212]=e;c[e+4>>2]=w|1;if((e|0)!=(c[1211]|0)){i=b;return}c[1211]=0;c[1208]=0;i=b;return}if((h|0)==(c[1211]|0)){w=(c[1208]|0)+o|0;c[1208]=w;c[1211]=e;c[e+4>>2]=w|1;c[e+w>>2]=w;i=b;return}o=(n&-8)+o|0;m=n>>>3;do if(n>>>0>=256){l=c[a+(j+16)>>2]|0;m=c[a+(j|4)>>2]|0;do if((m|0)==(h|0)){n=a+(j+12)|0;m=c[n>>2]|0;if(!m){n=a+(j+8)|0;m=c[n>>2]|0;if(!m){k=0;break}}while(1){q=m+20|0;p=c[q>>2]|0;if(p){m=p;n=q;continue}p=m+16|0;q=c[p>>2]|0;if(!q)break;else{m=q;n=p}}if(n>>>0<(c[1210]|0)>>>0)Wa();else{c[n>>2]=0;k=m;break}}else{n=c[a+j>>2]|0;if(n>>>0<(c[1210]|0)>>>0)Wa();p=n+12|0;if((c[p>>2]|0)!=(h|0))Wa();q=m+8|0;if((c[q>>2]|0)==(h|0)){c[p>>2]=m;c[q>>2]=n;k=m;break}else Wa()}while(0);if(l){m=c[a+(j+20)>>2]|0;n=5128+(m<<2)|0;if((h|0)==(c[n>>2]|0)){c[n>>2]=k;if(!k){c[1207]=c[1207]&~(1<<m);break}}else{if(l>>>0<(c[1210]|0)>>>0)Wa();m=l+16|0;if((c[m>>2]|0)==(h|0))c[m>>2]=k;else c[l+20>>2]=k;if(!k)break}h=c[1210]|0;if(k>>>0<h>>>0)Wa();c[k+24>>2]=l;l=c[a+(j+8)>>2]|0;do if(l)if(l>>>0<h>>>0)Wa();else{c[k+16>>2]=l;c[l+24>>2]=k;break}while(0);h=c[a+(j+12)>>2]|0;if(h)if(h>>>0<(c[1210]|0)>>>0)Wa();else{c[k+20>>2]=h;c[h+24>>2]=k;break}}}else{k=c[a+j>>2]|0;j=c[a+(j|4)>>2]|0;a=4864+(m<<1<<2)|0;if((k|0)!=(a|0)){if(k>>>0<(c[1210]|0)>>>0)Wa();if((c[k+12>>2]|0)!=(h|0))Wa()}if((j|0)==(k|0)){c[1206]=c[1206]&~(1<<m);break}if((j|0)!=(a|0)){if(j>>>0<(c[1210]|0)>>>0)Wa();a=j+8|0;if((c[a>>2]|0)==(h|0))l=a;else Wa()}else l=j+8|0;c[k+12>>2]=j;c[l>>2]=k}while(0);c[e+4>>2]=o|1;c[e+o>>2]=o;if((e|0)==(c[1211]|0)){c[1208]=o;i=b;return}}else{c[m>>2]=n&-2;c[e+4>>2]=o|1;c[e+o>>2]=o}h=o>>>3;if(o>>>0<256){j=h<<1;d=4864+(j<<2)|0;k=c[1206]|0;h=1<<h;if(k&h){j=4864+(j+2<<2)|0;h=c[j>>2]|0;if(h>>>0<(c[1210]|0)>>>0)Wa();else{f=j;g=h}}else{c[1206]=k|h;f=4864+(j+2<<2)|0;g=d}c[f>>2]=e;c[g+12>>2]=e;c[e+8>>2]=g;c[e+12>>2]=d;i=b;return}f=o>>>8;if(f)if(o>>>0>16777215)f=31;else{v=(f+1048320|0)>>>16&8;w=f<<v;u=(w+520192|0)>>>16&4;w=w<<u;f=(w+245760|0)>>>16&2;f=14-(u|v|f)+(w<<f>>>15)|0;f=o>>>(f+7|0)&1|f<<1}else f=0;g=5128+(f<<2)|0;c[e+28>>2]=f;c[e+20>>2]=0;c[e+16>>2]=0;j=c[1207]|0;h=1<<f;a:do if(j&h){g=c[g>>2]|0;if((f|0)==31)f=0;else f=25-(f>>>1)|0;b:do if((c[g+4>>2]&-8|0)!=(o|0)){f=o<<f;while(1){j=g+(f>>>31<<2)+16|0;h=c[j>>2]|0;if(!h)break;if((c[h+4>>2]&-8|0)==(o|0)){d=h;break b}else{f=f<<1;g=h}}if(j>>>0<(c[1210]|0)>>>0)Wa();else{c[j>>2]=e;c[e+24>>2]=g;c[e+12>>2]=e;c[e+8>>2]=e;break a}}else d=g;while(0);g=d+8|0;f=c[g>>2]|0;w=c[1210]|0;if(d>>>0>=w>>>0&f>>>0>=w>>>0){c[f+12>>2]=e;c[g>>2]=e;c[e+8>>2]=f;c[e+12>>2]=d;c[e+24>>2]=0;break}else Wa()}else{c[1207]=j|h;c[g>>2]=e;c[e+24>>2]=g;c[e+12>>2]=e;c[e+8>>2]=e}while(0);w=(c[1214]|0)+ -1|0;c[1214]=w;if(!w)d=5280|0;else{i=b;return}while(1){d=c[d>>2]|0;if(!d)break;else d=d+8|0}c[1214]=-1;i=b;return}function Ud(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;do if(a){if(b>>>0>4294967231){c[(Oa()|0)>>2]=12;e=0;break}if(b>>>0<11)e=16;else e=b+11&-8;e=fe(a+ -8|0,e)|0;if(e){e=e+8|0;break}e=Sd(b)|0;if(!e)e=0;else{f=c[a+ -4>>2]|0;f=(f&-8)-((f&3|0)==0?8:4)|0;pe(e|0,a|0,(f>>>0<b>>>0?f:b)|0)|0;Td(a)}}else e=Sd(b)|0;while(0);i=d;return e|0}function Vd(a){a=a|0;if((a|0)==32)a=1;else a=(a+ -9|0)>>>0<5;return a&1|0}function Wd(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=i;if(e>>>0>36){c[(Oa()|0)>>2]=22;s=0;t=0;F=s;i=j;return t|0}k=b+4|0;l=b+100|0;do{m=c[k>>2]|0;if(m>>>0<(c[l>>2]|0)>>>0){c[k>>2]=m+1;o=d[m>>0]|0}else o=Zd(b)|0}while((Vd(o)|0)!=0);do if((o|0)==43|(o|0)==45){m=((o|0)==45)<<31>>31;n=c[k>>2]|0;if(n>>>0<(c[l>>2]|0)>>>0){c[k>>2]=n+1;o=d[n>>0]|0;break}else{o=Zd(b)|0;break}}else m=0;while(0);n=(e|0)==0;do if((e&-17|0)==0&(o|0)==48){o=c[k>>2]|0;if(o>>>0<(c[l>>2]|0)>>>0){c[k>>2]=o+1;o=d[o>>0]|0}else o=Zd(b)|0;if((o|32|0)!=120)if(n){e=8;f=46;break}else{f=32;break}e=c[k>>2]|0;if(e>>>0<(c[l>>2]|0)>>>0){c[k>>2]=e+1;o=d[e>>0]|0}else o=Zd(b)|0;if((d[o+5321>>0]|0)>15){g=(c[l>>2]|0)==0;if(!g)c[k>>2]=(c[k>>2]|0)+ -1;if(!f){Yd(b,0);s=0;t=0;F=s;i=j;return t|0}if(g){s=0;t=0;F=s;i=j;return t|0}c[k>>2]=(c[k>>2]|0)+ -1;s=0;t=0;F=s;i=j;return t|0}else{e=16;f=46}}else{e=n?10:e;if((d[o+5321>>0]|0)>>>0<e>>>0)f=32;else{if(c[l>>2]|0)c[k>>2]=(c[k>>2]|0)+ -1;Yd(b,0);c[(Oa()|0)>>2]=22;s=0;t=0;F=s;i=j;return t|0}}while(0);if((f|0)==32)if((e|0)==10){e=o+ -48|0;if(e>>>0<10){n=0;do{n=(n*10|0)+e|0;e=c[k>>2]|0;if(e>>>0<(c[l>>2]|0)>>>0){c[k>>2]=e+1;o=d[e>>0]|0}else o=Zd(b)|0;e=o+ -48|0}while(e>>>0<10&n>>>0<429496729);p=0}else{n=0;p=0}e=o+ -48|0;if(e>>>0<10){do{q=we(n|0,p|0,10,0)|0;r=F;s=((e|0)<0)<<31>>31;t=~s;if(r>>>0>t>>>0|(r|0)==(t|0)&q>>>0>~e>>>0)break;n=ne(q|0,r|0,e|0,s|0)|0;p=F;e=c[k>>2]|0;if(e>>>0<(c[l>>2]|0)>>>0){c[k>>2]=e+1;o=d[e>>0]|0}else o=Zd(b)|0;e=o+ -48|0}while(e>>>0<10&(p>>>0<429496729|(p|0)==429496729&n>>>0<2576980378));if(e>>>0<=9){e=10;f=72}}}else f=46;a:do if((f|0)==46){if(!(e+ -1&e)){f=a[5584+((e*23|0)>>>5&7)>>0]|0;r=a[o+5321>>0]|0;n=r&255;if(n>>>0<e>>>0){o=n;n=0;do{n=o|n<<f;o=c[k>>2]|0;if(o>>>0<(c[l>>2]|0)>>>0){c[k>>2]=o+1;s=d[o>>0]|0}else s=Zd(b)|0;r=a[s+5321>>0]|0;o=r&255}while(o>>>0<e>>>0&n>>>0<134217728);p=0}else{p=0;n=0;s=o}o=oe(-1,-1,f|0)|0;q=F;if((r&255)>>>0>=e>>>0|(p>>>0>q>>>0|(p|0)==(q|0)&n>>>0>o>>>0)){o=s;f=72;break}while(1){n=le(n|0,p|0,f|0)|0;p=F;n=r&255|n;r=c[k>>2]|0;if(r>>>0<(c[l>>2]|0)>>>0){c[k>>2]=r+1;s=d[r>>0]|0}else s=Zd(b)|0;r=a[s+5321>>0]|0;if((r&255)>>>0>=e>>>0|(p>>>0>q>>>0|(p|0)==(q|0)&n>>>0>o>>>0)){o=s;f=72;break a}}}r=a[o+5321>>0]|0;f=r&255;if(f>>>0<e>>>0){n=0;do{n=f+(ba(n,e)|0)|0;f=c[k>>2]|0;if(f>>>0<(c[l>>2]|0)>>>0){c[k>>2]=f+1;q=d[f>>0]|0}else q=Zd(b)|0;r=a[q+5321>>0]|0;f=r&255}while(f>>>0<e>>>0&n>>>0<119304647);p=0}else{n=0;p=0;q=o}if((r&255)>>>0<e>>>0){f=xe(-1,-1,e|0,0)|0;o=F;while(1){if(p>>>0>o>>>0|(p|0)==(o|0)&n>>>0>f>>>0){o=q;f=72;break a}s=we(n|0,p|0,e|0,0)|0;t=F;r=r&255;if(t>>>0>4294967295|(t|0)==-1&s>>>0>~r>>>0){o=q;f=72;break a}n=ne(r|0,0,s|0,t|0)|0;p=F;q=c[k>>2]|0;if(q>>>0<(c[l>>2]|0)>>>0){c[k>>2]=q+1;q=d[q>>0]|0}else q=Zd(b)|0;r=a[q+5321>>0]|0;if((r&255)>>>0>=e>>>0){o=q;f=72;break}}}else{o=q;f=72}}while(0);if((f|0)==72)if((d[o+5321>>0]|0)>>>0<e>>>0){do{f=c[k>>2]|0;if(f>>>0<(c[l>>2]|0)>>>0){c[k>>2]=f+1;f=d[f>>0]|0}else f=Zd(b)|0}while((d[f+5321>>0]|0)>>>0<e>>>0);c[(Oa()|0)>>2]=34;p=h;n=g}if(c[l>>2]|0)c[k>>2]=(c[k>>2]|0)+ -1;if(!(p>>>0<h>>>0|(p|0)==(h|0)&n>>>0<g>>>0)){if(!((g&1|0)!=0|0!=0|(m|0)!=0)){c[(Oa()|0)>>2]=34;t=ne(g|0,h|0,-1,-1)|0;s=F;F=s;i=j;return t|0}if(p>>>0>h>>>0|(p|0)==(h|0)&n>>>0>g>>>0){c[(Oa()|0)>>2]=34;s=h;t=g;F=s;i=j;return t|0}}t=((m|0)<0)<<31>>31;t=je(n^m|0,p^t|0,m|0,t|0)|0;s=F;F=s;i=j;return t|0}\n\n\n\nfunction Xd(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,G=0.0,H=0,I=0.0,J=0.0,K=0.0,L=0.0;g=i;i=i+512|0;k=g;if(!e){e=24;j=-149}else if((e|0)==2){e=53;j=-1074}else if((e|0)==1){e=53;j=-1074}else{J=0.0;i=g;return+J}n=b+4|0;o=b+100|0;do{h=c[n>>2]|0;if(h>>>0<(c[o>>2]|0)>>>0){c[n>>2]=h+1;w=d[h>>0]|0}else w=Zd(b)|0}while((Vd(w)|0)!=0);do if((w|0)==43|(w|0)==45){h=1-(((w|0)==45&1)<<1)|0;m=c[n>>2]|0;if(m>>>0<(c[o>>2]|0)>>>0){c[n>>2]=m+1;w=d[m>>0]|0;break}else{w=Zd(b)|0;break}}else h=1;while(0);r=0;do{if((w|32|0)!=(a[5600+r>>0]|0))break;do if(r>>>0<7){m=c[n>>2]|0;if(m>>>0<(c[o>>2]|0)>>>0){c[n>>2]=m+1;w=d[m>>0]|0;break}else{w=Zd(b)|0;break}}while(0);r=r+1|0}while(r>>>0<8);do if((r|0)==3)p=23;else if((r|0)!=8){m=(f|0)!=0;if(r>>>0>3&m)if((r|0)==8)break;else{p=23;break}a:do if(!r){r=0;do{if((w|32|0)!=(a[5616+r>>0]|0))break a;do if(r>>>0<2){s=c[n>>2]|0;if(s>>>0<(c[o>>2]|0)>>>0){c[n>>2]=s+1;w=d[s>>0]|0;break}else{w=Zd(b)|0;break}}while(0);r=r+1|0}while(r>>>0<3)}while(0);if(!r){do if((w|0)==48){m=c[n>>2]|0;if(m>>>0<(c[o>>2]|0)>>>0){c[n>>2]=m+1;m=d[m>>0]|0}else m=Zd(b)|0;if((m|32|0)!=120){if(!(c[o>>2]|0)){w=48;break}c[n>>2]=(c[n>>2]|0)+ -1;w=48;break}k=c[n>>2]|0;if(k>>>0<(c[o>>2]|0)>>>0){c[n>>2]=k+1;z=d[k>>0]|0;x=0}else{z=Zd(b)|0;x=0}while(1){if((z|0)==46){p=70;break}else if((z|0)!=48){k=0;m=0;s=0;r=0;w=0;y=0;G=1.0;t=0;q=0.0;break}k=c[n>>2]|0;if(k>>>0<(c[o>>2]|0)>>>0){c[n>>2]=k+1;z=d[k>>0]|0;x=1;continue}else{z=Zd(b)|0;x=1;continue}}if((p|0)==70){k=c[n>>2]|0;if(k>>>0<(c[o>>2]|0)>>>0){c[n>>2]=k+1;z=d[k>>0]|0}else z=Zd(b)|0;if((z|0)==48){s=0;r=0;do{k=c[n>>2]|0;if(k>>>0<(c[o>>2]|0)>>>0){c[n>>2]=k+1;z=d[k>>0]|0}else z=Zd(b)|0;s=ne(s|0,r|0,-1,-1)|0;r=F}while((z|0)==48);k=0;m=0;x=1;w=1;y=0;G=1.0;t=0;q=0.0}else{k=0;m=0;s=0;r=0;w=1;y=0;G=1.0;t=0;q=0.0}}b:while(1){B=z+ -48|0;do if(B>>>0>=10){A=z|32;C=(z|0)==46;if(!((A+ -97|0)>>>0<6|C))break b;if(C)if(!w){s=m;r=k;w=1;break}else{z=46;break b}else{B=(z|0)>57?A+ -87|0:B;p=83;break}}else p=83;while(0);if((p|0)==83){p=0;do if(!((k|0)<0|(k|0)==0&m>>>0<8)){if((k|0)<0|(k|0)==0&m>>>0<14){J=G*.0625;I=J;q=q+J*+(B|0);break}if((B|0)==0|(y|0)!=0)I=G;else{y=1;I=G;q=q+G*.5}}else{I=G;t=B+(t<<4)|0}while(0);m=ne(m|0,k|0,1,0)|0;k=F;x=1;G=I}z=c[n>>2]|0;if(z>>>0<(c[o>>2]|0)>>>0){c[n>>2]=z+1;z=d[z>>0]|0;continue}else{z=Zd(b)|0;continue}}if(!x){e=(c[o>>2]|0)==0;if(!e)c[n>>2]=(c[n>>2]|0)+ -1;if(f){if(!e?(l=c[n>>2]|0,c[n>>2]=l+ -1,(w|0)!=0):0)c[n>>2]=l+ -2}else Yd(b,0);J=+(h|0)*0.0;i=g;return+J}p=(w|0)==0;l=p?m:s;p=p?k:r;if((k|0)<0|(k|0)==0&m>>>0<8)do{t=t<<4;m=ne(m|0,k|0,1,0)|0;k=F}while((k|0)<0|(k|0)==0&m>>>0<8);do if((z|32|0)==112){m=he(b,f)|0;k=F;if((m|0)==0&(k|0)==-2147483648)if(!f){Yd(b,0);J=0.0;i=g;return+J}else{if(!(c[o>>2]|0)){m=0;k=0;break}c[n>>2]=(c[n>>2]|0)+ -1;m=0;k=0;break}}else if(!(c[o>>2]|0)){m=0;k=0}else{c[n>>2]=(c[n>>2]|0)+ -1;m=0;k=0}while(0);l=le(l|0,p|0,2)|0;l=ne(l|0,F|0,-32,-1)|0;k=ne(l|0,F|0,m|0,k|0)|0;l=F;if(!t){J=+(h|0)*0.0;i=g;return+J}if((l|0)>0|(l|0)==0&k>>>0>(0-j|0)>>>0){c[(Oa()|0)>>2]=34;J=+(h|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+J}H=j+ -106|0;E=((H|0)<0)<<31>>31;if((l|0)<(E|0)|(l|0)==(E|0)&k>>>0<H>>>0){c[(Oa()|0)>>2]=34;J=+(h|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+J}if((t|0)>-1)do{t=t<<1;if(!(q>=.5))G=q;else{G=q+-1.0;t=t|1}q=q+G;k=ne(k|0,l|0,-1,-1)|0;l=F}while((t|0)>-1);j=je(32,0,j|0,((j|0)<0)<<31>>31|0)|0;j=ne(k|0,l|0,j|0,F|0)|0;H=F;if(0>(H|0)|0==(H|0)&e>>>0>j>>>0)if((j|0)<0){e=0;p=126}else{e=j;p=124}else p=124;if((p|0)==124)if((e|0)<53)p=126;else{j=e;G=+(h|0);I=0.0}if((p|0)==126){I=+(h|0);j=e;G=I;I=+Va(+(+_d(1.0,84-e|0)),+I)}H=(j|0)<32&q!=0.0&(t&1|0)==0;q=G*(H?0.0:q)+(I+G*+(((H&1)+t|0)>>>0))-I;if(!(q!=0.0))c[(Oa()|0)>>2]=34;J=+$d(q,k);i=g;return+J}while(0);m=j+e|0;l=0-m|0;B=0;while(1){if((w|0)==46){p=137;break}else if((w|0)!=48){D=0;C=0;A=0;break}r=c[n>>2]|0;if(r>>>0<(c[o>>2]|0)>>>0){c[n>>2]=r+1;w=d[r>>0]|0;B=1;continue}else{w=Zd(b)|0;B=1;continue}}if((p|0)==137){p=c[n>>2]|0;if(p>>>0<(c[o>>2]|0)>>>0){c[n>>2]=p+1;w=d[p>>0]|0}else w=Zd(b)|0;if((w|0)==48){D=0;C=0;do{D=ne(D|0,C|0,-1,-1)|0;C=F;p=c[n>>2]|0;if(p>>>0<(c[o>>2]|0)>>>0){c[n>>2]=p+1;w=d[p>>0]|0}else w=Zd(b)|0}while((w|0)==48);B=1;A=1}else{D=0;C=0;A=1}}c[k>>2]=0;z=w+ -48|0;E=(w|0)==46;c:do if(z>>>0<10|E){p=k+496|0;y=0;x=0;t=0;s=0;r=0;d:while(1){do if(E)if(!A){D=y;C=x;A=1}else break d;else{E=ne(y|0,x|0,1,0)|0;x=F;H=(w|0)!=48;if((s|0)>=125){if(!H){y=E;break}c[p>>2]=c[p>>2]|1;y=E;break}y=k+(s<<2)|0;if(t)z=w+ -48+((c[y>>2]|0)*10|0)|0;c[y>>2]=z;t=t+1|0;z=(t|0)==9;y=E;B=1;t=z?0:t;s=(z&1)+s|0;r=H?E:r}while(0);w=c[n>>2]|0;if(w>>>0<(c[o>>2]|0)>>>0){c[n>>2]=w+1;w=d[w>>0]|0}else w=Zd(b)|0;z=w+ -48|0;E=(w|0)==46;if(!(z>>>0<10|E)){p=160;break c}}z=(B|0)!=0;p=168}else{y=0;x=0;t=0;s=0;r=0;p=160}while(0);do if((p|0)==160){z=(A|0)==0;D=z?y:D;C=z?x:C;z=(B|0)!=0;if(!(z&(w|32|0)==101))if((w|0)>-1){p=168;break}else{p=170;break}z=he(b,f)|0;w=F;do if((z|0)==0&(w|0)==-2147483648)if(!f){Yd(b,0);J=0.0;i=g;return+J}else{if(!(c[o>>2]|0)){z=0;w=0;break}c[n>>2]=(c[n>>2]|0)+ -1;z=0;w=0;break}while(0);b=ne(z|0,w|0,D|0,C|0)|0;C=F}while(0);if((p|0)==168)if(c[o>>2]|0){c[n>>2]=(c[n>>2]|0)+ -1;if(z)b=D;else p=171}else p=170;if((p|0)==170)if(z)b=D;else p=171;if((p|0)==171){c[(Oa()|0)>>2]=22;Yd(b,0);J=0.0;i=g;return+J}n=c[k>>2]|0;if(!n){J=+(h|0)*0.0;i=g;return+J}if((b|0)==(y|0)&(C|0)==(x|0)&((x|0)<0|(x|0)==0&y>>>0<10)?e>>>0>30|(n>>>e|0)==0:0){J=+(h|0)*+(n>>>0);i=g;return+J}H=(j|0)/-2|0;E=((H|0)<0)<<31>>31;if((C|0)>(E|0)|(C|0)==(E|0)&b>>>0>H>>>0){c[(Oa()|0)>>2]=34;J=+(h|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+J}H=j+ -106|0;E=((H|0)<0)<<31>>31;if((C|0)<(E|0)|(C|0)==(E|0)&b>>>0<H>>>0){c[(Oa()|0)>>2]=34;J=+(h|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+J}if(t){if((t|0)<9){n=k+(s<<2)|0;o=c[n>>2]|0;do{o=o*10|0;t=t+1|0}while((t|0)!=9);c[n>>2]=o}s=s+1|0}if((r|0)<9?(r|0)<=(b|0)&(b|0)<18:0){if((b|0)==9){J=+(h|0)*+((c[k>>2]|0)>>>0);i=g;return+J}if((b|0)<9){J=+(h|0)*+((c[k>>2]|0)>>>0)/+(c[5632+(8-b<<2)>>2]|0);i=g;return+J}H=e+27+(ba(b,-3)|0)|0;n=c[k>>2]|0;if((H|0)>30|(n>>>H|0)==0){J=+(h|0)*+(n>>>0)*+(c[5632+(b+ -10<<2)>>2]|0);i=g;return+J}}n=(b|0)%9|0;if(!n){n=0;o=0}else{f=(b|0)>-1?n:n+9|0;p=c[5632+(8-f<<2)>>2]|0;if(s){r=1e9/(p|0)|0;n=0;o=0;t=0;do{D=k+(t<<2)|0;E=c[D>>2]|0;H=((E>>>0)/(p>>>0)|0)+o|0;c[D>>2]=H;o=ba((E>>>0)%(p>>>0)|0,r)|0;E=t;t=t+1|0;if((E|0)==(n|0)&(H|0)==0){n=t&127;b=b+ -9|0}}while((t|0)!=(s|0));if(o){c[k+(s<<2)>>2]=o;s=s+1|0}}else{n=0;s=0}o=0;b=9-f+b|0}e:while(1){f=k+(n<<2)|0;if((b|0)<18){do{r=0;f=s+127|0;while(1){f=f&127;p=k+(f<<2)|0;t=le(c[p>>2]|0,0,29)|0;t=ne(t|0,F|0,r|0,0)|0;r=F;if(r>>>0>0|(r|0)==0&t>>>0>1e9){H=xe(t|0,r|0,1e9,0)|0;t=ye(t|0,r|0,1e9,0)|0;r=H}else r=0;c[p>>2]=t;p=(f|0)==(n|0);if(!((f|0)!=(s+127&127|0)|p))s=(t|0)==0?f:s;if(p)break;else f=f+ -1|0}o=o+ -29|0}while((r|0)==0)}else{if((b|0)!=18)break;do{if((c[f>>2]|0)>>>0>=9007199){b=18;break e}r=0;p=s+127|0;while(1){p=p&127;t=k+(p<<2)|0;w=le(c[t>>2]|0,0,29)|0;w=ne(w|0,F|0,r|0,0)|0;r=F;if(r>>>0>0|(r|0)==0&w>>>0>1e9){H=xe(w|0,r|0,1e9,0)|0;w=ye(w|0,r|0,1e9,0)|0;r=H}else r=0;c[t>>2]=w;t=(p|0)==(n|0);if(!((p|0)!=(s+127&127|0)|t))s=(w|0)==0?p:s;if(t)break;else p=p+ -1|0}o=o+ -29|0}while((r|0)==0)}n=n+127&127;if((n|0)==(s|0)){H=s+127&127;s=k+((s+126&127)<<2)|0;c[s>>2]=c[s>>2]|c[k+(H<<2)>>2];s=H}c[k+(n<<2)>>2]=r;b=b+9|0}f:while(1){f=s+1&127;p=k+((s+127&127)<<2)|0;while(1){t=(b|0)==18;r=(b|0)>27?9:1;while(1){w=0;while(1){x=w+n&127;if((x|0)==(s|0)){w=2;break}y=c[k+(x<<2)>>2]|0;z=c[5624+(w<<2)>>2]|0;if(y>>>0<z>>>0){w=2;break}x=w+1|0;if(y>>>0>z>>>0)break;if((x|0)<2)w=x;else{w=x;break}}if((w|0)==2&t)break f;o=r+o|0;if((n|0)==(s|0))n=s;else break}t=(1<<r)+ -1|0;w=1e9>>>r;x=n;y=0;do{D=k+(n<<2)|0;E=c[D>>2]|0;H=(E>>>r)+y|0;c[D>>2]=H;y=ba(E&t,w)|0;H=(n|0)==(x|0)&(H|0)==0;n=n+1&127;b=H?b+ -9|0:b;x=H?n:x}while((n|0)!=(s|0));if(!y){n=x;continue}if((f|0)!=(x|0))break;c[p>>2]=c[p>>2]|1;n=x}c[k+(s<<2)>>2]=y;n=x;s=f}b=n&127;if((b|0)==(s|0)){c[k+(f+ -1<<2)>>2]=0;s=f}G=+((c[k+(b<<2)>>2]|0)>>>0);b=n+1&127;if((b|0)==(s|0)){s=s+1&127;c[k+(s+ -1<<2)>>2]=0}q=+(h|0);I=q*(G*1.0e9+ +((c[k+(b<<2)>>2]|0)>>>0));h=o+53|0;j=h-j|0;if((j|0)<(e|0))if((j|0)<0){e=0;b=1;p=244}else{e=j;b=1;p=243}else{b=0;p=243}if((p|0)==243)if((e|0)<53)p=244;else{G=0.0;J=0.0}if((p|0)==244){L=+Va(+(+_d(1.0,105-e|0)),+I);K=+cb(+I,+(+_d(1.0,53-e|0)));G=L;J=K;I=L+(I-K)}f=n+2&127;do if((f|0)!=(s|0)){k=c[k+(f<<2)>>2]|0;do if(k>>>0>=5e8){if(k>>>0>5e8){J=q*.75+J;break}if((n+3&127|0)==(s|0)){J=q*.5+J;break}else{J=q*.75+J;break}}else{if((k|0)==0?(n+3&127|0)==(s|0):0)break;J=q*.25+J}while(0);if((53-e|0)<=1)break;if(+cb(+J,1.0)!=0.0)break;J=J+1.0}while(0);q=I+J-G;do if((h&2147483647|0)>(-2-m|0)){if(+Q(+q)>=9007199254740992.0){b=(b|0)!=0&(e|0)==(j|0)?0:b;o=o+1|0;q=q*.5}if((o+50|0)<=(l|0)?!((b|0)!=0&J!=0.0):0)break;c[(Oa()|0)>>2]=34}while(0);L=+$d(q,o);i=g;return+L}else if((r|0)==3){e=c[n>>2]|0;if(e>>>0<(c[o>>2]|0)>>>0){c[n>>2]=e+1;e=d[e>>0]|0}else e=Zd(b)|0;if((e|0)==40)e=1;else{if(!(c[o>>2]|0)){L=u;i=g;return+L}c[n>>2]=(c[n>>2]|0)+ -1;L=u;i=g;return+L}while(1){h=c[n>>2]|0;if(h>>>0<(c[o>>2]|0)>>>0){c[n>>2]=h+1;h=d[h>>0]|0}else h=Zd(b)|0;if(!((h+ -48|0)>>>0<10|(h+ -65|0)>>>0<26)?!((h+ -97|0)>>>0<26|(h|0)==95):0)break;e=e+1|0}if((h|0)==41){L=u;i=g;return+L}h=(c[o>>2]|0)==0;if(!h)c[n>>2]=(c[n>>2]|0)+ -1;if(!m){c[(Oa()|0)>>2]=22;Yd(b,0);L=0.0;i=g;return+L}if((e|0)==0|h){L=u;i=g;return+L}do{e=e+ -1|0;c[n>>2]=(c[n>>2]|0)+ -1}while((e|0)!=0);q=u;i=g;return+q}else{if(c[o>>2]|0)c[n>>2]=(c[n>>2]|0)+ -1;c[(Oa()|0)>>2]=22;Yd(b,0);L=0.0;i=g;return+L}}while(0);if((p|0)==23){e=(c[o>>2]|0)==0;if(!e)c[n>>2]=(c[n>>2]|0)+ -1;if(!(r>>>0<4|(f|0)==0|e))do{c[n>>2]=(c[n>>2]|0)+ -1;r=r+ -1|0}while(r>>>0>3)}L=+(h|0)*v;i=g;return+L}function Yd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a+104>>2]=b;f=c[a+8>>2]|0;e=c[a+4>>2]|0;g=f-e|0;c[a+108>>2]=g;if((b|0)!=0&(g|0)>(b|0)){c[a+100>>2]=e+b;i=d;return}else{c[a+100>>2]=f;i=d;return}}function Zd(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;f=i;j=b+104|0;l=c[j>>2]|0;if(!((l|0)!=0?(c[b+108>>2]|0)>=(l|0):0))k=3;if((k|0)==3?(e=be(b)|0,(e|0)>=0):0){k=c[j>>2]|0;j=c[b+8>>2]|0;if((k|0)!=0?(g=c[b+4>>2]|0,h=k-(c[b+108>>2]|0)+ -1|0,(j-g|0)>(h|0)):0)c[b+100>>2]=g+h;else c[b+100>>2]=j;g=c[b+4>>2]|0;if(j){l=b+108|0;c[l>>2]=j+1-g+(c[l>>2]|0)}b=g+ -1|0;if((d[b>>0]|0|0)==(e|0)){l=e;i=f;return l|0}a[b>>0]=e;l=e;i=f;return l|0}c[b+100>>2]=0;l=-1;i=f;return l|0}function _d(a,b){a=+a;b=b|0;var d=0,e=0;d=i;if((b|0)>1023){a=a*8.98846567431158e+307;e=b+ -1023|0;if((e|0)>1023){b=b+ -2046|0;b=(b|0)>1023?1023:b;a=a*8.98846567431158e+307}else b=e}else if((b|0)<-1022){a=a*2.2250738585072014e-308;e=b+1022|0;if((e|0)<-1022){b=b+2044|0;b=(b|0)<-1022?-1022:b;a=a*2.2250738585072014e-308}else b=e}b=le(b+1023|0,0,52)|0;e=F;c[k>>2]=b;c[k+4>>2]=e;a=a*+h[k>>3];i=d;return+a}function $d(a,b){a=+a;b=b|0;var c=0;c=i;a=+_d(a,b);i=c;return+a}function ae(b){b=b|0;var d=0,e=0,f=0;e=i;f=b+74|0;d=a[f>>0]|0;a[f>>0]=d+255|d;f=b+20|0;d=b+44|0;if((c[f>>2]|0)>>>0>(c[d>>2]|0)>>>0)eb[c[b+36>>2]&1](b,0,0)|0;c[b+16>>2]=0;c[b+28>>2]=0;c[f>>2]=0;f=c[b>>2]|0;if(!(f&20)){f=c[d>>2]|0;c[b+8>>2]=f;c[b+4>>2]=f;f=0;i=e;return f|0}if(!(f&4)){f=-1;i=e;return f|0}c[b>>2]=f|32;f=-1;i=e;return f|0}function be(a){a=a|0;var b=0,e=0;b=i;i=i+16|0;e=b;if((c[a+8>>2]|0)==0?(ae(a)|0)!=0:0)a=-1;else if((eb[c[a+32>>2]&1](a,e,1)|0)==1)a=d[e>>0]|0;else a=-1;i=b;return a|0}function ce(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,g=0,h=0;d=i;i=i+112|0;e=d;h=e+0|0;g=h+112|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));g=e+4|0;c[g>>2]=a;h=e+8|0;c[h>>2]=-1;c[e+44>>2]=a;c[e+76>>2]=-1;Yd(e,0);f=+Xd(e,1,1);e=(c[g>>2]|0)-(c[h>>2]|0)+(c[e+108>>2]|0)|0;if(!b){i=d;return+f}if(e)a=a+e|0;c[b>>2]=a;i=d;return+f}function de(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+112|0;g=e;c[g>>2]=0;f=g+4|0;c[f>>2]=a;c[g+44>>2]=a;if((a|0)<0)c[g+8>>2]=-1;else c[g+8>>2]=a+2147483647;c[g+76>>2]=-1;Yd(g,0);d=Wd(g,d,1,-2147483648,0)|0;if(!b){i=e;return d|0}c[b>>2]=a+((c[f>>2]|0)+(c[g+108>>2]|0)-(c[g+8>>2]|0));i=e;return d|0}function ee(b,c){b=b|0;c=c|0;var d=0,e=0,f=0;d=i;f=a[b>>0]|0;e=a[c>>0]|0;if(f<<24>>24==0?1:f<<24>>24!=e<<24>>24)c=f;else{do{b=b+1|0;c=c+1|0;f=a[b>>0]|0;e=a[c>>0]|0}while(!(f<<24>>24==0?1:f<<24>>24!=e<<24>>24));c=f}i=d;return(c&255)-(e&255)|0}function fe(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;f=a+4|0;e=c[f>>2]|0;l=e&-8;j=a+l|0;m=c[1210]|0;h=e&3;if(!((h|0)!=1&a>>>0>=m>>>0&a>>>0<j>>>0))Wa();g=a+(l|4)|0;p=c[g>>2]|0;if(!(p&1))Wa();if(!h){if(b>>>0<256){r=0;i=d;return r|0}if(l>>>0>=(b+4|0)>>>0?(l-b|0)>>>0<=c[1326]<<1>>>0:0){r=a;i=d;return r|0}r=0;i=d;return r|0}if(l>>>0>=b>>>0){h=l-b|0;if(h>>>0<=15){r=a;i=d;return r|0}c[f>>2]=e&1|b|2;c[a+(b+4)>>2]=h|3;c[g>>2]=c[g>>2]|1;ge(a+b|0,h);r=a;i=d;return r|0}if((j|0)==(c[1212]|0)){g=(c[1209]|0)+l|0;if(g>>>0<=b>>>0){r=0;i=d;return r|0}r=g-b|0;c[f>>2]=e&1|b|2;c[a+(b+4)>>2]=r|1;c[1212]=a+b;c[1209]=r;r=a;i=d;return r|0}if((j|0)==(c[1211]|0)){h=(c[1208]|0)+l|0;if(h>>>0<b>>>0){r=0;i=d;return r|0}g=h-b|0;if(g>>>0>15){c[f>>2]=e&1|b|2;c[a+(b+4)>>2]=g|1;c[a+h>>2]=g;e=a+(h+4)|0;c[e>>2]=c[e>>2]&-2;e=a+b|0}else{c[f>>2]=e&1|h|2;e=a+(h+4)|0;c[e>>2]=c[e>>2]|1;e=0;g=0}c[1208]=g;c[1211]=e;r=a;i=d;return r|0}if(p&2){r=0;i=d;return r|0}g=(p&-8)+l|0;if(g>>>0<b>>>0){r=0;i=d;return r|0}h=g-b|0;o=p>>>3;do if(p>>>0>=256){n=c[a+(l+24)>>2]|0;o=c[a+(l+12)>>2]|0;do if((o|0)==(j|0)){p=a+(l+20)|0;o=c[p>>2]|0;if(!o){p=a+(l+16)|0;o=c[p>>2]|0;if(!o){k=0;break}}while(1){r=o+20|0;q=c[r>>2]|0;if(q){o=q;p=r;continue}q=o+16|0;r=c[q>>2]|0;if(!r)break;else{o=r;p=q}}if(p>>>0<m>>>0)Wa();else{c[p>>2]=0;k=o;break}}else{p=c[a+(l+8)>>2]|0;if(p>>>0<m>>>0)Wa();m=p+12|0;if((c[m>>2]|0)!=(j|0))Wa();q=o+8|0;if((c[q>>2]|0)==(j|0)){c[m>>2]=o;c[q>>2]=p;k=o;break}else Wa()}while(0);if(n){m=c[a+(l+28)>>2]|0;o=5128+(m<<2)|0;if((j|0)==(c[o>>2]|0)){c[o>>2]=k;if(!k){c[1207]=c[1207]&~(1<<m);break}}else{if(n>>>0<(c[1210]|0)>>>0)Wa();m=n+16|0;if((c[m>>2]|0)==(j|0))c[m>>2]=k;else c[n+20>>2]=k;if(!k)break}j=c[1210]|0;if(k>>>0<j>>>0)Wa();c[k+24>>2]=n;m=c[a+(l+16)>>2]|0;do if(m)if(m>>>0<j>>>0)Wa();else{c[k+16>>2]=m;c[m+24>>2]=k;break}while(0);j=c[a+(l+20)>>2]|0;if(j)if(j>>>0<(c[1210]|0)>>>0)Wa();else{c[k+20>>2]=j;c[j+24>>2]=k;break}}}else{k=c[a+(l+8)>>2]|0;l=c[a+(l+12)>>2]|0;p=4864+(o<<1<<2)|0;if((k|0)!=(p|0)){if(k>>>0<m>>>0)Wa();if((c[k+12>>2]|0)!=(j|0))Wa()}if((l|0)==(k|0)){c[1206]=c[1206]&~(1<<o);break}if((l|0)!=(p|0)){if(l>>>0<m>>>0)Wa();m=l+8|0;if((c[m>>2]|0)==(j|0))n=m;else Wa()}else n=l+8|0;c[k+12>>2]=l;c[n>>2]=k}while(0);if(h>>>0<16){c[f>>2]=g|e&1|2;r=a+(g|4)|0;c[r>>2]=c[r>>2]|1;r=a;i=d;return r|0}else{c[f>>2]=e&1|b|2;c[a+(b+4)>>2]=h|3;r=a+(g|4)|0;c[r>>2]=c[r>>2]|1;ge(a+b|0,h);r=a;i=d;return r|0}return 0}function ge(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;h=a+b|0;l=c[a+4>>2]|0;do if(!(l&1)){p=c[a>>2]|0;if(!(l&3)){i=d;return}l=a+(0-p)|0;m=p+b|0;r=c[1210]|0;if(l>>>0<r>>>0)Wa();if((l|0)==(c[1211]|0)){e=a+(b+4)|0;n=c[e>>2]|0;if((n&3|0)!=3){e=l;n=m;break}c[1208]=m;c[e>>2]=n&-2;c[a+(4-p)>>2]=m|1;c[h>>2]=m;i=d;return}s=p>>>3;if(p>>>0<256){e=c[a+(8-p)>>2]|0;n=c[a+(12-p)>>2]|0;o=4864+(s<<1<<2)|0;if((e|0)!=(o|0)){if(e>>>0<r>>>0)Wa();if((c[e+12>>2]|0)!=(l|0))Wa()}if((n|0)==(e|0)){c[1206]=c[1206]&~(1<<s);e=l;n=m;break}if((n|0)!=(o|0)){if(n>>>0<r>>>0)Wa();o=n+8|0;if((c[o>>2]|0)==(l|0))q=o;else Wa()}else q=n+8|0;c[e+12>>2]=n;c[q>>2]=e;e=l;n=m;break}q=c[a+(24-p)>>2]|0;s=c[a+(12-p)>>2]|0;do if((s|0)==(l|0)){u=16-p|0;t=a+(u+4)|0;s=c[t>>2]|0;if(!s){t=a+u|0;s=c[t>>2]|0;if(!s){o=0;break}}while(1){v=s+20|0;u=c[v>>2]|0;if(u){s=u;t=v;continue}u=s+16|0;v=c[u>>2]|0;if(!v)break;else{s=v;t=u}}if(t>>>0<r>>>0)Wa();else{c[t>>2]=0;o=s;break}}else{t=c[a+(8-p)>>2]|0;if(t>>>0<r>>>0)Wa();r=t+12|0;if((c[r>>2]|0)!=(l|0))Wa();u=s+8|0;if((c[u>>2]|0)==(l|0)){c[r>>2]=s;c[u>>2]=t;o=s;break}else Wa()}while(0);if(q){s=c[a+(28-p)>>2]|0;r=5128+(s<<2)|0;if((l|0)==(c[r>>2]|0)){c[r>>2]=o;if(!o){c[1207]=c[1207]&~(1<<s);e=l;n=m;break}}else{if(q>>>0<(c[1210]|0)>>>0)Wa();r=q+16|0;if((c[r>>2]|0)==(l|0))c[r>>2]=o;else c[q+20>>2]=o;if(!o){e=l;n=m;break}}r=c[1210]|0;if(o>>>0<r>>>0)Wa();c[o+24>>2]=q;p=16-p|0;q=c[a+p>>2]|0;do if(q)if(q>>>0<r>>>0)Wa();else{c[o+16>>2]=q;c[q+24>>2]=o;break}while(0);p=c[a+(p+4)>>2]|0;if(p)if(p>>>0<(c[1210]|0)>>>0)Wa();else{c[o+20>>2]=p;c[p+24>>2]=o;e=l;n=m;break}else{e=l;n=m}}else{e=l;n=m}}else{e=a;n=b}while(0);l=c[1210]|0;if(h>>>0<l>>>0)Wa();m=a+(b+4)|0;o=c[m>>2]|0;if(!(o&2)){if((h|0)==(c[1212]|0)){v=(c[1209]|0)+n|0;c[1209]=v;c[1212]=e;c[e+4>>2]=v|1;if((e|0)!=(c[1211]|0)){i=d;return}c[1211]=0;c[1208]=0;i=d;return}if((h|0)==(c[1211]|0)){v=(c[1208]|0)+n|0;c[1208]=v;c[1211]=e;c[e+4>>2]=v|1;c[e+v>>2]=v;i=d;return}n=(o&-8)+n|0;m=o>>>3;do if(o>>>0>=256){k=c[a+(b+24)>>2]|0;o=c[a+(b+12)>>2]|0;do if((o|0)==(h|0)){o=a+(b+20)|0;m=c[o>>2]|0;if(!m){o=a+(b+16)|0;m=c[o>>2]|0;if(!m){j=0;break}}while(1){p=m+20|0;q=c[p>>2]|0;if(q){m=q;o=p;continue}q=m+16|0;p=c[q>>2]|0;if(!p)break;else{m=p;o=q}}if(o>>>0<l>>>0)Wa();else{c[o>>2]=0;j=m;break}}else{m=c[a+(b+8)>>2]|0;if(m>>>0<l>>>0)Wa();p=m+12|0;if((c[p>>2]|0)!=(h|0))Wa();l=o+8|0;if((c[l>>2]|0)==(h|0)){c[p>>2]=o;c[l>>2]=m;j=o;break}else Wa()}while(0);if(k){m=c[a+(b+28)>>2]|0;l=5128+(m<<2)|0;if((h|0)==(c[l>>2]|0)){c[l>>2]=j;if(!j){c[1207]=c[1207]&~(1<<m);break}}else{if(k>>>0<(c[1210]|0)>>>0)Wa();l=k+16|0;if((c[l>>2]|0)==(h|0))c[l>>2]=j;else c[k+20>>2]=j;if(!j)break}h=c[1210]|0;if(j>>>0<h>>>0)Wa();c[j+24>>2]=k;k=c[a+(b+16)>>2]|0;do if(k)if(k>>>0<h>>>0)Wa();else{c[j+16>>2]=k;c[k+24>>2]=j;break}while(0);h=c[a+(b+20)>>2]|0;if(h)if(h>>>0<(c[1210]|0)>>>0)Wa();else{c[j+20>>2]=h;c[h+24>>2]=j;break}}}else{j=c[a+(b+8)>>2]|0;a=c[a+(b+12)>>2]|0;b=4864+(m<<1<<2)|0;if((j|0)!=(b|0)){if(j>>>0<l>>>0)Wa();if((c[j+12>>2]|0)!=(h|0))Wa()}if((a|0)==(j|0)){c[1206]=c[1206]&~(1<<m);break}if((a|0)!=(b|0)){if(a>>>0<l>>>0)Wa();b=a+8|0;if((c[b>>2]|0)==(h|0))k=b;else Wa()}else k=a+8|0;c[j+12>>2]=a;c[k>>2]=j}while(0);c[e+4>>2]=n|1;c[e+n>>2]=n;if((e|0)==(c[1211]|0)){c[1208]=n;i=d;return}}else{c[m>>2]=o&-2;c[e+4>>2]=n|1;c[e+n>>2]=n}b=n>>>3;if(n>>>0<256){a=b<<1;h=4864+(a<<2)|0;j=c[1206]|0;b=1<<b;if(j&b){a=4864+(a+2<<2)|0;j=c[a>>2]|0;if(j>>>0<(c[1210]|0)>>>0)Wa();else{g=a;f=j}}else{c[1206]=j|b;g=4864+(a+2<<2)|0;f=h}c[g>>2]=e;c[f+12>>2]=e;c[e+8>>2]=f;c[e+12>>2]=h;i=d;return}f=n>>>8;if(f)if(n>>>0>16777215)f=31;else{u=(f+1048320|0)>>>16&8;v=f<<u;t=(v+520192|0)>>>16&4;v=v<<t;f=(v+245760|0)>>>16&2;f=14-(t|u|f)+(v<<f>>>15)|0;f=n>>>(f+7|0)&1|f<<1}else f=0;g=5128+(f<<2)|0;c[e+28>>2]=f;c[e+20>>2]=0;c[e+16>>2]=0;a=c[1207]|0;h=1<<f;if(!(a&h)){c[1207]=a|h;c[g>>2]=e;c[e+24>>2]=g;c[e+12>>2]=e;c[e+8>>2]=e;i=d;return}g=c[g>>2]|0;if((f|0)==31)f=0;else f=25-(f>>>1)|0;a:do if((c[g+4>>2]&-8|0)!=(n|0)){f=n<<f;a=g;while(1){h=a+(f>>>31<<2)+16|0;g=c[h>>2]|0;if(!g)break;if((c[g+4>>2]&-8|0)==(n|0))break a;else{f=f<<1;a=g}}if(h>>>0<(c[1210]|0)>>>0)Wa();c[h>>2]=e;c[e+24>>2]=a;c[e+12>>2]=e;c[e+8>>2]=e;i=d;return}while(0);f=g+8|0;h=c[f>>2]|0;v=c[1210]|0;if(!(g>>>0>=v>>>0&h>>>0>=v>>>0))Wa();c[h+12>>2]=e;c[f>>2]=e;c[e+8>>2]=h;c[e+12>>2]=g;c[e+24>>2]=0;i=d;return}function he(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;g=a+4|0;h=c[g>>2]|0;f=a+100|0;if(h>>>0<(c[f>>2]|0)>>>0){c[g>>2]=h+1;j=d[h>>0]|0}else j=Zd(a)|0;if((j|0)==43|(j|0)==45){k=c[g>>2]|0;h=(j|0)==45&1;if(k>>>0<(c[f>>2]|0)>>>0){c[g>>2]=k+1;j=d[k>>0]|0}else j=Zd(a)|0;if((j+ -48|0)>>>0>9&(b|0)!=0?(c[f>>2]|0)!=0:0)c[g>>2]=(c[g>>2]|0)+ -1}else h=0;if((j+ -48|0)>>>0>9){if(!(c[f>>2]|0)){j=-2147483648;k=0;F=j;i=e;return k|0}c[g>>2]=(c[g>>2]|0)+ -1;j=-2147483648;k=0;F=j;i=e;return k|0}else b=0;do{b=j+ -48+(b*10|0)|0;j=c[g>>2]|0;if(j>>>0<(c[f>>2]|0)>>>0){c[g>>2]=j+1;j=d[j>>0]|0}else j=Zd(a)|0}while((j+ -48|0)>>>0<10&(b|0)<214748364);k=((b|0)<0)<<31>>31;if((j+ -48|0)>>>0<10)do{k=we(b|0,k|0,10,0)|0;b=F;j=ne(j|0,((j|0)<0)<<31>>31|0,-48,-1)|0;b=ne(j|0,F|0,k|0,b|0)|0;k=F;j=c[g>>2]|0;if(j>>>0<(c[f>>2]|0)>>>0){c[g>>2]=j+1;j=d[j>>0]|0}else j=Zd(a)|0}while((j+ -48|0)>>>0<10&((k|0)<21474836|(k|0)==21474836&b>>>0<2061584302));if((j+ -48|0)>>>0<10)do{j=c[g>>2]|0;if(j>>>0<(c[f>>2]|0)>>>0){c[g>>2]=j+1;j=d[j>>0]|0}else j=Zd(a)|0}while((j+ -48|0)>>>0<10);if(c[f>>2]|0)c[g>>2]=(c[g>>2]|0)+ -1;g=(h|0)!=0;h=je(0,0,b|0,k|0)|0;j=g?F:k;k=g?h:b;F=j;i=e;return k|0}function ie(){}function je(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=b-d-(c>>>0>a>>>0|0)>>>0;return(F=b,a-c>>>0|0)|0}function ke(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;i=b&3;h=d|d<<8|d<<16|d<<24;g=f&~3;if(i){i=b+4-i|0;while((b|0)<(i|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function le(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}F=a<<c-32;return 0}function me(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return(F=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function oe(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=0;return b>>>c-32|0}function pe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ca(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function qe(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){F=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}F=(b|0)<0?-1:0;return b>>c-32|0}function re(b){b=b|0;var c=0;c=a[n+(b>>>24)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)>>0]|0)+24|0}function se(b){b=b|0;var c=0;c=a[m+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)>>0]|0)+24|0}function te(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;d=b&65535;c=ba(d,f)|0;e=a>>>16;d=(c>>>16)+(ba(d,e)|0)|0;b=b>>>16;a=ba(b,f)|0;return(F=(d>>>16)+(ba(b,e)|0)+(((d&65535)+a|0)>>>16)|0,d+a<<16|c&65535|0)|0}function ue(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=je(j^a,i^b,j,i)|0;g=F;b=f^j;a=e^i;a=je((ze(h,g,je(f^c,e^d,f,e)|0,F,0)|0)^b,F^a,b,a)|0;return a|0}function ve(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+8|0;j=f|0;h=b>>31|((b|0)<0?-1:0)<<1;g=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;l=e>>31|((e|0)<0?-1:0)<<1;k=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;b=je(h^a,g^b,h,g)|0;a=F;ze(b,a,je(l^d,k^e,l,k)|0,F,j)|0;a=je(c[j>>2]^h,c[j+4>>2]^g,h,g)|0;b=F;i=f;return(F=b,a)|0}function we(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;a=te(e,f)|0;c=F;return(F=(ba(b,f)|0)+(ba(d,e)|0)+c|c&0,a|0|0)|0}function xe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=ze(a,b,c,d,0)|0;return a|0}function ye(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+8|0;f=g|0;ze(a,b,d,e,f)|0;i=g;return(F=c[f+4>>2]|0,c[f>>2]|0)|0}function ze(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=a;j=b;i=j;l=d;g=e;k=g;if(!i){g=(f|0)!=0;if(!k){if(g){c[f>>2]=(h>>>0)%(l>>>0);c[f+4>>2]=0}k=0;m=(h>>>0)/(l>>>0)>>>0;return(F=k,m)|0}else{if(!g){l=0;m=0;return(F=l,m)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;l=0;m=0;return(F=l,m)|0}}m=(k|0)==0;do if(l){if(!m){k=(re(k|0)|0)-(re(i|0)|0)|0;if(k>>>0<=31){m=k+1|0;l=31-k|0;a=k-31>>31;j=m;b=h>>>(m>>>0)&a|i<<l;a=i>>>(m>>>0)&a;k=0;l=h<<l;break}if(!f){l=0;m=0;return(F=l,m)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;l=0;m=0;return(F=l,m)|0}k=l-1|0;if(k&l){l=(re(l|0)|0)+33-(re(i|0)|0)|0;p=64-l|0;m=32-l|0;n=m>>31;o=l-32|0;a=o>>31;j=l;b=m-1>>31&i>>>(o>>>0)|(i<<m|h>>>(l>>>0))&a;a=a&i>>>(l>>>0);k=h<<p&n;l=(i<<p|h>>>(o>>>0))&n|h<<m&l-33>>31;break}if(f){c[f>>2]=k&h;c[f+4>>2]=0}if((l|0)==1){o=j|b&0;p=a|0|0;return(F=o,p)|0}else{p=se(l|0)|0;o=i>>>(p>>>0)|0;p=i<<32-p|h>>>(p>>>0)|0;return(F=o,p)|0}}else{if(m){if(f){c[f>>2]=(i>>>0)%(l>>>0);c[f+4>>2]=0}o=0;p=(i>>>0)/(l>>>0)>>>0;return(F=o,p)|0}if(!h){if(f){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(k>>>0)}o=0;p=(i>>>0)/(k>>>0)>>>0;return(F=o,p)|0}l=k-1|0;if(!(l&k)){if(f){c[f>>2]=a|0;c[f+4>>2]=l&i|b&0}o=0;p=i>>>((se(k|0)|0)>>>0);return(F=o,p)|0}k=(re(k|0)|0)-(re(i|0)|0)|0;if(k>>>0<=30){a=k+1|0;l=31-k|0;j=a;b=i<<l|h>>>(a>>>0);a=i>>>(a>>>0);k=0;l=h<<l;break}if(!f){o=0;p=0;return(F=o,p)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;o=0;p=0;return(F=o,p)|0}while(0);if(!j){g=l;e=0;i=0}else{h=d|0|0;g=g|e&0;e=ne(h,g,-1,-1)|0;d=F;i=0;do{m=l;l=k>>>31|l<<1;k=i|k<<1;m=b<<1|m>>>31|0;n=b>>>31|a<<1|0;je(e,d,m,n)|0;p=F;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;b=je(m,n,o&h,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&g)|0;a=F;j=j-1|0}while((j|0)!=0);g=l;e=0}h=0;if(f){c[f>>2]=b;c[f+4>>2]=a}o=(k|0)>>>31|(g|h)<<1|(h<<1|k>>>31)&0|e;p=(k<<1|0>>>31)&-2|i;return(F=o,p)|0}function Ae(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return eb[a&1](b|0,c|0,d|0)|0}function Be(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;fb[a&3](b|0,c|0,d|0,e|0,f|0)}function Ce(a,b){a=a|0;b=b|0;gb[a&31](b|0)}function De(a,b,c){a=a|0;b=b|0;c=c|0;hb[a&3](b|0,c|0)}function Ee(a,b){a=a|0;b=b|0;return ib[a&1](b|0)|0}function Fe(a){a=a|0;jb[a&3]()}function Ge(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;kb[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function He(a,b,c){a=a|0;b=b|0;c=c|0;return lb[a&3](b|0,c|0)|0}function Ie(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;mb[a&3](b|0,c|0,d|0,e|0)}function Je(a,b,c){a=a|0;b=b|0;c=c|0;ca(0);return 0}function Ke(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(1)}function Le(a){a=a|0;ca(2)}function Me(a,b){a=a|0;b=b|0;ca(3)}function Ne(a){a=a|0;ca(4);return 0}function Oe(){ca(5)}function Pe(){bb()}function Qe(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(6)}function Re(a,b){a=a|0;b=b|0;ca(7);return 0}function Se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(8)}\n\n\n\n\n// EMSCRIPTEN_END_FUNCS\n// (start of meteor/midamble.js)\n// This \"midamble\" is hacked into the output JS in a place\n// where it has access to the inner function generated\n// by Emscripten, the one that starts with \"use asm\".\n// NOTE: This doesn't work with minification on!\n/////setInnerMalloc = function (hookedMalloc) {\n/////  _malloc = hookedMalloc;\n/////};\n/////setInnerFree = function (hookedFree) {\n/////  _free = hookedFree;\n/////};\n// (end of meteor/midamble.js)\nvar eb=[Je,Dd];var fb=[Ke,Kd,Jd,Ke];var gb=[Le,wb,yb,Ab,Db,Ib,Hb,bc,dc,zc,yc,Oc,rd,qd,yd,Bd,zd,Ad,Cd,zb,Rd,Le,Le,Le,Le,Le,Le,Le,Le,Le,Le,Le];var hb=[Me,Cb,Fb,fc];var ib=[Ne,sd];var jb=[Oe,Pe,Pd,Qd];var kb=[Qe,Md,Ld,Qe];var lb=[Re,Bb,Eb,ec];var mb=[Se,Fd,Gd,Se];return{_yo:$c,_strlen:me,_retireVar:id,_bitshift64Lshr:oe,_unyo:ad,_solve:ed,_bitshift64Shl:le,_getSolution:fd,___cxa_is_pointer_type:Od,_memset:ke,_getNumVars:gd,_memcpy:pe,_getConflictClauseSize:jd,_addClause:dd,_i64Subtract:je,_createTheSolver:bd,_realloc:Ud,_i64Add:ne,_solveAssuming:hd,___cxa_can_catch:Nd,_ensureVar:cd,_getConflictClause:kd,_free:Td,_malloc:Sd,__GLOBAL__I_a:cc,__GLOBAL__I_a127:Pc,runPostSets:ie,stackAlloc:nb,stackSave:ob,stackRestore:pb,setThrew:qb,setTempRet0:tb,getTempRet0:ub,dynCall_iiii:Ae,dynCall_viiiii:Be,dynCall_vi:Ce,dynCall_vii:De,dynCall_ii:Ee,dynCall_v:Fe,dynCall_viiiiii:Ge,dynCall_iii:He,dynCall_viiii:Ie}})\n\n\n// EMSCRIPTEN_END_ASM\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _yo=Module[\"_yo\"]=asm[\"_yo\"];var _strlen=Module[\"_strlen\"]=asm[\"_strlen\"];var _retireVar=Module[\"_retireVar\"]=asm[\"_retireVar\"];var _bitshift64Lshr=Module[\"_bitshift64Lshr\"]=asm[\"_bitshift64Lshr\"];var _unyo=Module[\"_unyo\"]=asm[\"_unyo\"];var _solve=Module[\"_solve\"]=asm[\"_solve\"];var _bitshift64Shl=Module[\"_bitshift64Shl\"]=asm[\"_bitshift64Shl\"];var _getSolution=Module[\"_getSolution\"]=asm[\"_getSolution\"];var ___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=asm[\"___cxa_is_pointer_type\"];var _memset=Module[\"_memset\"]=asm[\"_memset\"];var _getNumVars=Module[\"_getNumVars\"]=asm[\"_getNumVars\"];var _memcpy=Module[\"_memcpy\"]=asm[\"_memcpy\"];var _getConflictClauseSize=Module[\"_getConflictClauseSize\"]=asm[\"_getConflictClauseSize\"];var _addClause=Module[\"_addClause\"]=asm[\"_addClause\"];var _i64Subtract=Module[\"_i64Subtract\"]=asm[\"_i64Subtract\"];var _createTheSolver=Module[\"_createTheSolver\"]=asm[\"_createTheSolver\"];var _realloc=Module[\"_realloc\"]=asm[\"_realloc\"];var _i64Add=Module[\"_i64Add\"]=asm[\"_i64Add\"];var _solveAssuming=Module[\"_solveAssuming\"]=asm[\"_solveAssuming\"];var ___cxa_can_catch=Module[\"___cxa_can_catch\"]=asm[\"___cxa_can_catch\"];var _ensureVar=Module[\"_ensureVar\"]=asm[\"_ensureVar\"];var _getConflictClause=Module[\"_getConflictClause\"]=asm[\"_getConflictClause\"];var _free=Module[\"_free\"]=asm[\"_free\"];var _malloc=Module[\"_malloc\"]=asm[\"_malloc\"];var __GLOBAL__I_a=Module[\"__GLOBAL__I_a\"]=asm[\"__GLOBAL__I_a\"];var __GLOBAL__I_a127=Module[\"__GLOBAL__I_a127\"]=asm[\"__GLOBAL__I_a127\"];var runPostSets=Module[\"runPostSets\"]=asm[\"runPostSets\"];var dynCall_iiii=Module[\"dynCall_iiii\"]=asm[\"dynCall_iiii\"];var dynCall_viiiii=Module[\"dynCall_viiiii\"]=asm[\"dynCall_viiiii\"];var dynCall_vi=Module[\"dynCall_vi\"]=asm[\"dynCall_vi\"];var dynCall_vii=Module[\"dynCall_vii\"]=asm[\"dynCall_vii\"];var dynCall_ii=Module[\"dynCall_ii\"]=asm[\"dynCall_ii\"];var dynCall_v=Module[\"dynCall_v\"]=asm[\"dynCall_v\"];var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=asm[\"dynCall_viiiiii\"];var dynCall_iii=Module[\"dynCall_iii\"]=asm[\"dynCall_iii\"];var dynCall_viiii=Module[\"dynCall_viiii\"]=asm[\"dynCall_viiii\"];Runtime.stackAlloc=asm[\"stackAlloc\"];Runtime.stackSave=asm[\"stackSave\"];Runtime.stackRestore=asm[\"stackRestore\"];Runtime.setTempRet0=asm[\"setTempRet0\"];Runtime.getTempRet0=asm[\"getTempRet0\"];var i64Math=(function(){var goog={math:{}};goog.math.Long=(function(low,high){this.low_=low|0;this.high_=high|0});goog.math.Long.IntCache_={};goog.math.Long.fromInt=(function(value){if(-128<=value&&value<128){var cachedObj=goog.math.Long.IntCache_[value];if(cachedObj){return cachedObj}}var obj=new goog.math.Long(value|0,value<0?-1:0);if(-128<=value&&value<128){goog.math.Long.IntCache_[value]=obj}return obj});goog.math.Long.fromNumber=(function(value){if(isNaN(value)||!isFinite(value)){return goog.math.Long.ZERO}else if(value<=-goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MIN_VALUE}else if(value+1>=goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MAX_VALUE}else if(value<0){return goog.math.Long.fromNumber(-value).negate()}else{return new goog.math.Long(value%goog.math.Long.TWO_PWR_32_DBL_|0,value/goog.math.Long.TWO_PWR_32_DBL_|0)}});goog.math.Long.fromBits=(function(lowBits,highBits){return new goog.math.Long(lowBits,highBits)});goog.math.Long.fromString=(function(str,opt_radix){if(str.length==0){throw Error(\"number format error: empty string\")}var radix=opt_radix||10;if(radix<2||36<radix){throw Error(\"radix out of range: \"+radix)}if(str.charAt(0)==\"-\"){return goog.math.Long.fromString(str.substring(1),radix).negate()}else if(str.indexOf(\"-\")>=0){throw Error('number format error: interior \"-\" character: '+str)}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,8));var result=goog.math.Long.ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i);var value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=goog.math.Long.fromNumber(Math.pow(radix,size));result=result.multiply(power).add(goog.math.Long.fromNumber(value))}else{result=result.multiply(radixToPower);result=result.add(goog.math.Long.fromNumber(value))}}return result});goog.math.Long.TWO_PWR_16_DBL_=1<<16;goog.math.Long.TWO_PWR_24_DBL_=1<<24;goog.math.Long.TWO_PWR_32_DBL_=goog.math.Long.TWO_PWR_16_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_31_DBL_=goog.math.Long.TWO_PWR_32_DBL_/2;goog.math.Long.TWO_PWR_48_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_64_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_32_DBL_;goog.math.Long.TWO_PWR_63_DBL_=goog.math.Long.TWO_PWR_64_DBL_/2;goog.math.Long.ZERO=goog.math.Long.fromInt(0);goog.math.Long.ONE=goog.math.Long.fromInt(1);goog.math.Long.NEG_ONE=goog.math.Long.fromInt(-1);goog.math.Long.MAX_VALUE=goog.math.Long.fromBits(4294967295|0,2147483647|0);goog.math.Long.MIN_VALUE=goog.math.Long.fromBits(0,2147483648|0);goog.math.Long.TWO_PWR_24_=goog.math.Long.fromInt(1<<24);goog.math.Long.prototype.toInt=(function(){return this.low_});goog.math.Long.prototype.toNumber=(function(){return this.high_*goog.math.Long.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()});goog.math.Long.prototype.toString=(function(opt_radix){var radix=opt_radix||10;if(radix<2||36<radix){throw Error(\"radix out of range: \"+radix)}if(this.isZero()){return\"0\"}if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){var radixLong=goog.math.Long.fromNumber(radix);var div=this.div(radixLong);var rem=div.multiply(radixLong).subtract(this);return div.toString(radix)+rem.toInt().toString(radix)}else{return\"-\"+this.negate().toString(radix)}}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,6));var rem=this;var result=\"\";while(true){var remDiv=rem.div(radixToPower);var intval=rem.subtract(remDiv.multiply(radixToPower)).toInt();var digits=intval.toString(radix);rem=remDiv;if(rem.isZero()){return digits+result}else{while(digits.length<6){digits=\"0\"+digits}result=\"\"+digits+result}}});goog.math.Long.prototype.getHighBits=(function(){return this.high_});goog.math.Long.prototype.getLowBits=(function(){return this.low_});goog.math.Long.prototype.getLowBitsUnsigned=(function(){return this.low_>=0?this.low_:goog.math.Long.TWO_PWR_32_DBL_+this.low_});goog.math.Long.prototype.getNumBitsAbs=(function(){if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){return 64}else{return this.negate().getNumBitsAbs()}}else{var val=this.high_!=0?this.high_:this.low_;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0){break}}return this.high_!=0?bit+33:bit+1}});goog.math.Long.prototype.isZero=(function(){return this.high_==0&&this.low_==0});goog.math.Long.prototype.isNegative=(function(){return this.high_<0});goog.math.Long.prototype.isOdd=(function(){return(this.low_&1)==1});goog.math.Long.prototype.equals=(function(other){return this.high_==other.high_&&this.low_==other.low_});goog.math.Long.prototype.notEquals=(function(other){return this.high_!=other.high_||this.low_!=other.low_});goog.math.Long.prototype.lessThan=(function(other){return this.compare(other)<0});goog.math.Long.prototype.lessThanOrEqual=(function(other){return this.compare(other)<=0});goog.math.Long.prototype.greaterThan=(function(other){return this.compare(other)>0});goog.math.Long.prototype.greaterThanOrEqual=(function(other){return this.compare(other)>=0});goog.math.Long.prototype.compare=(function(other){if(this.equals(other)){return 0}var thisNeg=this.isNegative();var otherNeg=other.isNegative();if(thisNeg&&!otherNeg){return-1}if(!thisNeg&&otherNeg){return 1}if(this.subtract(other).isNegative()){return-1}else{return 1}});goog.math.Long.prototype.negate=(function(){if(this.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.MIN_VALUE}else{return this.not().add(goog.math.Long.ONE)}});goog.math.Long.prototype.add=(function(other){var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=65535;c16+=a16+b16;c32+=c16>>>16;c16&=65535;c32+=a32+b32;c48+=c32>>>16;c32&=65535;c48+=a48+b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.subtract=(function(other){return this.add(other.negate())});goog.math.Long.prototype.multiply=(function(other){if(this.isZero()){return goog.math.Long.ZERO}else if(other.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){return other.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}else if(other.equals(goog.math.Long.MIN_VALUE)){return this.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().multiply(other.negate())}else{return this.negate().multiply(other).negate()}}else if(other.isNegative()){return this.multiply(other.negate()).negate()}if(this.lessThan(goog.math.Long.TWO_PWR_24_)&&other.lessThan(goog.math.Long.TWO_PWR_24_)){return goog.math.Long.fromNumber(this.toNumber()*other.toNumber())}var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=65535;c16+=a16*b00;c32+=c16>>>16;c16&=65535;c16+=a00*b16;c32+=c16>>>16;c16&=65535;c32+=a32*b00;c48+=c32>>>16;c32&=65535;c32+=a16*b16;c48+=c32>>>16;c32&=65535;c32+=a00*b32;c48+=c32>>>16;c32&=65535;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.div=(function(other){if(other.isZero()){throw Error(\"division by zero\")}else if(this.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){if(other.equals(goog.math.Long.ONE)||other.equals(goog.math.Long.NEG_ONE)){return goog.math.Long.MIN_VALUE}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ONE}else{var halfThis=this.shiftRight(1);var approx=halfThis.div(other).shiftLeft(1);if(approx.equals(goog.math.Long.ZERO)){return other.isNegative()?goog.math.Long.ONE:goog.math.Long.NEG_ONE}else{var rem=this.subtract(other.multiply(approx));var result=approx.add(rem.div(other));return result}}}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().div(other.negate())}else{return this.negate().div(other).negate()}}else if(other.isNegative()){return this.div(other.negate()).negate()}var res=goog.math.Long.ZERO;var rem=this;while(rem.greaterThanOrEqual(other)){var approx=Math.max(1,Math.floor(rem.toNumber()/other.toNumber()));var log2=Math.ceil(Math.log(approx)/Math.LN2);var delta=log2<=48?1:Math.pow(2,log2-48);var approxRes=goog.math.Long.fromNumber(approx);var approxRem=approxRes.multiply(other);while(approxRem.isNegative()||approxRem.greaterThan(rem)){approx-=delta;approxRes=goog.math.Long.fromNumber(approx);approxRem=approxRes.multiply(other)}if(approxRes.isZero()){approxRes=goog.math.Long.ONE}res=res.add(approxRes);rem=rem.subtract(approxRem)}return res});goog.math.Long.prototype.modulo=(function(other){return this.subtract(this.div(other).multiply(other))});goog.math.Long.prototype.not=(function(){return goog.math.Long.fromBits(~this.low_,~this.high_)});goog.math.Long.prototype.and=(function(other){return goog.math.Long.fromBits(this.low_&other.low_,this.high_&other.high_)});goog.math.Long.prototype.or=(function(other){return goog.math.Long.fromBits(this.low_|other.low_,this.high_|other.high_)});goog.math.Long.prototype.xor=(function(other){return goog.math.Long.fromBits(this.low_^other.low_,this.high_^other.high_)});goog.math.Long.prototype.shiftLeft=(function(numBits){numBits&=63;if(numBits==0){return this}else{var low=this.low_;if(numBits<32){var high=this.high_;return goog.math.Long.fromBits(low<<numBits,high<<numBits|low>>>32-numBits)}else{return goog.math.Long.fromBits(0,low<<numBits-32)}}});goog.math.Long.prototype.shiftRight=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>numBits)}else{return goog.math.Long.fromBits(high>>numBits-32,high>=0?0:-1)}}});goog.math.Long.prototype.shiftRightUnsigned=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>>numBits)}else if(numBits==32){return goog.math.Long.fromBits(high,0)}else{return goog.math.Long.fromBits(high>>>numBits-32,0)}}});var navigator={appName:\"Modern Browser\"};var dbits;var canary=0xdeadbeefcafe;var j_lm=(canary&16777215)==15715070;function BigInteger(a,b,c){if(a!=null)if(\"number\"==typeof a)this.fromNumber(a,b,c);else if(b==null&&\"string\"!=typeof a)this.fromString(a,256);else this.fromString(a,b)}function nbi(){return new BigInteger(null)}function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/67108864);w[j++]=v&67108863}return c}function am2(i,x,w,j,c,n){var xl=x&32767,xh=x>>15;while(--n>=0){var l=this[i]&32767;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&32767)<<15)+w[j]+(c&1073741823);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&1073741823}return c}function am3(i,x,w,j,c,n){var xl=x&16383,xh=x>>14;while(--n>=0){var l=this[i]&16383;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&16383)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&268435455}return c}if(j_lm&&navigator.appName==\"Microsoft Internet Explorer\"){BigInteger.prototype.am=am2;dbits=30}else if(j_lm&&navigator.appName!=\"Netscape\"){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM=\"0123456789abcdefghijklmnopqrstuvwxyz\";var BI_RC=new Array;var rr,vv;rr=\"0\".charCodeAt(0);for(vv=0;vv<=9;++vv)BI_RC[rr++]=vv;rr=\"a\".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;rr=\"A\".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;function int2char(n){return BI_RM.charAt(n)}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c}function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i)r[i]=this[i];r.t=this.t;r.s=this.s}function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0}function nbv(i){var r=nbi();r.fromInt(i);return r}function bnpFromString(s,b){var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{this.fromRadix(s,b);return}this.t=0;this.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&255:intAt(s,i);if(x<0){if(s.charAt(i)==\"-\")mi=true;continue}mi=false;if(sh==0)this[this.t++]=x;else if(sh+k>this.DB){this[this.t-1]|=(x&(1<<this.DB-sh)-1)<<sh;this[this.t++]=x>>this.DB-sh}else this[this.t-1]|=x<<sh;sh+=k;if(sh>=this.DB)sh-=this.DB}if(k==8&&(s[0]&128)!=0){this.s=-1;if(sh>0)this[this.t-1]|=(1<<this.DB-sh)-1<<sh}this.clamp();if(mi)BigInteger.ZERO.subTo(this,this)}function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c)--this.t}function bnToString(b){if(this.s<0)return\"-\"+this.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return this.toRadix(b);var km=(1<<k)-1,d,m=false,r=\"\",i=this.t;var p=this.DB-i*this.DB%k;if(i-->0){if(p<this.DB&&(d=this[i]>>p)>0){m=true;r=int2char(d)}while(i>=0){if(p<k){d=(this[i]&(1<<p)-1)<<k-p;d|=this[--i]>>(p+=this.DB-k)}else{d=this[i]>>(p-=k)&km;if(p<=0){p+=this.DB;--i}}if(d>0)m=true;if(m)r+=int2char(d)}}return m?r:\"0\"}function bnNegate(){var r=nbi();BigInteger.ZERO.subTo(this,r);return r}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0)if((r=this[i]-a[i])!=0)return r;return 0}function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16}if((t=x>>8)!=0){x=t;r+=8}if((t=x>>4)!=0){x=t;r+=4}if((t=x>>2)!=0){x=t;r+=2}if((t=x>>1)!=0){x=t;r+=1}return r}function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i)r[i+n]=this[i];for(i=n-1;i>=0;--i)r[i]=0;r.t=this.t+n;r.s=this.s}function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i)r[i-n]=this[i];r.t=Math.max(this.t-n,0);r.s=this.s}function bnpLShiftTo(n,r){var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/this.DB),c=this.s<<bs&this.DM,i;for(i=this.t-1;i>=0;--i){r[i+ds+1]=this[i]>>cbs|c;c=(this[i]&bm)<<bs}for(i=ds-1;i>=0;--i)r[i]=0;r[ds]=c;r.t=this.t+ds+1;r.s=this.s;r.clamp()}function bnpRShiftTo(n,r){r.s=this.s;var ds=Math.floor(n/this.DB);if(ds>=this.t){r.t=0;return}var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<bs)-1;r[0]=this[ds]>>bs;for(var i=ds+1;i<this.t;++i){r[i-ds-1]|=(this[i]&bm)<<cbs;r[i-ds]=this[i]>>bs}if(bs>0)r[this.t-ds-1]|=(this.s&bm)<<cbs;r.t=this.t-ds;r.clamp()}function bnpSubTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]-a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c-=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c-=a[i];r[i++]=c&this.DM;c>>=this.DB}c-=a.s}r.s=c<0?-1:0;if(c<-1)r[i++]=this.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp()}function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0)r[i]=0;for(i=0;i<y.t;++i)r[i+x.t]=x.am(0,y[i],r,i,0,x.t);r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0)r[i]=0;for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp()}function bnpDivRemTo(m,q,r){var pm=m.abs();if(pm.t<=0)return;var pt=this.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)this.copyTo(r);return}if(r==null)r=nbi();var y=nbi(),ts=this.s,ms=m.s;var nsh=this.DB-nbits(pm[pm.t-1]);if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r)}else{pm.copyTo(y);pt.copyTo(r)}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<this.F1)+(ys>1?y[ys-2]>>this.F2:0);var d1=this.FV/yt,d2=(1<<this.F1)/yt,e=1<<this.F2;var i=r.t,j=i-ys,t=q==null?nbi():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r)}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);while(y.t<ys)y[y.t++]=0;while(--j>=0){var qd=r[--i]==y0?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd)r.subTo(t,r)}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q)}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);if(ts<0)BigInteger.ZERO.subTo(r,r)}function bnMod(a){var r=nbi();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r}function Classic(m){this.m=m}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x}function cRevert(x){return x}function cReduce(x){x.divRemTo(this.m,null,x)}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}function cSqrTo(x,r){x.squareTo(r);this.reduce(r)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;y=y*(2-(x&15)*y)&15;y=y*(2-(x&255)*y)&255;y=y*(2-((x&65535)*y&65535))&65535;y=y*(2-x*y%this.DV)%this.DV;return y>0?this.DV-y:-y}function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t}function montConvert(x){var r=nbi();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r}function montRevert(x){var r=nbi();x.copyTo(r);this.reduce(r);return r}function montReduce(x){while(x.t<=this.mt2)x[x.t++]=0;for(var i=0;i<this.m.t;++i){var j=x[i]&32767;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x)}function montSqrTo(x,r){x.squareTo(r);this.reduce(r)}function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0}function bnpExp(e,z){if(e>4294967295||e<1)return BigInteger.ONE;var r=nbi(),r2=nbi(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t}}return z.revert(r)}function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);function bnpFromRadix(s,b){this.fromInt(0);if(b==null)b=10;var cs=this.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)==\"-\"&&this.signum()==0)mi=true;continue}w=b*w+x;if(++j>=cs){this.dMultiply(d);this.dAddOffset(w,0);j=0;w=0}}if(j>0){this.dMultiply(Math.pow(b,j));this.dAddOffset(w,0)}if(mi)BigInteger.ZERO.subTo(this,this)}function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r))}function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1}function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w)this[this.t++]=0;this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w]}}function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return\"0\";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=nbi(),z=nbi(),r=\"\";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z)}return z.intValue().toString(b)+r}function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1}else if(this.t==1)return this[0];else if(this.t==0)return 0;return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnpAddTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]+a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c+=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c+=a[i];r[i++]=c&this.DM;c>>=this.DB}c+=a.s}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=this.DV+c;r.t=i;r.clamp()}BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.addTo=bnpAddTo;var Wrapper={abs:(function(l,h){var x=new goog.math.Long(l,h);var ret;if(x.isNegative()){ret=x.negate()}else{ret=x}HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_}),ensureTemps:(function(){if(Wrapper.ensuredTemps)return;Wrapper.ensuredTemps=true;Wrapper.two32=new BigInteger;Wrapper.two32.fromString(\"4294967296\",10);Wrapper.two64=new BigInteger;Wrapper.two64.fromString(\"18446744073709551616\",10);Wrapper.temp1=new BigInteger;Wrapper.temp2=new BigInteger}),lh2bignum:(function(l,h){var a=new BigInteger;a.fromString(h.toString(),10);var b=new BigInteger;a.multiplyTo(Wrapper.two32,b);var c=new BigInteger;c.fromString(l.toString(),10);var d=new BigInteger;c.addTo(b,d);return d}),stringify:(function(l,h,unsigned){var ret=(new goog.math.Long(l,h)).toString();if(unsigned&&ret[0]==\"-\"){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(ret,10);ret=new BigInteger;Wrapper.two64.addTo(bignum,ret);ret=ret.toString(10)}return ret}),fromString:(function(str,base,min,max,unsigned){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(str,base);var bigmin=new BigInteger;bigmin.fromString(min,10);var bigmax=new BigInteger;bigmax.fromString(max,10);if(unsigned&&bignum.compareTo(BigInteger.ZERO)<0){var temp=new BigInteger;bignum.addTo(Wrapper.two64,temp);bignum=temp}var error=false;if(bignum.compareTo(bigmin)<0){bignum=bigmin;error=true}else if(bignum.compareTo(bigmax)>0){bignum=bigmax;error=true}var ret=goog.math.Long.fromString(bignum.toString());HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_;if(error)throw\"range error\"})};return Wrapper})();if(memoryInitializer){if(typeof Module[\"locateFile\"]===\"function\"){memoryInitializer=Module[\"locateFile\"](memoryInitializer)}else if(Module[\"memoryInitializerPrefixURL\"]){memoryInitializer=Module[\"memoryInitializerPrefixURL\"]+memoryInitializer}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module[\"readBinary\"](memoryInitializer);HEAPU8.set(data,STATIC_BASE)}else{addRunDependency(\"memory initializer\");Browser.asyncLoad(memoryInitializer,(function(data){HEAPU8.set(data,STATIC_BASE);removeRunDependency(\"memory initializer\")}),(function(data){throw\"could not load memory initializer \"+memoryInitializer}))}}function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"]&&shouldRunNow)run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};Module[\"callMain\"]=Module.callMain=function callMain(args){assert(runDependencies==0,\"cannot call main when async dependencies remain! (listen on __ATMAIN__)\");assert(__ATPRERUN__.length==0,\"cannot call main when preRun functions remain to be called\");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module[\"thisProgram\"]),\"i8\",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),\"i8\",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,\"i32\",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module[\"_main\"](argc,argv,0);exit(ret)}catch(e){if(e instanceof ExitStatus){return}else if(e==\"SimulateInfiniteLoop\"){Module[\"noExitRuntime\"]=true;return}else{if(e&&typeof e===\"object\"&&e.stack)Module.printErr(\"exception thrown: \"+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module[\"arguments\"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr(\"pre-main prep time: \"+(Date.now()-preloadStartTime)+\" ms\")}if(Module[\"_main\"]&&shouldRunNow){Module[\"callMain\"](args)}postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout((function(){setTimeout((function(){Module[\"setStatus\"](\"\")}),1);doRun()}),1)}else{doRun()}}Module[\"run\"]=Module.run=run;function exit(status){if(Module[\"noExitRuntime\"]){return}ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(ENVIRONMENT_IS_NODE){process[\"stdout\"][\"once\"](\"drain\",(function(){process[\"exit\"](status)}));console.log(\" \");setTimeout((function(){process[\"exit\"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit===\"function\"){quit(status)}throw new ExitStatus(status)}Module[\"exit\"]=Module.exit=exit;function abort(text){if(text){Module.print(text);Module.printErr(text)}ABORT=true;EXITSTATUS=1;var extra=\"\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\";throw\"abort() at \"+stackTrace()+extra}Module[\"abort\"]=Module.abort=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"]){shouldRunNow=false}run();var origMalloc=Module._malloc;var origFree=Module._free;var MEMSTATS={totalMemory:Module.HEAPU8.length,heapUsed:0};var MEMSTATS_DATA={pointerToSizeMap:{},getSizeOfPointer:(function(ptr){return MEMSTATS_DATA.pointerToSizeMap[ptr]})};Module.MEMSTATS=MEMSTATS;Module.MEMSTATS_DATA=MEMSTATS_DATA;var hookedMalloc=(function(size){var ptr=origMalloc(size);if(!ptr){return 0}MEMSTATS.heapUsed+=size;MEMSTATS_DATA.pointerToSizeMap[ptr]=size;return ptr});var hookedFree=(function(ptr){if(ptr){MEMSTATS.heapUsed-=MEMSTATS_DATA.getSizeOfPointer(ptr)||0;delete MEMSTATS_DATA.pointerToSizeMap[ptr]}return origFree(ptr)});Module._malloc=hookedMalloc;Module._free=hookedFree;_malloc=hookedMalloc;_free=hookedFree;var setInnerMalloc,setInnerFree;if(setInnerMalloc){setInnerMalloc(hookedMalloc);setInnerFree(hookedFree)}return module.exports});if(typeof module!==\"undefined\"){module.exports=C_MINISAT}\n\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/logic-solver/minisat.js\n// module id = 5\n// module chunks = 0","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/underscore/underscore.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}